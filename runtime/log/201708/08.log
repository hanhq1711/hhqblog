[ 2017-08-08T00:06:49+08:00 ] 172.17.180.47 117.71.34.139 GET /
[ log ] hhqblog.com/ [运行时间：0.035021s][吞吐率：28.55req/s] [内存消耗：5,616.43kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.1.4322)',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'accept-language' => 'zh-cn,zh;q=0.5',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000293s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000802s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000996s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000503s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000398s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000292s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000301s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000300s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000637s ]

---------------------------------------------------------------
[ 2017-08-08T00:12:37+08:00 ] 172.17.180.47 106.11.153.67 GET /ar/35.html
[ log ] hhqblog.com/ar/35.html [运行时间：0.030352s][吞吐率：32.95req/s] [内存消耗：4,678.56kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'accept-language' => 'zh-cn,en-us,zh-tw,en-gb,en;',
  'host' => 'hhqblog.com',
  'accept-encoding' => 'gzip',
  'accept' => '*/*',
  'connection' => 'Keep-Alive',
  'user-agent' => 'YisouSpider',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '35',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000285s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000827s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000578s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 35 LIMIT 1 [ RunTime:0.000312s ]

---------------------------------------------------------------
[ 2017-08-08T00:25:06+08:00 ] 172.17.180.47 61.135.169.10 GET /
[ log ] www.hhqblog.com/ [运行时间：0.031572s][吞吐率：31.67req/s] [内存消耗：5,669.34kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'user-agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36',
  'host' => 'www.hhqblog.com',
  'connection' => 'close',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000311s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000836s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000588s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000381s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000302s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000739s ]

---------------------------------------------------------------
[ 2017-08-08T00:30:37+08:00 ] 172.17.180.47 106.11.153.67 GET /ar/34.html
[ log ] www.hhqblog.com/ar/34.html [运行时间：0.029734s][吞吐率：33.63req/s] [内存消耗：4,603.79kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'accept-language' => 'zh-cn,en-us,zh-tw,en-gb,en;',
  'host' => 'www.hhqblog.com',
  'accept-encoding' => 'gzip',
  'accept' => '*/*',
  'connection' => 'Keep-Alive',
  'user-agent' => 'YisouSpider',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '34',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000299s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000811s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000579s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 34 LIMIT 1 [ RunTime:0.000270s ]

---------------------------------------------------------------
[ 2017-08-08T00:54:24+08:00 ] 172.17.180.47 165.227.100.62 HEAD /
[ log ] www.hhqblog.com/ [运行时间：0.031334s][吞吐率：31.91req/s] [内存消耗：5,669.13kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'referer' => 'http://www.netcraft.com/survey/',
  'user-agent' => 'Mozilla/4.0 (compatible; Netcraft Web Server Survey)',
  'connection' => 'close',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000291s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000825s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000581s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000362s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000281s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000724s ]

---------------------------------------------------------------
[ 2017-08-08T02:05:35+08:00 ] 172.17.180.47 109.63.160.52 GET /
[ log ] hhqblog.com/ [运行时间：0.037117s][吞吐率：26.94req/s] [内存消耗：5,617.50kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'accept' => 'image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, */*',
  'accept-language' => 'ru-RU',
  'referer' => 'http://yandex.ru/clck/jsredir?from=yandex.ru%3Bsearch%3Bweb%3B%3B&text=&etext=1506.OpZOkJ-qsyip8wRkOXX_MlQD9gikiAGC0qzH4jQiEwUoumCtQk-KA5EciNegytP_.d8e2b94370a79013c0d1f0a95c9323824677ce26&uuid=&state=_BLhILn4SxNIvvL0W45KSic66uCIg23qh8iRG98qeIXmeppkgUc0YKCJkrjchpDstTwxTkjwGrA&data=UlNrNmk5WktYejR0eWJFYk1LdmtxbkJFREVvdTZEZkhYbFFfMlJ5b0k2YjJEX2dibXJVeklRbnZYY0NJZEtibm5vLXd1Y2l6eHBUV1FGODNJeDVfeDNRemJWdUFnY2tG&b64e=2&sign=3d79aa3e119be268886710f2ef3bfece&keyno=0&cst=AiuY0DBWFJ7IXge4WdYJQe3IrxbPWIv4OFwPKCwJ2OoKelatl_0hFSmf9z0OxdEu6Fx_Si3-aMGfXx890GSE5G7xpo8FO3Cvw6OfGdV5PGTsXNUHmJ7ivjaQb5sM8FbfI2342UAWQRHZ5_68_-sUSqslqCvnu1hn&ref=orjY4mGPRjk5boDnW0uvlrrd71vZw9kp5uQozpMtKCW8_5YQZCwByc726BgEzKTj-7hoqUn5aORt18k9kee-t1o3anfRJHSDnXfO8a3UylS4PxAAnwgRwA&l10n=ru&cts=1502128852664&mc=2.73452952755',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 YaBrowser/17.6.1.744 Yowser/2.5 Safari/537.36',
  'accept-encoding' => 'gzip, deflate',
  'host' => 'hhqblog.com',
  'connection' => 'close',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000307s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000833s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000969s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000504s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000393s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000311s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000330s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000295s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000610s ]

---------------------------------------------------------------
[ 2017-08-08T02:05:42+08:00 ] 172.17.180.47 176.195.179.214 GET /index/index/index.html?page=1
[ log ] hhqblog.com/index/index/index.html?page=1 [运行时间：0.046894s][吞吐率：21.32req/s] [内存消耗：5,644.86kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'index',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'x-requested-with' => 'XMLHttpRequest',
  'referer' => 'http://hhqblog.com/',
  'accept-language' => 'ru-RU',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 YaBrowser/17.6.1.744 Yowser/2.5 Safari/537.36',
  'accept' => 'image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, */*',
  'accept-encoding' => 'gzip, deflate',
  'host' => 'hhqblog.com',
  'connection' => 'close',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000289s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000811s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000582s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000369s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000271s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000701s ]

---------------------------------------------------------------
[ 2017-08-08T02:38:17+08:00 ] 172.17.180.47 5.255.250.29 GET /ar/34.html
[ log ] www.hhqblog.com/ar/34.html [运行时间：0.031739s][吞吐率：31.51req/s] [内存消耗：4,603.70kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-Alive',
  'user-agent' => 'Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)',
  'from' => 'support@search.yandex.ru',
  'accept-encoding' => 'gzip,deflate',
  'accept' => '*/*',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '34',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000297s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000877s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000622s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 34 LIMIT 1 [ RunTime:0.000284s ]

---------------------------------------------------------------
[ 2017-08-08T02:48:41+08:00 ] 172.17.180.47 66.249.79.93 GET /
[ log ] www.hhqblog.com/ [运行时间：0.032178s][吞吐率：31.08req/s] [内存消耗：5,669.64kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000299s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000822s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000610s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000400s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000319s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000723s ]

---------------------------------------------------------------
[ 2017-08-08T02:52:07+08:00 ] 172.17.180.47 66.249.79.95 GET /ar/18.html
[ log ] www.hhqblog.com/ar/18.html [运行时间：0.033492s][吞吐率：29.86req/s] [内存消耗：4,560.63kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '18',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000311s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000864s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000609s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 18 LIMIT 1 [ RunTime:0.000252s ]

---------------------------------------------------------------
[ 2017-08-08T02:52:33+08:00 ] 172.17.180.47 66.249.79.95 GET /ar/21.html
[ log ] www.hhqblog.com/ar/21.html [运行时间：0.029528s][吞吐率：33.87req/s] [内存消耗：4,560.48kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '21',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000292s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000818s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000570s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 21 LIMIT 1 [ RunTime:0.000246s ]

---------------------------------------------------------------
[ 2017-08-08T02:53:05+08:00 ] 172.17.180.47 66.249.79.64 GET /ar/24.html
[ log ] www.hhqblog.com/ar/24.html [运行时间：0.030713s][吞吐率：32.56req/s] [内存消耗：4,559.28kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '24',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000306s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000821s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000614s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 24 LIMIT 1 [ RunTime:0.000247s ]

---------------------------------------------------------------
[ 2017-08-08T02:53:36+08:00 ] 172.17.180.47 66.249.79.93 GET /ar/19.html
[ log ] www.hhqblog.com/ar/19.html [运行时间：0.029213s][吞吐率：34.23req/s] [内存消耗：4,561.66kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '19',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000301s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000828s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000570s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 19 LIMIT 1 [ RunTime:0.000248s ]

---------------------------------------------------------------
[ 2017-08-08T02:54:07+08:00 ] 172.17.180.47 66.249.79.64 GET /ar/22.html
[ log ] www.hhqblog.com/ar/22.html [运行时间：0.029434s][吞吐率：33.97req/s] [内存消耗：4,570.51kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '22',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000325s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000833s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000566s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 22 LIMIT 1 [ RunTime:0.000259s ]

---------------------------------------------------------------
[ 2017-08-08T02:54:39+08:00 ] 172.17.180.47 66.249.79.93 GET /ar/25.html
[ log ] www.hhqblog.com/ar/25.html [运行时间：0.029112s][吞吐率：34.35req/s] [内存消耗：4,562.03kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '25',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000291s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000811s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000574s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 25 LIMIT 1 [ RunTime:0.000258s ]

---------------------------------------------------------------
[ 2017-08-08T02:55:12+08:00 ] 172.17.180.47 66.249.79.64 GET /ar/23.html
[ log ] www.hhqblog.com/ar/23.html [运行时间：0.029483s][吞吐率：33.92req/s] [内存消耗：4,581.64kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '23',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000305s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000813s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000582s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 23 LIMIT 1 [ RunTime:0.000250s ]

---------------------------------------------------------------
[ 2017-08-08T02:55:50+08:00 ] 172.17.180.47 66.249.79.95 GET /ar/27.html
[ log ] www.hhqblog.com/ar/27.html [运行时间：0.030190s][吞吐率：33.12req/s] [内存消耗：4,561.22kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-alive',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'from' => 'googlebot(at)googlebot.com',
  'user-agent' => 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
  'accept-encoding' => 'gzip,deflate,br',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '27',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000291s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000854s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000590s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 27 LIMIT 1 [ RunTime:0.000255s ]

---------------------------------------------------------------
[ 2017-08-08T05:22:35+08:00 ] 172.17.180.47 220.181.108.160 GET /
[ log ] www.hhqblog.com/ [运行时间：0.037002s][吞吐率：27.03req/s] [内存消耗：5,616.91kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'close',
  'user-agent' => 'Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)',
  'accept-language' => 'zh-cn,zh-tw',
  'if-none-match' => '"@NULL@"',
  'accept-encoding' => 'gzip',
  'accept' => '*/*',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000304s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000831s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000960s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000509s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000360s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000290s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000347s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000259s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000586s ]

---------------------------------------------------------------
[ 2017-08-08T05:22:47+08:00 ] 172.17.180.47 111.206.221.69 GET /index/index/index.html?page=1
[ log ] www.hhqblog.com/index/index/index.html?page=1 [运行时间：0.041716s][吞吐率：23.97req/s] [内存消耗：5,645.43kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'index',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)',
  'proxy-connection' => 'keep-alive',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'x-devtools-emulate-network-conditions-client-id' => 'f696306b-9c46-4c38-8b22-3f70fe904d73',
  'x-requested-with' => 'XMLHttpRequest',
  'accept-language' => 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',
  'resource-type' => '13',
  'referer' => 'http://www.hhqblog.com/',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000285s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000799s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000590s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000357s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000272s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000716s ]

---------------------------------------------------------------
[ 2017-08-08T05:25:41+08:00 ] 172.17.180.47 123.14.127.89 GET /
[ log ] www.hhqblog.com/ [运行时间：0.032406s][吞吐率：30.86req/s] [内存消耗：5,669.84kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'accept-encoding' => 'gzip,deflate,sdch',
  'accept' => '*/*',
  'user-agent' => 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1',
  'accept-charset' => 'GB2312,utf-8;q=0.7,*;q=0.7',
  'connection' => 'keep-alive',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000300s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000821s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000587s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000358s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000278s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000730s ]

---------------------------------------------------------------
[ 2017-08-08T07:23:39+08:00 ] 172.17.180.47 106.11.153.67 GET /misc/contact/
[ log ] www.hhqblog.com/misc/contact/ [运行时间：0.013817s][吞吐率：72.38req/s] [内存消耗：1,586.72kb] [文件加载：37]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'misc',
    1 => 'contact',
    2 => 'index.php',
  ),
)
[ info ] [ HEADER ] array (
  'accept-language' => 'zh-cn,en-us,zh-tw,en-gb,en;',
  'host' => 'www.hhqblog.com',
  'accept-encoding' => 'gzip',
  'accept' => '*/*',
  'connection' => 'Keep-Alive',
  'user-agent' => 'YisouSpider',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File

---------------------------------------------------------------
[ 2017-08-08T08:22:28+08:00 ] 172.17.180.47 42.156.251.187 GET /
[ log ] HHQBLOG.COM/ [运行时间：0.038166s][吞吐率：26.20req/s] [内存消耗：5,616.95kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'user-agent' => 'spiderman',
  'accept-language' => 'en-us,en-gb,en;q=0.7,*;q=0.3',
  'accept-charset' => 'utf-8,ISO-8859-1;q=0.7,*;q=0.7',
  'accept' => 'text/html,application/xml;q=0.9,application/xhtml+xml,text/xml;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5',
  'accept-encoding' => 'x-gzip, gzip, deflate',
  'host' => 'HHQBLOG.COM',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000290s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000866s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.001111s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000554s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000439s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000338s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000321s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000303s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000700s ]

---------------------------------------------------------------
[ 2017-08-08T09:01:06+08:00 ] 172.17.180.47 202.108.211.56 GET /
[ log ] www.hhqblog.com/ [运行时间：0.032584s][吞吐率：30.69req/s] [内存消耗：5,670.03kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'user-agent' => 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.21 (KHTML, like Gecko) Chrome/19.0.1042.0 Safari/535.21',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate, sdch',
  'accept-language' => 'zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'upgrade-insecure-requests' => '1',
  'host' => 'www.hhqblog.com',
  'connection' => 'keep-alive',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000336s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000819s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000586s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000363s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000278s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000725s ]

---------------------------------------------------------------
[ 2017-08-08T09:14:40+08:00 ] 172.17.180.47 220.181.108.168 GET /
[ log ] www.hhqblog.com/ [运行时间：0.033671s][吞吐率：29.70req/s] [内存消耗：5,669.67kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'close',
  'user-agent' => 'Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)',
  'accept-language' => 'zh-cn,zh-tw',
  'if-none-match' => '"@NULL@"',
  'accept-encoding' => 'gzip',
  'accept' => '*/*',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000308s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000863s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000751s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000387s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000299s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000777s ]

---------------------------------------------------------------
[ 2017-08-08T09:14:55+08:00 ] 172.17.180.47 111.206.221.31 GET /index/index/index.html?page=1
[ log ] www.hhqblog.com/index/index/index.html?page=1 [运行时间：0.054447s][吞吐率：18.37req/s] [内存消耗：5,645.43kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'index',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)',
  'proxy-connection' => 'keep-alive',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'x-devtools-emulate-network-conditions-client-id' => '5036c91a-af0b-4c72-a239-a7849f51f051',
  'x-requested-with' => 'XMLHttpRequest',
  'accept-language' => 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',
  'resource-type' => '13',
  'referer' => 'http://www.hhqblog.com/',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000314s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000834s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000588s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000398s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000371s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000815s ]

---------------------------------------------------------------
[ 2017-08-08T10:11:44+08:00 ] 172.17.180.47 163.172.4.153 GET /
[ log ] hhqblog.com/ [运行时间：0.037828s][吞吐率：26.44req/s] [内存消耗：5,616.87kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0',
  'connection' => 'Te',
  'accept' => 'text/html',
  'te' => 'trailers',
  'accept-language' => 'en-US;q=0.8, en;q=0.6',
  'accept-encoding' => 'gzip, deflate',
  'host' => 'hhqblog.com',
  'referer' => 'http://hhqblog.com/',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000321s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000841s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.001045s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000578s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000416s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000321s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000344s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000356s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000747s ]

---------------------------------------------------------------
[ 2017-08-08T10:51:52+08:00 ] 172.17.180.47 117.71.34.139 GET /
[ log ] hhqblog.com/ [运行时间：0.031889s][吞吐率：31.36req/s] [内存消耗：5,669.27kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.1.4322)',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'accept-language' => 'zh-cn,zh;q=0.5',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000331s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000829s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000602s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000394s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000271s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000827s ]

---------------------------------------------------------------
[ 2017-08-08T11:02:47+08:00 ] 172.17.180.47 106.120.173.73 GET /ar/32
[ log ] www.hhqblog.com/ar/32 [运行时间：0.043831s][吞吐率：22.81req/s] [内存消耗：4,579.34kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'accept' => '*/*',
  'accept-language' => 'zh-cn',
  'accept-encoding' => 'gzip,deflate',
  'user-agent' => 'Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)',
  'connection' => 'close',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '32',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000454s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.001226s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000825s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 32 LIMIT 1 [ RunTime:0.000384s ]

---------------------------------------------------------------
[ 2017-08-08T11:06:07+08:00 ] 172.17.180.47 36.110.147.65 GET /ar/32
[ log ] www.hhqblog.com/ar/32 [运行时间：0.029353s][吞吐率：34.07req/s] [内存消耗：4,579.37kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'accept-language' => 'zh-cn',
  'accept-encoding' => 'gzip,deflate',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'user-agent' => 'Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '32',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000294s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000801s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000558s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 32 LIMIT 1 [ RunTime:0.000253s ]

---------------------------------------------------------------
[ 2017-08-08T11:37:39+08:00 ] 172.17.180.47 106.11.153.67 GET /ar/31.html
[ log ] hhqblog.com/ar/31.html [运行时间：0.033725s][吞吐率：29.65req/s] [内存消耗：4,520.46kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'accept-language' => 'zh-cn,en-us,zh-tw,en-gb,en;',
  'host' => 'hhqblog.com',
  'accept-encoding' => 'gzip',
  'accept' => '*/*',
  'connection' => 'Keep-Alive',
  'user-agent' => 'YisouSpider',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '31',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000312s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000836s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000975s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000490s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000395s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 31 LIMIT 1 [ RunTime:0.000227s ]

---------------------------------------------------------------
[ 2017-08-08T12:29:26+08:00 ] 172.17.180.47 52.43.158.57 GET /
[ log ] hhqblog.com/ [运行时间：0.032519s][吞吐率：30.75req/s] [内存消耗：5,658.45kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'user-agent' => 'Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko',
  'accept-language' => 'en-US,en,*;q=0.5',
  'host' => 'hhqblog.com',
  'accept-encoding' => 'gzip, deflate',
  'connection' => 'Close',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000326s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000817s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000587s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000357s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000313s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000271s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000700s ]

---------------------------------------------------------------
[ 2017-08-08T12:39:27+08:00 ] 172.17.180.47 180.76.15.29 GET /ar/32
[ log ] www.hhqblog.com/ar/32 [运行时间：0.033046s][吞吐率：30.26req/s] [内存消耗：4,539.18kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'close',
  'user-agent' => 'Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)',
  'accept-encoding' => 'gzip',
  'accept-language' => 'en-US',
  'accept' => '*/*',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '32',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000299s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000825s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000987s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000545s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000369s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 32 LIMIT 1 [ RunTime:0.000231s ]

---------------------------------------------------------------
[ 2017-08-08T13:50:34+08:00 ] 172.17.180.47 5.255.250.29 GET /
[ log ] www.hhqblog.com/ [运行时间：0.037249s][吞吐率：26.85req/s] [内存消耗：5,617.14kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'Keep-Alive',
  'user-agent' => 'Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)',
  'from' => 'support@search.yandex.ru',
  'accept-encoding' => 'gzip,deflate',
  'accept' => '*/*',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000329s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000824s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000993s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000524s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000380s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000300s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000313s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000288s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000715s ]

---------------------------------------------------------------
[ 2017-08-08T14:04:42+08:00 ] 172.17.180.47 123.233.116.122 GET /
[ log ] hhqblog.com/ [运行时间：0.032289s][吞吐率：30.97req/s] [内存消耗：5,669.92kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.5.1502094785.1502094785.',
  'proxy-connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000320s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000861s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000620s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000358s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000303s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000739s ]

---------------------------------------------------------------
[ 2017-08-08T14:04:42+08:00 ] 172.17.180.47 123.233.116.122 GET /index/index/index.html?page=1
[ log ] hhqblog.com/index/index/index.html?page=1 [运行时间：0.051183s][吞吐率：19.54req/s] [内存消耗：5,645.38kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'index',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.5.1502094785.1502094785.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000331s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000844s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000616s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000422s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000320s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000853s ]

---------------------------------------------------------------
[ 2017-08-08T14:05:12+08:00 ] 172.17.180.47 123.233.116.122 GET /admin
[ log ] hhqblog.com/admin [运行时间：0.015275s][吞吐率：65.47req/s] [内存消耗：1,978.41kb] [文件加载：44]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Index->index[ /yjdata/www/hhqblog/application/admin/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/public/index.html [ array (
) ]
[ info ] [ LOG ] INIT File

---------------------------------------------------------------
[ 2017-08-08T14:05:12+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/index/main.html
[ log ] hhqblog.com/admin/index/main.html [运行时间：0.015162s][吞吐率：65.95req/s] [内存消耗：1,900.87kb] [文件加载：43]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'index',
    2 => 'main',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Index->main[ /yjdata/www/hhqblog/application/admin/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/index/index.html [ array (
  0 => 'info',
) ]
[ info ] [ LOG ] INIT File

---------------------------------------------------------------
[ 2017-08-08T14:05:17+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.064709s][吞吐率：15.45req/s] [内存消耗：3,818.24kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000335s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000820s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000170s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000971s ]

---------------------------------------------------------------
[ 2017-08-08T14:05:17+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.049558s][吞吐率：20.18req/s] [内存消耗：3,749.52kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000316s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000881s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000158s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000879s ]

---------------------------------------------------------------
[ 2017-08-08T14:05:33+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.024364s][吞吐率：41.04req/s] [内存消耗：2,986.92kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000312s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000776s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000190s ]

---------------------------------------------------------------
[ 2017-08-08T14:08:11+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：1.339187s][吞吐率：0.75req/s] [内存消耗：3,842.21kb] [文件加载：61]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '330171',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundary5scTjkeWvFGMn8WI',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => 'Linux服务器集群系统各概念辨析',
  'cate_id' => '27',
  'type' => '0',
  'keyword' => 'Linux,服务器集群,集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算',
  'remark' => '集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。',
  'content' => '<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">造成菜鸟们困惑的原因，主要是广义和狭义，以及目的和客观作用 两个方面。<br style="box-sizing: border-box;"/>所以，太深的概念不必深究，也没有必要吹毛求疵。纯概念化的东西毫无意义，更重要的是它的使用场景，当然，概念在一定程度上本身就是说明了它的使用场景。所有这些概念都是为了解决生产环境的实际问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">那么，我们实际生产环境中都有什么问题呢？</p><ol style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">当数据库性能遇到问题时，是否能够横向扩展，通过添加服务器的方式达到更高的吞吐量，从而充分利用现有的硬件实现更好的投资回报率。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">是否拥有实时同步的副本，当数据库面临灾难时，可以短时间内通过故障转移的方式保证数据库的可用性。此外，当数据丢失或损坏时，能否通过所谓的实时副本（热备）实现数据的零损失。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据库的横向扩展是否对应用程序透明，如果数据库的横向扩展需要应用程序端进行大量修改，则所带来的后果不仅仅是高昂的开发成本，同时也会带来很多潜在和非潜在的风险。</p></li></ol><h2 id="articleHeader0" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">集群和冗余的区别？</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">这两个概念并不是对立关系， 多台服务器做集群（不是主从），本身就有冗余和负载均衡的效果。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">狭义上来说，集群就是把多台服务器虚拟成一台服务器，而冗余的每台服务器都是独立的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">**集群的侧重点在于协同，多台服务器协同分担工作，提升效率。<br style="box-sizing: border-box;"/>冗余的侧重点在于防止单点故障，一主多备的架构，也就是“主从复制”。所以<strong style="box-sizing: border-box;">数据冗余=高可用集群=主从</strong>。**</p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">主从一定程度上起到了负载均衡的作用。但其实主要目的还是为了保证数据冗余和高可用性。<br style="box-sizing: border-box;"/>主从只提供一种成本较低的数据备份方案加上不完美的灾备和负载均衡。由于复制存在时间差，不能同步读，所以只是不完善的负载均衡和有损灾备。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">主从显然达不到集群的严格度，不论是HA 还AA（多活并行集群），主从都达不到数据一致性的集群要求，<br style="box-sizing: border-box;"/>主从很难严格界定是那种模式,可以归类为：有一定冗余度的非一致性异步副本（不可靠不同步），对于没有严格一致性要求的系统，可以定制为分担负载、查询过时报表的一种措施。</p></blockquote><h2 id="articleHeader1" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">集群</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">还是上面提到的，所谓集群，简单来说就是“多台服务器协同分担工作”，重点在“协同”上。所以，任务调度是集群的核心技术，因为集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。</p><h3 id="articleHeader2" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">所谓的负载均衡，高可用，高性能又是什么呢？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">集群有负载均衡集群，高可用集群，高性能集群，分别侧重于抗并发，避免单点故障和大数据下的并行处理。</strong>三者也有不同的实现方法，但同时这三者又是相辅相成的。</p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">Load Balance负载均衡着重在于提供服务并发处理能力的集群。是为了消除性能瓶颈，当然也可以起到备份工作。<strong style="box-sizing: border-box;">把负载压力根据某种算法合理分配到集群中的每一台计算机上，以减轻主服务器的压力，降低对主服务器的硬件和软件要求。</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">实现原理：一个负载均衡器加上一个集群实现的。负载均衡集群中有一个分发器或者叫调度器，我们将其称之为Director，它处在多台服务器的上面，分发器根据内部锁定义的规则或调度方式从下面的服务器群中选择一个以此来响应客户端发送的请求。分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p></blockquote><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">High Available高可用以提升服务在线的能力的集群。<br style="box-sizing: border-box;"/>高可用集群主要是为了避免单点故障存在的,备机平时不参与工作。高可用集群是服务的可用性比较高，当我们某台服务器死机后不会造成我们的服务不可用。其工作模式则是将一个具有故障的服务转交给一个正常工作的服务器，从而达到服务不会中断。一般来说我们集群中工作在前端（分发器）的服务器都会对我们的后端服务器做一个健康检查，如果发现我们服务器当机就不会对其在做转发。<br style="box-sizing: border-box;"/>衡量标准：可用性=在线时间/(在线时间+故障处理时间)<br style="box-sizing: border-box;"/>高可用性群集，是保证业务连续性的有效解决方案，一般有两个或两个以上的节点，且分为活动节点及备用节点。通常把正在执行业务的称为活动节点，而作为活动节点的一个备份的则称为备用节点。当活动节点出现问题，导致正在运行的业务（任务）不能正常运行时，备用节点此时就会侦测到，并立即接续活动节点来执行业务。从而实现业务的不中断或短暂中断。<br style="box-sizing: border-box;"/>实现原理：<strong style="box-sizing: border-box;">利用集群管理软件，当主机故障时，备机能够自动接管主机的工作，并及时切换过去，以实现对用户的不间断服务。</strong></p></blockquote><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">High Performance高性能着重用于处理一个海量任务。高性能的集群是当某一个任务量非常大的时候，我们做一个集群共同来完成这一个任务，所以又被称为“并行处理集群”。<strong style="box-sizing: border-box;">充分利用集群中的每一台计算机的资源，实现复杂运算的并行处理，通常用于科学计算领域，比如基因分 析，化学分析等。</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">实现原理：并行处理集群是将大任务划分为小任务，分别进行处理的机制。一般这样的集群用来科学研究与大数据运算等方面的工作。现在比较火的Hadoop就是使用的并行处理集群。</p></blockquote><h3 id="articleHeader3" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">高可用和负载均衡有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">HA和LB确实不是一个概念。解决方案的侧重点完全不同。HA偏重于备用资源，切机时会有业务的断开的，保证了数据的安全，但造成资源的浪费。LB侧重于资源的充分应用，没有主备的概念，只有资源的最大限度的加权平均应用，基本不会业务的中断。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">从目的上来说：HA的目的是不中断服务，LB的目的是为了提高接入能力，虽然经常放一起用，但确实是两个不同的领域。从功能上来说：HA在一条路不通的时候提供另一条路可走;LB是春运时的多个窗口。通俗来说HA其实就是春运一共有八个窗口售票，但是大家就都集中到一号窗口，一号窗口累趴下了后，大家一起去二号，二号不行去三号，这样就造成了闲置资源的一种浪费，但是LB就相当于八个窗口同时开放，均衡负载，不会使一个窗口(服务器)的压力过大。LB通常采用在负载比较重的网络服务中。一些比较大型的网站和邮件服务，并发量比较大的情况。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">HA和LB是两个概念的问题，一般来说没有谁优谁劣的标准，只有在特定的环境下，谁更适合的问题。 表面看LB一般都包含了高可用性，比HA功能更强，性能更好，但这只是概念上的“先进”,实际中很多场合HA是优选。 至于什么是“好用”,还是那句话，不好说，要看具体环境、应用和价格，没有绝对的好。</p><h3 id="articleHeader4" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">向上拓展和向外拓展（单机和多机）</h3><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">向上拓展：升级单台服务器的硬件。<br style="box-sizing: border-box;"/>缺点是在一定的范围之内它的性能是上升的趋势,但是超出范围之后就是下降的趋势。因为随着它的cpu的个数增加我们需要给我们的cpu仲裁，而且随着cpu个数的增加资源竞争性越大。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">向外拓展：增加新的服务器。 优点是增减服务器很方便，而且没有向上扩展随着增加性能下降。</p></blockquote><h3 id="articleHeader5" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">集群管理工具</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Docker的Swarm, Fleet, 谷歌的Kubernetes, apache的Mesos<br style="box-sizing: border-box;"/><a href="http://www.sohu.com/a/74693243_183588" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.sohu.com/a/7469324...</a></p><h2 id="articleHeader6" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">负载均衡</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">所谓负载均衡，简单点来说就是“把大访问量分发给不同的服务器”，也就是分流请求。</p><h3 id="articleHeader7" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">六种实现负载均衡的方法？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">LVS集群中实现的三种IP负载均衡技术</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://blog.csdn.net/mengdonghui123456/article/details/53981976" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/mengdong...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/asd141747/article/details/42641319" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/asd14174...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/asqi1/article/details/41478111" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/asqi1/ar...</a></p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">http重定向协议实现负载均衡（HTTP重定向就是应用层的请求转发。用户的请求其实已经到了HTTP重定向负载均衡服务器，服务器根据算法要求用户重定向，用户收到重定向请求后，再次请求真正的集群）<br style="box-sizing: border-box;"/>优点：简单。<br style="box-sizing: border-box;"/>缺点：性能较差。<br style="box-sizing: border-box;"/>　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">dns域名解析负载均衡（DNS域名解析负载均衡就是在用户请求DNS服务器，获取域名对应的IP地址时，DNS服务器直接给出负载均衡后的服务器IP。）<br style="box-sizing: border-box;"/>优点：交给DNS，不用我们去维护负载均衡服务器。<br style="box-sizing: border-box;"/>缺点：当一个应用服务器挂了，不能及时通知DNS，而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和更强大的管理。<br style="box-sizing: border-box;"/>　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">反向代理负载均衡（在用户的请求到达反向代理服务器时（已经到达网站机房），由反向代理服务器根据算法转发到具体的服务器。常用的apache，nginx都可以充当反向代理服务器。）<br style="box-sizing: border-box;"/>优点：部署简单。<br style="box-sizing: border-box;"/>缺点：代理服务器可能成为性能的瓶颈，特别是一次上传大文件。</p></blockquote><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">　　　　　　</p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">IP负载均衡（LVS-NAT，在请求到达负载均衡器后，负载均衡器通过修改请求的目的IP地址，从而实现请求的转发，做到负载均衡。）<br style="box-sizing: border-box;"/>优点：性能更好。<br style="box-sizing: border-box;"/>缺点：负载均衡器的宽带成为瓶颈。　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">直接路由负载均衡（LVS-DR，数据链路层负载均衡（在请求到达负载均衡器后，负载均衡器通过修改请求的mac地址，从而做到负载均衡，与IP负载均衡不一样的是，当请求访问完服务器之后，直接返回客户。而无需再经过负载均衡器。 ））</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">IP隧道负载均衡（LVS-TUN, ）</p></blockquote><h3 id="articleHeader8" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">LVS集群中的IP负载均衡技术</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.linuxvirtualserver.org/zh/lvs3.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxvirtualserver...</a><br style="box-sizing: border-box;"/><a href="http://www.cnblogs.com/qq78292959/archive/2012/05/31/2528524.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/qq7829...</a><br style="box-sizing: border-box;"/><a href="http://www.linuxidc.com/Linux/2015-01/112560.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxidc.com/Linux...</a></p><h3 id="articleHeader9" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">负载均衡和反向代理有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">做了反向代理才能实现负载均衡。负载均衡是做反向代理的目的之一。<br style="box-sizing: border-box;"/><a href="https://www.zhihu.com/question/20553431" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://www.zhihu.com/questio...</a></p><h3 id="articleHeader10" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">nginx负载均衡分发请求的几种方式？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">5种<br style="box-sizing: border-box;"/><a href="http://blog.jobbole.com/109320/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.jobbole.com/109320/</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">默认的轮询<br style="box-sizing: border-box;"/>指定权重<br style="box-sizing: border-box;"/>IP绑定IP_hash（每个请求按访问IP的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题）<br style="box-sizing: border-box;"/>第三方的fair和url_hash两种方法</p><h2 id="articleHeader11" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">主从复制</h2><h3 id="articleHeader12" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">主从复制的作用？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">主从是一种用于数据容错和灾备的高可用解决方案，而不是一种处理高并发压力的解决方案（负载均衡是用来抗并发的）。这是一个客观作用和目的的问题。</p><ol style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">主机负责查询，从机负责增删改。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">可以在从机上执行备份，以避免备份期间影响主机的服务。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">主从复制之后，也可以在从机上查询，以降低主机的访问压力。<br style="box-sizing: border-box;"/>但是，只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，实时性要求高的数据仍需从服务器查询。（因为主从复制有同步延迟，所以不能够保证强数据一致性）</p></li></ol><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.cnblogs.com/Aiapple/p/5792939.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/Aiappl...</a></p><h3 id="articleHeader13" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">主从复制和读写分离的区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">主从复制是实现读写分离的技术之一，也是实现读写分离的前提条件。<br style="box-sizing: border-box;"/>做读写分离时最重要的就是确保读库和写库的数据统一，而主从复制是实现数据统一最简单的方法（并不能够保证强数据一致性）。<br style="box-sizing: border-box;"/>读写分离，顾名思义，就是一个表只负责向前台页面展示数据，而后台管理人员对表的增删改查在另一个表中，把两个表分开，就是读写分离。<br style="box-sizing: border-box;"/>主从复制则是一个表数据增删改之后会即时更新到另一个表中，保证两个表的数据一致。</p><h3 id="articleHeader14" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">实现主从复制的方法？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="https://segmentfault.com/a/1190000009922696" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://segmentfault.com/a/11...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/hguisu/article/details/7325124/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/hguisu/a...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/forever_young_/article/details/50904268" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/forever_...</a></p><h3 id="articleHeader15" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">如何减少主从复制的同步延迟？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">深入解析Mysql 主从同步延迟原理及解决方案<a href="http://www.cnblogs.com/cnmenglang/p/6393769.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/cnmeng...</a><br style="box-sizing: border-box;"/>MySQL主从数据库同步延迟问题解决<a href="http://www.linuxidc.com/Linux/2014-05/101450.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxidc.com/Linux...</a></p><h3 id="articleHeader16" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">主从复制侧重点不同的几种变形？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://blog.csdn.net/herry2008/article/details/1916258" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/herry200...</a><br style="box-sizing: border-box;"/><a href="http://www.sinoxs.com/htm/2011815/1189.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.sinoxs.com/htm/201...</a><br style="box-sizing: border-box;"/><a href="http://baike.baidu.com/link?url=43g_HldN2au5ir-Htx2JIe2xN2oN2x3DHgjtX1NHsfxjxKm1dM73qcxsagKKTJEG8CXEQZkNdcdJk41UbceBGcbEeaxRa7vWyqJHP57q_Y2e4vvE9GaE7Ept6piLIqtoqN2tyyWcoUEzNR0hNjgRLK" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://baike.baidu.com/link?u...</a><br style="box-sizing: border-box;"/><a href="https://www.baidu.com/baidu?wd=%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87&tn=monline_4_dg&ie=utf-8" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://www.baidu.com/baidu?w...</a><br style="box-sizing: border-box;"/><a href="http://aaronsa.blog.51cto.com/5157083/1741485/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://aaronsa.blog.51cto.com...</a><br style="box-sizing: border-box;"/>双机热备，双机互备，双机双工</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">双机热备（主从复制）：主机+备机，<br style="box-sizing: border-box;"/>双机互备：主机（备机）+备机（主机），互为主备<br style="box-sizing: border-box;"/>双机双工：主机+主机，两台机器同时运行。</p><h2 id="articleHeader17" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">分布式</h2><h3 id="articleHeader18" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">什么是分布式计算？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://blog.csdn.net/u010926964/article/details/50955139" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/u0109269...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/u010926964/article/details/50985368" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/u0109269...</a></p><h3 id="articleHeader19" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">分布式和集群有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="https://my.oschina.net/u/1246814/blog/267522" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://my.oschina.net/u/1246...</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">广义上的分布式是指===》将不同的服务分布在不同的服务器上，<br style="box-sizing: border-box;"/>而集群指的是===》将几台服务器集中在一起，实现同一业务。<br style="box-sizing: border-box;"/>分布式中的每一个节点，都可以做集群。<br style="box-sizing: border-box;"/>而集群并不一定是分布式的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">举例：就比如新浪网，访问的人多了，他可以做一个群集，前面放一个响应服务器，后面几台服务器完成同一业务，如果有业务访问的时候，响应服务器看哪台服务器的负载不是很重，就将给哪一台去完成。<br style="box-sizing: border-box;"/>而分布式，从窄意上理解，也跟集群差不多，但是它的组织比较松散，不像集群，有一个组织性，一台服务器垮了，其它的服务器可以顶上来。<br style="box-sizing: border-box;"/>分布式的每一个节点，都完成不同的业务，一个节点垮了，哪这个业务就不可访问了。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000319s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000885s ]
[ sql ] [ SQL ] INSERT INTO `think_article` (`title` , `cate_id` , `type` , `keyword` , `remark` , `content` , `is_tui` , `status` , `views` , `auth` , `photo` , `ip` , `update_time` , `create_time`) VALUES ('Linux服务器集群系统各概念辨析' , 27 , 0 , 'Linux,服务器集群,集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算' , '集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。' , '<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">造成菜鸟们困惑的原因，主要是广义和狭义，以及目的和客观作用 两个方面。<br style=\"box-sizing: border-box;\"/>所以，太深的概念不必深究，也没有必要吹毛求疵。纯概念化的东西毫无意义，更重要的是它的使用场景，当然，概念在一定程度上本身就是说明了它的使用场景。所有这些概念都是为了解决生产环境的实际问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">那么，我们实际生产环境中都有什么问题呢？</p><ol style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">当数据库性能遇到问题时，是否能够横向扩展，通过添加服务器的方式达到更高的吞吐量，从而充分利用现有的硬件实现更好的投资回报率。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">是否拥有实时同步的副本，当数据库面临灾难时，可以短时间内通过故障转移的方式保证数据库的可用性。此外，当数据丢失或损坏时，能否通过所谓的实时副本（热备）实现数据的零损失。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据库的横向扩展是否对应用程序透明，如果数据库的横向扩展需要应用程序端进行大量修改，则所带来的后果不仅仅是高昂的开发成本，同时也会带来很多潜在和非潜在的风险。</p></li></ol><h2 id=\"articleHeader0\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">集群和冗余的区别？</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这两个概念并不是对立关系， 多台服务器做集群（不是主从），本身就有冗余和负载均衡的效果。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">狭义上来说，集群就是把多台服务器虚拟成一台服务器，而冗余的每台服务器都是独立的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">**集群的侧重点在于协同，多台服务器协同分担工作，提升效率。<br style=\"box-sizing: border-box;\"/>冗余的侧重点在于防止单点故障，一主多备的架构，也就是“主从复制”。所以<strong style=\"box-sizing: border-box;\">数据冗余=高可用集群=主从</strong>。**</p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">主从一定程度上起到了负载均衡的作用。但其实主要目的还是为了保证数据冗余和高可用性。<br style=\"box-sizing: border-box;\"/>主从只提供一种成本较低的数据备份方案加上不完美的灾备和负载均衡。由于复制存在时间差，不能同步读，所以只是不完善的负载均衡和有损灾备。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">主从显然达不到集群的严格度，不论是HA 还AA（多活并行集群），主从都达不到数据一致性的集群要求，<br style=\"box-sizing: border-box;\"/>主从很难严格界定是那种模式,可以归类为：有一定冗余度的非一致性异步副本（不可靠不同步），对于没有严格一致性要求的系统，可以定制为分担负载、查询过时报表的一种措施。</p></blockquote><h2 id=\"articleHeader1\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">集群</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">还是上面提到的，所谓集群，简单来说就是“多台服务器协同分担工作”，重点在“协同”上。所以，任务调度是集群的核心技术，因为集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。</p><h3 id=\"articleHeader2\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">所谓的负载均衡，高可用，高性能又是什么呢？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">集群有负载均衡集群，高可用集群，高性能集群，分别侧重于抗并发，避免单点故障和大数据下的并行处理。</strong>三者也有不同的实现方法，但同时这三者又是相辅相成的。</p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">Load Balance负载均衡着重在于提供服务并发处理能力的集群。是为了消除性能瓶颈，当然也可以起到备份工作。<strong style=\"box-sizing: border-box;\">把负载压力根据某种算法合理分配到集群中的每一台计算机上，以减轻主服务器的压力，降低对主服务器的硬件和软件要求。</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">实现原理：一个负载均衡器加上一个集群实现的。负载均衡集群中有一个分发器或者叫调度器，我们将其称之为Director，它处在多台服务器的上面，分发器根据内部锁定义的规则或调度方式从下面的服务器群中选择一个以此来响应客户端发送的请求。分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p></blockquote><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">High Available高可用以提升服务在线的能力的集群。<br style=\"box-sizing: border-box;\"/>高可用集群主要是为了避免单点故障存在的,备机平时不参与工作。高可用集群是服务的可用性比较高，当我们某台服务器死机后不会造成我们的服务不可用。其工作模式则是将一个具有故障的服务转交给一个正常工作的服务器，从而达到服务不会中断。一般来说我们集群中工作在前端（分发器）的服务器都会对我们的后端服务器做一个健康检查，如果发现我们服务器当机就不会对其在做转发。<br style=\"box-sizing: border-box;\"/>衡量标准：可用性=在线时间/(在线时间+故障处理时间)<br style=\"box-sizing: border-box;\"/>高可用性群集，是保证业务连续性的有效解决方案，一般有两个或两个以上的节点，且分为活动节点及备用节点。通常把正在执行业务的称为活动节点，而作为活动节点的一个备份的则称为备用节点。当活动节点出现问题，导致正在运行的业务（任务）不能正常运行时，备用节点此时就会侦测到，并立即接续活动节点来执行业务。从而实现业务的不中断或短暂中断。<br style=\"box-sizing: border-box;\"/>实现原理：<strong style=\"box-sizing: border-box;\">利用集群管理软件，当主机故障时，备机能够自动接管主机的工作，并及时切换过去，以实现对用户的不间断服务。</strong></p></blockquote><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">High Performance高性能着重用于处理一个海量任务。高性能的集群是当某一个任务量非常大的时候，我们做一个集群共同来完成这一个任务，所以又被称为“并行处理集群”。<strong style=\"box-sizing: border-box;\">充分利用集群中的每一台计算机的资源，实现复杂运算的并行处理，通常用于科学计算领域，比如基因分 析，化学分析等。</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">实现原理：并行处理集群是将大任务划分为小任务，分别进行处理的机制。一般这样的集群用来科学研究与大数据运算等方面的工作。现在比较火的Hadoop就是使用的并行处理集群。</p></blockquote><h3 id=\"articleHeader3\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">高可用和负载均衡有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">HA和LB确实不是一个概念。解决方案的侧重点完全不同。HA偏重于备用资源，切机时会有业务的断开的，保证了数据的安全，但造成资源的浪费。LB侧重于资源的充分应用，没有主备的概念，只有资源的最大限度的加权平均应用，基本不会业务的中断。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">从目的上来说：HA的目的是不中断服务，LB的目的是为了提高接入能力，虽然经常放一起用，但确实是两个不同的领域。从功能上来说：HA在一条路不通的时候提供另一条路可走;LB是春运时的多个窗口。通俗来说HA其实就是春运一共有八个窗口售票，但是大家就都集中到一号窗口，一号窗口累趴下了后，大家一起去二号，二号不行去三号，这样就造成了闲置资源的一种浪费，但是LB就相当于八个窗口同时开放，均衡负载，不会使一个窗口(服务器)的压力过大。LB通常采用在负载比较重的网络服务中。一些比较大型的网站和邮件服务，并发量比较大的情况。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">HA和LB是两个概念的问题，一般来说没有谁优谁劣的标准，只有在特定的环境下，谁更适合的问题。 表面看LB一般都包含了高可用性，比HA功能更强，性能更好，但这只是概念上的“先进”,实际中很多场合HA是优选。 至于什么是“好用”,还是那句话，不好说，要看具体环境、应用和价格，没有绝对的好。</p><h3 id=\"articleHeader4\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">向上拓展和向外拓展（单机和多机）</h3><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">向上拓展：升级单台服务器的硬件。<br style=\"box-sizing: border-box;\"/>缺点是在一定的范围之内它的性能是上升的趋势,但是超出范围之后就是下降的趋势。因为随着它的cpu的个数增加我们需要给我们的cpu仲裁，而且随着cpu个数的增加资源竞争性越大。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">向外拓展：增加新的服务器。 优点是增减服务器很方便，而且没有向上扩展随着增加性能下降。</p></blockquote><h3 id=\"articleHeader5\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">集群管理工具</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Docker的Swarm, Fleet, 谷歌的Kubernetes, apache的Mesos<br style=\"box-sizing: border-box;\"/><a href=\"http://www.sohu.com/a/74693243_183588\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.sohu.com/a/7469324...</a></p><h2 id=\"articleHeader6\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">负载均衡</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">所谓负载均衡，简单点来说就是“把大访问量分发给不同的服务器”，也就是分流请求。</p><h3 id=\"articleHeader7\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">六种实现负载均衡的方法？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">LVS集群中实现的三种IP负载均衡技术</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://blog.csdn.net/mengdonghui123456/article/details/53981976\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/mengdong...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/asd141747/article/details/42641319\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/asd14174...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/asqi1/article/details/41478111\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/asqi1/ar...</a></p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">http重定向协议实现负载均衡（HTTP重定向就是应用层的请求转发。用户的请求其实已经到了HTTP重定向负载均衡服务器，服务器根据算法要求用户重定向，用户收到重定向请求后，再次请求真正的集群）<br style=\"box-sizing: border-box;\"/>优点：简单。<br style=\"box-sizing: border-box;\"/>缺点：性能较差。<br style=\"box-sizing: border-box;\"/>　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;\">dns域名解析负载均衡（DNS域名解析负载均衡就是在用户请求DNS服务器，获取域名对应的IP地址时，DNS服务器直接给出负载均衡后的服务器IP。）<br style=\"box-sizing: border-box;\"/>优点：交给DNS，不用我们去维护负载均衡服务器。<br style=\"box-sizing: border-box;\"/>缺点：当一个应用服务器挂了，不能及时通知DNS，而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和更强大的管理。<br style=\"box-sizing: border-box;\"/>　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">反向代理负载均衡（在用户的请求到达反向代理服务器时（已经到达网站机房），由反向代理服务器根据算法转发到具体的服务器。常用的apache，nginx都可以充当反向代理服务器。）<br style=\"box-sizing: border-box;\"/>优点：部署简单。<br style=\"box-sizing: border-box;\"/>缺点：代理服务器可能成为性能的瓶颈，特别是一次上传大文件。</p></blockquote><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">　　　　　　</p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">IP负载均衡（LVS-NAT，在请求到达负载均衡器后，负载均衡器通过修改请求的目的IP地址，从而实现请求的转发，做到负载均衡。）<br style=\"box-sizing: border-box;\"/>优点：性能更好。<br style=\"box-sizing: border-box;\"/>缺点：负载均衡器的宽带成为瓶颈。　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;\">直接路由负载均衡（LVS-DR，数据链路层负载均衡（在请求到达负载均衡器后，负载均衡器通过修改请求的mac地址，从而做到负载均衡，与IP负载均衡不一样的是，当请求访问完服务器之后，直接返回客户。而无需再经过负载均衡器。 ））</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">IP隧道负载均衡（LVS-TUN, ）</p></blockquote><h3 id=\"articleHeader8\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">LVS集群中的IP负载均衡技术</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.linuxvirtualserver.org/zh/lvs3.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxvirtualserver...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.cnblogs.com/qq78292959/archive/2012/05/31/2528524.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/qq7829...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.linuxidc.com/Linux/2015-01/112560.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxidc.com/Linux...</a></p><h3 id=\"articleHeader9\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">负载均衡和反向代理有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">做了反向代理才能实现负载均衡。负载均衡是做反向代理的目的之一。<br style=\"box-sizing: border-box;\"/><a href=\"https://www.zhihu.com/question/20553431\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://www.zhihu.com/questio...</a></p><h3 id=\"articleHeader10\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">nginx负载均衡分发请求的几种方式？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">5种<br style=\"box-sizing: border-box;\"/><a href=\"http://blog.jobbole.com/109320/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.jobbole.com/109320/</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">默认的轮询<br style=\"box-sizing: border-box;\"/>指定权重<br style=\"box-sizing: border-box;\"/>IP绑定IP_hash（每个请求按访问IP的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题）<br style=\"box-sizing: border-box;\"/>第三方的fair和url_hash两种方法</p><h2 id=\"articleHeader11\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">主从复制</h2><h3 id=\"articleHeader12\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">主从复制的作用？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">主从是一种用于数据容错和灾备的高可用解决方案，而不是一种处理高并发压力的解决方案（负载均衡是用来抗并发的）。这是一个客观作用和目的的问题。</p><ol style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">主机负责查询，从机负责增删改。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">可以在从机上执行备份，以避免备份期间影响主机的服务。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">主从复制之后，也可以在从机上查询，以降低主机的访问压力。<br style=\"box-sizing: border-box;\"/>但是，只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，实时性要求高的数据仍需从服务器查询。（因为主从复制有同步延迟，所以不能够保证强数据一致性）</p></li></ol><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.cnblogs.com/Aiapple/p/5792939.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/Aiappl...</a></p><h3 id=\"articleHeader13\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">主从复制和读写分离的区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">主从复制是实现读写分离的技术之一，也是实现读写分离的前提条件。<br style=\"box-sizing: border-box;\"/>做读写分离时最重要的就是确保读库和写库的数据统一，而主从复制是实现数据统一最简单的方法（并不能够保证强数据一致性）。<br style=\"box-sizing: border-box;\"/>读写分离，顾名思义，就是一个表只负责向前台页面展示数据，而后台管理人员对表的增删改查在另一个表中，把两个表分开，就是读写分离。<br style=\"box-sizing: border-box;\"/>主从复制则是一个表数据增删改之后会即时更新到另一个表中，保证两个表的数据一致。</p><h3 id=\"articleHeader14\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">实现主从复制的方法？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"https://segmentfault.com/a/1190000009922696\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://segmentfault.com/a/11...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/hguisu/article/details/7325124/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/hguisu/a...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/forever_young_/article/details/50904268\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/forever_...</a></p><h3 id=\"articleHeader15\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">如何减少主从复制的同步延迟？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">深入解析Mysql 主从同步延迟原理及解决方案<a href=\"http://www.cnblogs.com/cnmenglang/p/6393769.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/cnmeng...</a><br style=\"box-sizing: border-box;\"/>MySQL主从数据库同步延迟问题解决<a href=\"http://www.linuxidc.com/Linux/2014-05/101450.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxidc.com/Linux...</a></p><h3 id=\"articleHeader16\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">主从复制侧重点不同的几种变形？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://blog.csdn.net/herry2008/article/details/1916258\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/herry200...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.sinoxs.com/htm/2011815/1189.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.sinoxs.com/htm/201...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://baike.baidu.com/link?url=43g_HldN2au5ir-Htx2JIe2xN2oN2x3DHgjtX1NHsfxjxKm1dM73qcxsagKKTJEG8CXEQZkNdcdJk41UbceBGcbEeaxRa7vWyqJHP57q_Y2e4vvE9GaE7Ept6piLIqtoqN2tyyWcoUEzNR0hNjgRLK\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://baike.baidu.com/link?u...</a><br style=\"box-sizing: border-box;\"/><a href=\"https://www.baidu.com/baidu?wd=%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87&tn=monline_4_dg&ie=utf-8\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://www.baidu.com/baidu?w...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://aaronsa.blog.51cto.com/5157083/1741485/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://aaronsa.blog.51cto.com...</a><br style=\"box-sizing: border-box;\"/>双机热备，双机互备，双机双工</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">双机热备（主从复制）：主机+备机，<br style=\"box-sizing: border-box;\"/>双机互备：主机（备机）+备机（主机），互为主备<br style=\"box-sizing: border-box;\"/>双机双工：主机+主机，两台机器同时运行。</p><h2 id=\"articleHeader17\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式</h2><h3 id=\"articleHeader18\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">什么是分布式计算？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://blog.csdn.net/u010926964/article/details/50955139\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/u0109269...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/u010926964/article/details/50985368\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/u0109269...</a></p><h3 id=\"articleHeader19\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">分布式和集群有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"https://my.oschina.net/u/1246814/blog/267522\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://my.oschina.net/u/1246...</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">广义上的分布式是指===》将不同的服务分布在不同的服务器上，<br style=\"box-sizing: border-box;\"/>而集群指的是===》将几台服务器集中在一起，实现同一业务。<br style=\"box-sizing: border-box;\"/>分布式中的每一个节点，都可以做集群。<br style=\"box-sizing: border-box;\"/>而集群并不一定是分布式的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">举例：就比如新浪网，访问的人多了，他可以做一个群集，前面放一个响应服务器，后面几台服务器完成同一业务，如果有业务访问的时候，响应服务器看哪台服务器的负载不是很重，就将给哪一台去完成。<br style=\"box-sizing: border-box;\"/>而分布式，从窄意上理解，也跟集群差不多，但是它的组织比较松散，不像集群，有一个组织性，一台服务器垮了，其它的服务器可以顶上来。<br style=\"box-sizing: border-box;\"/>分布式的每一个节点，都完成不同的业务，一个节点垮了，哪这个业务就不可访问了。</p><p><br/></p>' , 1 , 1 , 1 , '韩会强' , 'images/j636pqnc_668lquybfjux59895549c664c.jpg' , '123.233.116.122' , 1502172489 , 1502172489) [ RunTime:0.004887s ]

---------------------------------------------------------------
[ 2017-08-08T14:08:12+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.026217s][吞吐率：38.14req/s] [内存消耗：3,861.57kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000288s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000813s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000151s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000934s ]

---------------------------------------------------------------
[ 2017-08-08T14:08:12+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.046683s][吞吐率：21.42req/s] [内存消耗：3,792.59kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000278s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000806s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000158s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000971s ]

---------------------------------------------------------------
[ 2017-08-08T14:16:46+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.022611s][吞吐率：44.23req/s] [内存消耗：2,987.10kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000291s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000791s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000189s ]

---------------------------------------------------------------
[ 2017-08-08T14:18:15+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.354123s][吞吐率：2.82req/s] [内存消耗：3,792.85kb] [文件加载：61]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '203090',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundary9vNDBFMcsOmpKVHD',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => '一个分布式服务器集群架构方案',
  'cate_id' => '27',
  'type' => '0',
  'keyword' => '分布式服务器集群',
  'remark' => '一个分布式服务器集群架构方案',
  'content' => '<h1 id="articleHeader0" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">0x01.大型网站演化</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">集群主要分为：高可用集群(High Availability Cluster)，负载均衡集群(Load Balance Cluster，nginx即可实现)，科学计算集群(High Performance Computing Cluster)。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">分布式是指将不同的业务分布在不同的地方；而集群指的是将几台服务器集中在一起，实现同一业务。分布式中的每一个节点，都可以做集群。 而集群并不一定就是分布式的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">之前在网上看到一篇关于大型网站演化的博客。<a rel="nofollow" href="http://www.cnblogs.com/leefreeman/p/3993449.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;"></a><a rel="nofollow" href="http://www.cnblogs.com/leefreeman/p/3993449.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/leefreeman/p/3993449.html</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">每个大型网站都会有不同的架构模式，而架构内容也就是在处理均衡负载，缓存，数据库，文件系统等，只是在不同的环境下，不同的条件下，架构的模型不一样，目的旨在提高网站的性能。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">最初的架构只有应用程序，数据库，文件服务。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-1.jpg&amp;objectId=1190000002418709&amp;token=b0c31c6be938e0f9f001f8c99864f764" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-1.jpg&objectId=1190000002418709&token=b0c31c6be938e0f9f001f8c99864f764" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">到后来，分布式服务、集群架设。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-10.jpg&amp;objectId=1190000002418709&amp;token=52cdb401b9ebdc64708779f2415b9fa7" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-10.jpg&objectId=1190000002418709&token=52cdb401b9ebdc64708779f2415b9fa7" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><h1 id="articleHeader1" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">0x02.关于均衡负载方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">在上一篇，<a rel="nofollow" href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">《Nginx反向代理实现均衡负载》</a>讨论过过的nginx现实均衡负载方案，这里选择另一种HAProxy+Keepalived双机高可用均衡负载方案。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">HAProxy是免费、极速且可靠的用于为TCP和基于HTTP应用程序提供高可用、负载均衡和代理服务的解决方案，尤其适用于高负载且需要持久连接或7层处理机制的web站点。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">不论是Haproxy还是Keepalived甚至是上游服务器均提高生产力并增强可用性,也就是如下架构中Haproxy,Keepalived,Httpd服务器任意宕机一台服务还是可以正常运行的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">HAProxy的优点：</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">1、HAProxy是支持虚拟主机的，可以工作在4、7层(支持多网段)；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">2、能够补充Nginx的一些缺点比如Session的保持，Cookie的引导等工作；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">3、支持url检测后端的服务器；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">4、本身仅仅就只是一款负载均衡软件；单纯从效率上来讲HAProxy更会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">5、HAProxy可以对Mysql读进行负载均衡，对后端的MySQL节点进行检测和负载均衡；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-keepalive-haproxy.jpg&amp;objectId=1190000002418709&amp;token=f7a1c5cd0092ca2c2882d3b4e2bde773" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-keepalive-haproxy.jpg&objectId=1190000002418709&token=f7a1c5cd0092ca2c2882d3b4e2bde773" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><h1 id="articleHeader2" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">0x03.关于Redis缓存方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">缓存分为服务器缓存和应用程序缓存。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">关于应用程序内缓存，已经在<a rel="nofollow" href="https://github.com/grasses/Jue-MVC" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">Jue后台框架</a>里面做了模块处理了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">关于服务器缓存，主要缓存服务器文件，减少服务器和php交互，减少均衡负载服务器和应用程序服务器交互。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">缓存里面有一种典型的memcached，现在用的多的是redis轻量级缓存方案。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">关于memcached与redis，看这篇&nbsp;<a rel="nofollow" href="http://www.bigdatalittlegeek.com/blog/2014/3/25/memcached-vs-redis" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">《Memcached vs Redis?》</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Redis主要将数据存储在各种格式：列表，数组，集合和排序集，一次能接受多个命令，阻塞读写，等待直到另一个进程将数据写入高速缓存。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-redis-cache.jpg&amp;objectId=1190000002418709&amp;token=e42e3ab7a22ac3a9697f9321b90b47e8" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-redis-cache.jpg&objectId=1190000002418709&token=e42e3ab7a22ac3a9697f9321b90b47e8" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">一篇关于Reids缓存方案。<a rel="nofollow" href="http://www.infoq.com/cn/news/2014/11/open-source-redis-cache" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">《高可用、开源的Redis缓存集群方案》</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><h1 id="articleHeader3" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">0x04.关于搜索引擎Sphinx方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">(第一期不做，后期需求时候考虑)</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Sphinx是俄罗斯人开发的，号称是很吊啦，千万级数据检索，每秒10MB/s，搭过环境。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Sphinx和MySQL是基于数据库的全文引擎，创建索引是B+树和hash key-value的方式。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">原理类似于用底层C检索MySQL，然后弄出一个sphinx.conf配置文件，索引与搜索均以这个文件为依据进行，要进行全文检索，首先就要配置好sphinx.conf，告诉sphinx哪些字段需要进行索引，哪些字段需要在where,orderby,groupby中用到。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a rel="nofollow" href="http://sphinxsearch.com/wiki/doku.php?id=sphinx_chinese_tutorial" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">Sphinx中文</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><h1 id="articleHeader4" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">0x05.关于NoSQL快速存储方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">NoSQL在这里的使用价值是处理一些琐事，比如用户个人网站的一些css值，height,width,color等等的小而繁多的数据，采用NoSQL旨在提升数据库速度，减少对MySQL的SELECT请求。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">关于NoSQL的方案很多了，选一个简单的MongDB好了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><h1 id="articleHeader5" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">0x06.关于分布式MySQL方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">(做分布式MySQL还没尝试过，初期也不清楚mysql所需要的压力，所以第一期不打算做分布式MySQL)</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a rel="nofollow" href="http://www.infoq.com/cn/news/2014/11/mysql-five-open-source-project" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">《标准MySQL数据库外的5个开源兼容方案》</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><br style="box-sizing: border-box;"/></p><h1 id="articleHeader6" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">0x07.分布式集群方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">综合起来，大致就是如下模型，初探分布式架构，很多模块将就形势做调整，时时更新中，待续。。。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-design.png&amp;objectId=1190000002418709&amp;token=47f5bedac40478ce42e5bd7445f8de89" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-design.png&objectId=1190000002418709&token=47f5bedac40478ce42e5bd7445f8de89" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p><span class="img-wrap" style="box-sizing: border-box;"><br/></span></p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000308s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000851s ]
[ sql ] [ SQL ] INSERT INTO `think_article` (`title` , `cate_id` , `type` , `keyword` , `remark` , `content` , `is_tui` , `status` , `views` , `auth` , `photo` , `ip` , `update_time` , `create_time`) VALUES ('一个分布式服务器集群架构方案' , 27 , 0 , '分布式服务器集群' , '一个分布式服务器集群架构方案' , '<h1 id=\"articleHeader0\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">0x01.大型网站演化</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">集群主要分为：高可用集群(High Availability Cluster)，负载均衡集群(Load Balance Cluster，nginx即可实现)，科学计算集群(High Performance Computing Cluster)。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式是指将不同的业务分布在不同的地方；而集群指的是将几台服务器集中在一起，实现同一业务。分布式中的每一个节点，都可以做集群。 而集群并不一定就是分布式的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">之前在网上看到一篇关于大型网站演化的博客。<a rel=\"nofollow\" href=\"http://www.cnblogs.com/leefreeman/p/3993449.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\"></a><a rel=\"nofollow\" href=\"http://www.cnblogs.com/leefreeman/p/3993449.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/leefreeman/p/3993449.html</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">每个大型网站都会有不同的架构模式，而架构内容也就是在处理均衡负载，缓存，数据库，文件系统等，只是在不同的环境下，不同的条件下，架构的模型不一样，目的旨在提高网站的性能。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">最初的架构只有应用程序，数据库，文件服务。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-1.jpg&amp;objectId=1190000002418709&amp;token=b0c31c6be938e0f9f001f8c99864f764\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-1.jpg&objectId=1190000002418709&token=b0c31c6be938e0f9f001f8c99864f764\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">到后来，分布式服务、集群架设。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-10.jpg&amp;objectId=1190000002418709&amp;token=52cdb401b9ebdc64708779f2415b9fa7\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-10.jpg&objectId=1190000002418709&token=52cdb401b9ebdc64708779f2415b9fa7\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader1\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">0x02.关于均衡负载方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在上一篇，<a rel=\"nofollow\" href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">《Nginx反向代理实现均衡负载》</a>讨论过过的nginx现实均衡负载方案，这里选择另一种HAProxy+Keepalived双机高可用均衡负载方案。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">HAProxy是免费、极速且可靠的用于为TCP和基于HTTP应用程序提供高可用、负载均衡和代理服务的解决方案，尤其适用于高负载且需要持久连接或7层处理机制的web站点。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">不论是Haproxy还是Keepalived甚至是上游服务器均提高生产力并增强可用性,也就是如下架构中Haproxy,Keepalived,Httpd服务器任意宕机一台服务还是可以正常运行的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">HAProxy的优点：</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">1、HAProxy是支持虚拟主机的，可以工作在4、7层(支持多网段)；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">2、能够补充Nginx的一些缺点比如Session的保持，Cookie的引导等工作；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">3、支持url检测后端的服务器；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">4、本身仅仅就只是一款负载均衡软件；单纯从效率上来讲HAProxy更会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">5、HAProxy可以对Mysql读进行负载均衡，对后端的MySQL节点进行检测和负载均衡；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-keepalive-haproxy.jpg&amp;objectId=1190000002418709&amp;token=f7a1c5cd0092ca2c2882d3b4e2bde773\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-keepalive-haproxy.jpg&objectId=1190000002418709&token=f7a1c5cd0092ca2c2882d3b4e2bde773\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader2\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">0x03.关于Redis缓存方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">缓存分为服务器缓存和应用程序缓存。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">关于应用程序内缓存，已经在<a rel=\"nofollow\" href=\"https://github.com/grasses/Jue-MVC\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">Jue后台框架</a>里面做了模块处理了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">关于服务器缓存，主要缓存服务器文件，减少服务器和php交互，减少均衡负载服务器和应用程序服务器交互。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">缓存里面有一种典型的memcached，现在用的多的是redis轻量级缓存方案。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">关于memcached与redis，看这篇&nbsp;<a rel=\"nofollow\" href=\"http://www.bigdatalittlegeek.com/blog/2014/3/25/memcached-vs-redis\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">《Memcached vs Redis?》</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Redis主要将数据存储在各种格式：列表，数组，集合和排序集，一次能接受多个命令，阻塞读写，等待直到另一个进程将数据写入高速缓存。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-redis-cache.jpg&amp;objectId=1190000002418709&amp;token=e42e3ab7a22ac3a9697f9321b90b47e8\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-redis-cache.jpg&objectId=1190000002418709&token=e42e3ab7a22ac3a9697f9321b90b47e8\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">一篇关于Reids缓存方案。<a rel=\"nofollow\" href=\"http://www.infoq.com/cn/news/2014/11/open-source-redis-cache\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">《高可用、开源的Redis缓存集群方案》</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader3\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">0x04.关于搜索引擎Sphinx方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">(第一期不做，后期需求时候考虑)</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Sphinx是俄罗斯人开发的，号称是很吊啦，千万级数据检索，每秒10MB/s，搭过环境。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Sphinx和MySQL是基于数据库的全文引擎，创建索引是B+树和hash key-value的方式。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">原理类似于用底层C检索MySQL，然后弄出一个sphinx.conf配置文件，索引与搜索均以这个文件为依据进行，要进行全文检索，首先就要配置好sphinx.conf，告诉sphinx哪些字段需要进行索引，哪些字段需要在where,orderby,groupby中用到。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a rel=\"nofollow\" href=\"http://sphinxsearch.com/wiki/doku.php?id=sphinx_chinese_tutorial\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">Sphinx中文</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader4\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">0x05.关于NoSQL快速存储方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">NoSQL在这里的使用价值是处理一些琐事，比如用户个人网站的一些css值，height,width,color等等的小而繁多的数据，采用NoSQL旨在提升数据库速度，减少对MySQL的SELECT请求。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">关于NoSQL的方案很多了，选一个简单的MongDB好了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader5\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">0x06.关于分布式MySQL方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">(做分布式MySQL还没尝试过，初期也不清楚mysql所需要的压力，所以第一期不打算做分布式MySQL)</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a rel=\"nofollow\" href=\"http://www.infoq.com/cn/news/2014/11/mysql-five-open-source-project\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">《标准MySQL数据库外的5个开源兼容方案》</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader6\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">0x07.分布式集群方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">综合起来，大致就是如下模型，初探分布式架构，很多模块将就形势做调整，时时更新中，待续。。。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-design.png&amp;objectId=1190000002418709&amp;token=47f5bedac40478ce42e5bd7445f8de89\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-design.png&objectId=1190000002418709&token=47f5bedac40478ce42e5bd7445f8de89\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><br/></span></p><p><br/></p>' , 1 , 1 , 1 , '韩会强' , 'images/j6372q8o_iaq2kerjijr598957a7105a1.jpg' , '123.233.116.122' , 1502173095 , 1502173095) [ RunTime:0.004505s ]

---------------------------------------------------------------
[ 2017-08-08T14:18:17+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.029531s][吞吐率：33.86req/s] [内存消耗：3,885.54kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000340s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000880s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000161s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001124s ]

---------------------------------------------------------------
[ 2017-08-08T14:18:17+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.042431s][吞吐率：23.57req/s] [内存消耗：3,816.52kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000279s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000822s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000186s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001033s ]

---------------------------------------------------------------
[ 2017-08-08T14:18:21+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.022884s][吞吐率：43.70req/s] [内存消耗：2,987.10kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000285s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000771s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000209s ]

---------------------------------------------------------------
[ 2017-08-08T14:20:22+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：1.096465s][吞吐率：0.91req/s] [内存消耗：3,794.99kb] [文件加载：65]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '299202',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundarySxuLdklSbOXpYhcB',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => '大型网站系统架构的演化',
  'cate_id' => '27',
  'type' => '0',
  'keyword' => '大型网站系统架构的演化',
  'remark' => '一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。',
  'content' => '<p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">前言</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">一、最开始的网站架构</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 最初的架构，应用程序、数据库、文件都部署在一台服务器上，如图：</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/251844417179867.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="image" border="0" alt="image" src="http://images.cnitblog.com/blog/352511/201409/251844423268454.png" width="453" height="347" style="border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">二、应用、数据、文件分离</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着业务的扩展，一台服务器已经不能满足性能需求，故将应用程序、数据库、文件各自部署在独立的服务器上，并且根据服务器的用途配置不同的硬件，达到最佳的性能效果。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/251844429987826.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="image" border="0" alt="image" src="http://images.cnitblog.com/blog/352511/201409/251844436545725.png" width="603" height="375" style="border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">三、利用缓存改善网站性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 在硬件优化性能的同时，同时也通过软件进行性能优化，在大部分的网站系统中，都会利用缓存技术改善系统的性能，使用缓存主要源于热点数据的存在，大部分网站访问都遵循28原则（即80%的访问请求，最终落在20%的数据上），所以我们可以对热点数据进行缓存，减少这些数据的访问路径，提高用户体验。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146003164033.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="251844453265971" border="0" alt="251844453265971" src="http://images.cnitblog.com/blog/352511/201409/302146030501236.png" width="548" height="558" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 缓存实现常见的方式是本地缓存、分布式缓存。当然还有CDN、反向代理等，这个后面再讲。本地缓存，顾名思义是将数据缓存在应用服务器本地，可以存在内存中，也可以存在文件，OSCache就是常用的本地缓存组件。本地缓存的特点是速度快，但因为本地空间有限所以缓存数据量也有限。分布式缓存的特点是，可以缓存海量的数据，并且扩展非常容易，在门户类网站中常常被使用，速度按理没有本地缓存快，常用的分布式缓存是Memcached、Redis。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">四、使用集群改善应用服务器性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 应用服务器作为网站的入口，会承担大量的请求，我们往往通过应用服务器集群来分担请求数。应用服务器前面部署负载均衡服务器调度用户请求，根据分发策略将请求分发到多个应用服务器节点。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146043948978.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="251844471702801" border="0" alt="251844471702801" src="http://images.cnitblog.com/blog/352511/201409/302146060811294.png" width="721" height="469" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是<span style="line-height: 1.8;">七层负载均衡</span>和HAProxy支持四层、七层负载均衡，可以根据报文内容选择内部服务器，因此LVS分发路径优于Nginx和HAProxy，性能要高些，而Nginx和HAProxy则更具配置性，如可以用来做动静分离（根据请求报文特征，选择静态资源服务器还是应用服务器）。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">五、数据库读写分离和分库分表</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着用户量的增加，数据库成为最大的瓶颈，改善数据库性能常用的手段是进行读写分离以及分表，读写分离顾名思义就是将数据库分为读库和写库，通过主备功能实现数据同步。分库分表则分为水平切分和垂直切分，水平切换则是对一个数据库特大的表进行拆分，例如用户表。垂直切分则是根据业务不同来切换，如用户业务、商品业务相关的表放在不同的数据库中。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146076915052.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851219209749" border="0" alt="260851219209749" src="http://images.cnitblog.com/blog/352511/201409/302146095341882.png" width="706" height="439" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">六、使用CDN和反向代理提高网站性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp; 假如我们的服务器都部署在成都的机房，对于四川的用户来说访问是较快的，而对于北京的用户访问是较慢的，这是由于四川和北京分别属于电信和联通的不同发达地区，北京用户访问需要通过互联路由器经过较长的路径才能访问到成都的服务器，返回路径也一样，所以数据传输时间比较长。对于这种情况，常常使用CDN解决，CDN将数据内容缓存到运营商的机房，用户访问时先从最近的运营商获取数据，这样大大减少了网络访问的路径。比较专业的CDN运营商有蓝汛、网宿。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp; 而反向代理，则是部署在网站的机房，当用户请求达到时首先访问反向代理服务器，反向代理服务器将缓存的数据返回给用户，如果没有没有缓存数据才会继续走应用服务器获取，也减少了获取数据的成本。反向代理有Squid，Nginx。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146110032599.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851254513595" border="0" alt="260851254513595" src="http://images.cnitblog.com/blog/352511/201409/302146127222157.png" width="656" height="547" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">七、使用分布式文件系统</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 用户一天天增加，业务量越来越大，产生的文件越来越多，单台的文件服务器已经不能满足需求。需要分布式的文件系统支撑。常用的分布式文件系统有NFS。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146147379271.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851282647353" border="0" alt="260851282647353" src="http://images.cnitblog.com/blog/352511/201409/302146163629801.png" width="686" height="479" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">八、使用NoSql和搜索引擎</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 对于海量数据的查询，我们使用nosql数据库加上搜索引擎可以达到更好的性能。并不是所有的数据都要放在关系型数据中。常用的NOSQL有mongodb和redis，搜索引擎有lucene。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146182536347.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851321075527" border="0" alt="260851321075527" src="http://images.cnitblog.com/blog/352511/201409/302146204097504.png" width="692" height="513" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">九、将应用服务器进行业务拆分</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着业务进一步扩展，应用程序变得非常臃肿，这时我们需要将应用程序进行业务拆分，如百度分为新闻、网页、图片等业务。每个业务应用负责相对独立的业务运作。业务之间通过消息进行通信或者同享数据库来实现。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146219727249.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851352481788" border="0" alt="260851352481788" src="http://images.cnitblog.com/blog/352511/201409/302146241449879.png" width="693" height="513" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;</p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-size: x-large;">十、搭建分布式服务</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; 这时我们发现各个业务应用都会使用到一些基本的业务服务，例如用户服务、订单服务、支付服务、安全服务，这些服务是支撑各业务应用的基本要素。我们将这些服务抽取出来利用分部式服务框架搭建分布式服务。淘宝的Dubbo是一个不错的选择。</p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146262063009.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851397174320" border="0" alt="260851397174320" src="http://images.cnitblog.com/blog/352511/201409/302146285194383.png" width="786" height="622" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-size: x-large;">小结</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; 大型网站的架构是根据业务需求不断完善的，根据不同的业务特征会做特定的设计和考虑，本文只是讲述一个常规大型网站会涉及的一些技术和手段。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000306s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000829s ]
[ error ] [10501]SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'remark' at row 1[/yjdata/www/hhqblog/thinkphp/library/think/db/Connection.php:457]

---------------------------------------------------------------
[ 2017-08-08T14:20:55+08:00 ] 172.17.180.47 123.233.116.122 GET /static/admin/css/bootstrap.min.css.map
[ log ] hhqblog.com/static/admin/css/bootstrap.min.css.map [运行时间：0.013889s][吞吐率：72.00req/s] [内存消耗：1,587.09kb] [文件加载：37]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'static',
    1 => 'admin',
    2 => 'css',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File

---------------------------------------------------------------
[ 2017-08-08T14:21:02+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：1.038861s][吞吐率：0.96req/s] [内存消耗：3,795.09kb] [文件加载：65]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '299202',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundarykQXSWazPwafW3pZw',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => '大型网站系统架构的演化',
  'cate_id' => '27',
  'type' => '0',
  'keyword' => '大型网站系统架构的演化',
  'remark' => '一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。',
  'content' => '<p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">前言</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">一、最开始的网站架构</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 最初的架构，应用程序、数据库、文件都部署在一台服务器上，如图：</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/251844417179867.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="image" border="0" alt="image" src="http://images.cnitblog.com/blog/352511/201409/251844423268454.png" width="453" height="347" style="border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">二、应用、数据、文件分离</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着业务的扩展，一台服务器已经不能满足性能需求，故将应用程序、数据库、文件各自部署在独立的服务器上，并且根据服务器的用途配置不同的硬件，达到最佳的性能效果。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/251844429987826.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="image" border="0" alt="image" src="http://images.cnitblog.com/blog/352511/201409/251844436545725.png" width="603" height="375" style="border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">三、利用缓存改善网站性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 在硬件优化性能的同时，同时也通过软件进行性能优化，在大部分的网站系统中，都会利用缓存技术改善系统的性能，使用缓存主要源于热点数据的存在，大部分网站访问都遵循28原则（即80%的访问请求，最终落在20%的数据上），所以我们可以对热点数据进行缓存，减少这些数据的访问路径，提高用户体验。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146003164033.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="251844453265971" border="0" alt="251844453265971" src="http://images.cnitblog.com/blog/352511/201409/302146030501236.png" width="548" height="558" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 缓存实现常见的方式是本地缓存、分布式缓存。当然还有CDN、反向代理等，这个后面再讲。本地缓存，顾名思义是将数据缓存在应用服务器本地，可以存在内存中，也可以存在文件，OSCache就是常用的本地缓存组件。本地缓存的特点是速度快，但因为本地空间有限所以缓存数据量也有限。分布式缓存的特点是，可以缓存海量的数据，并且扩展非常容易，在门户类网站中常常被使用，速度按理没有本地缓存快，常用的分布式缓存是Memcached、Redis。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">四、使用集群改善应用服务器性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 应用服务器作为网站的入口，会承担大量的请求，我们往往通过应用服务器集群来分担请求数。应用服务器前面部署负载均衡服务器调度用户请求，根据分发策略将请求分发到多个应用服务器节点。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146043948978.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="251844471702801" border="0" alt="251844471702801" src="http://images.cnitblog.com/blog/352511/201409/302146060811294.png" width="721" height="469" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是<span style="line-height: 1.8;">七层负载均衡</span>和HAProxy支持四层、七层负载均衡，可以根据报文内容选择内部服务器，因此LVS分发路径优于Nginx和HAProxy，性能要高些，而Nginx和HAProxy则更具配置性，如可以用来做动静分离（根据请求报文特征，选择静态资源服务器还是应用服务器）。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">五、数据库读写分离和分库分表</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着用户量的增加，数据库成为最大的瓶颈，改善数据库性能常用的手段是进行读写分离以及分表，读写分离顾名思义就是将数据库分为读库和写库，通过主备功能实现数据同步。分库分表则分为水平切分和垂直切分，水平切换则是对一个数据库特大的表进行拆分，例如用户表。垂直切分则是根据业务不同来切换，如用户业务、商品业务相关的表放在不同的数据库中。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146076915052.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851219209749" border="0" alt="260851219209749" src="http://images.cnitblog.com/blog/352511/201409/302146095341882.png" width="706" height="439" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">六、使用CDN和反向代理提高网站性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp; 假如我们的服务器都部署在成都的机房，对于四川的用户来说访问是较快的，而对于北京的用户访问是较慢的，这是由于四川和北京分别属于电信和联通的不同发达地区，北京用户访问需要通过互联路由器经过较长的路径才能访问到成都的服务器，返回路径也一样，所以数据传输时间比较长。对于这种情况，常常使用CDN解决，CDN将数据内容缓存到运营商的机房，用户访问时先从最近的运营商获取数据，这样大大减少了网络访问的路径。比较专业的CDN运营商有蓝汛、网宿。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp; 而反向代理，则是部署在网站的机房，当用户请求达到时首先访问反向代理服务器，反向代理服务器将缓存的数据返回给用户，如果没有没有缓存数据才会继续走应用服务器获取，也减少了获取数据的成本。反向代理有Squid，Nginx。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146110032599.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851254513595" border="0" alt="260851254513595" src="http://images.cnitblog.com/blog/352511/201409/302146127222157.png" width="656" height="547" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">七、使用分布式文件系统</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 用户一天天增加，业务量越来越大，产生的文件越来越多，单台的文件服务器已经不能满足需求。需要分布式的文件系统支撑。常用的分布式文件系统有NFS。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146147379271.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851282647353" border="0" alt="260851282647353" src="http://images.cnitblog.com/blog/352511/201409/302146163629801.png" width="686" height="479" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">八、使用NoSql和搜索引擎</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 对于海量数据的查询，我们使用nosql数据库加上搜索引擎可以达到更好的性能。并不是所有的数据都要放在关系型数据中。常用的NOSQL有mongodb和redis，搜索引擎有lucene。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146182536347.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851321075527" border="0" alt="260851321075527" src="http://images.cnitblog.com/blog/352511/201409/302146204097504.png" width="692" height="513" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">九、将应用服务器进行业务拆分</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着业务进一步扩展，应用程序变得非常臃肿，这时我们需要将应用程序进行业务拆分，如百度分为新闻、网页、图片等业务。每个业务应用负责相对独立的业务运作。业务之间通过消息进行通信或者同享数据库来实现。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146219727249.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851352481788" border="0" alt="260851352481788" src="http://images.cnitblog.com/blog/352511/201409/302146241449879.png" width="693" height="513" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;</p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-size: x-large;">十、搭建分布式服务</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; 这时我们发现各个业务应用都会使用到一些基本的业务服务，例如用户服务、订单服务、支付服务、安全服务，这些服务是支撑各业务应用的基本要素。我们将这些服务抽取出来利用分部式服务框架搭建分布式服务。淘宝的Dubbo是一个不错的选择。</p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146262063009.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851397174320" border="0" alt="260851397174320" src="http://images.cnitblog.com/blog/352511/201409/302146285194383.png" width="786" height="622" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-size: x-large;">小结</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; 大型网站的架构是根据业务需求不断完善的，根据不同的业务特征会做特定的设计和考虑，本文只是讲述一个常规大型网站会涉及的一些技术和手段。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000309s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000859s ]
[ error ] [10501]SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'remark' at row 1[/yjdata/www/hhqblog/thinkphp/library/think/db/Connection.php:457]

---------------------------------------------------------------
[ 2017-08-08T14:22:37+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：1.038194s][吞吐率：0.96req/s] [内存消耗：3,735.87kb] [文件加载：61]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '298554',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundaryD7UeMZVYlAnQMA4F',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => '大型网站系统架构的演化',
  'cate_id' => '27',
  'type' => '0',
  'keyword' => '大型网站系统架构的演化',
  'remark' => '一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。',
  'content' => '<p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">前言</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">一、最开始的网站架构</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 最初的架构，应用程序、数据库、文件都部署在一台服务器上，如图：</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/251844417179867.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="image" border="0" alt="image" src="http://images.cnitblog.com/blog/352511/201409/251844423268454.png" width="453" height="347" style="border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">二、应用、数据、文件分离</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着业务的扩展，一台服务器已经不能满足性能需求，故将应用程序、数据库、文件各自部署在独立的服务器上，并且根据服务器的用途配置不同的硬件，达到最佳的性能效果。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/251844429987826.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="image" border="0" alt="image" src="http://images.cnitblog.com/blog/352511/201409/251844436545725.png" width="603" height="375" style="border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">三、利用缓存改善网站性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 在硬件优化性能的同时，同时也通过软件进行性能优化，在大部分的网站系统中，都会利用缓存技术改善系统的性能，使用缓存主要源于热点数据的存在，大部分网站访问都遵循28原则（即80%的访问请求，最终落在20%的数据上），所以我们可以对热点数据进行缓存，减少这些数据的访问路径，提高用户体验。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146003164033.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="251844453265971" border="0" alt="251844453265971" src="http://images.cnitblog.com/blog/352511/201409/302146030501236.png" width="548" height="558" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 缓存实现常见的方式是本地缓存、分布式缓存。当然还有CDN、反向代理等，这个后面再讲。本地缓存，顾名思义是将数据缓存在应用服务器本地，可以存在内存中，也可以存在文件，OSCache就是常用的本地缓存组件。本地缓存的特点是速度快，但因为本地空间有限所以缓存数据量也有限。分布式缓存的特点是，可以缓存海量的数据，并且扩展非常容易，在门户类网站中常常被使用，速度按理没有本地缓存快，常用的分布式缓存是Memcached、Redis。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">四、使用集群改善应用服务器性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 应用服务器作为网站的入口，会承担大量的请求，我们往往通过应用服务器集群来分担请求数。应用服务器前面部署负载均衡服务器调度用户请求，根据分发策略将请求分发到多个应用服务器节点。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146043948978.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="251844471702801" border="0" alt="251844471702801" src="http://images.cnitblog.com/blog/352511/201409/302146060811294.png" width="721" height="469" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是<span style="line-height: 1.8;">七层负载均衡</span>和HAProxy支持四层、七层负载均衡，可以根据报文内容选择内部服务器，因此LVS分发路径优于Nginx和HAProxy，性能要高些，而Nginx和HAProxy则更具配置性，如可以用来做动静分离（根据请求报文特征，选择静态资源服务器还是应用服务器）。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">五、数据库读写分离和分库分表</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着用户量的增加，数据库成为最大的瓶颈，改善数据库性能常用的手段是进行读写分离以及分表，读写分离顾名思义就是将数据库分为读库和写库，通过主备功能实现数据同步。分库分表则分为水平切分和垂直切分，水平切换则是对一个数据库特大的表进行拆分，例如用户表。垂直切分则是根据业务不同来切换，如用户业务、商品业务相关的表放在不同的数据库中。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146076915052.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851219209749" border="0" alt="260851219209749" src="http://images.cnitblog.com/blog/352511/201409/302146095341882.png" width="706" height="439" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">六、使用CDN和反向代理提高网站性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp; 假如我们的服务器都部署在成都的机房，对于四川的用户来说访问是较快的，而对于北京的用户访问是较慢的，这是由于四川和北京分别属于电信和联通的不同发达地区，北京用户访问需要通过互联路由器经过较长的路径才能访问到成都的服务器，返回路径也一样，所以数据传输时间比较长。对于这种情况，常常使用CDN解决，CDN将数据内容缓存到运营商的机房，用户访问时先从最近的运营商获取数据，这样大大减少了网络访问的路径。比较专业的CDN运营商有蓝汛、网宿。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp; 而反向代理，则是部署在网站的机房，当用户请求达到时首先访问反向代理服务器，反向代理服务器将缓存的数据返回给用户，如果没有没有缓存数据才会继续走应用服务器获取，也减少了获取数据的成本。反向代理有Squid，Nginx。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146110032599.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851254513595" border="0" alt="260851254513595" src="http://images.cnitblog.com/blog/352511/201409/302146127222157.png" width="656" height="547" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">七、使用分布式文件系统</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 用户一天天增加，业务量越来越大，产生的文件越来越多，单台的文件服务器已经不能满足需求。需要分布式的文件系统支撑。常用的分布式文件系统有NFS。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146147379271.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851282647353" border="0" alt="260851282647353" src="http://images.cnitblog.com/blog/352511/201409/302146163629801.png" width="686" height="479" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">八、使用NoSql和搜索引擎</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 对于海量数据的查询，我们使用nosql数据库加上搜索引擎可以达到更好的性能。并不是所有的数据都要放在关系型数据中。常用的NOSQL有mongodb和redis，搜索引擎有lucene。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146182536347.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851321075527" border="0" alt="260851321075527" src="http://images.cnitblog.com/blog/352511/201409/302146204097504.png" width="692" height="513" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">九、将应用服务器进行业务拆分</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着业务进一步扩展，应用程序变得非常臃肿，这时我们需要将应用程序进行业务拆分，如百度分为新闻、网页、图片等业务。每个业务应用负责相对独立的业务运作。业务之间通过消息进行通信或者同享数据库来实现。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146219727249.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851352481788" border="0" alt="260851352481788" src="http://images.cnitblog.com/blog/352511/201409/302146241449879.png" width="693" height="513" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;</p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-size: x-large;">十、搭建分布式服务</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; 这时我们发现各个业务应用都会使用到一些基本的业务服务，例如用户服务、订单服务、支付服务、安全服务，这些服务是支撑各业务应用的基本要素。我们将这些服务抽取出来利用分部式服务框架搭建分布式服务。淘宝的Dubbo是一个不错的选择。</p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://images.cnitblog.com/blog/352511/201409/302146262063009.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851397174320" border="0" alt="260851397174320" src="http://images.cnitblog.com/blog/352511/201409/302146285194383.png" width="786" height="622" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;"><span style="line-height: 1.8; font-size: x-large;">小结</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;&nbsp;&nbsp; 大型网站的架构是根据业务需求不断完善的，根据不同的业务特征会做特定的设计和考虑，本文只是讲述一个常规大型网站会涉及的一些技术和手段。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000311s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000878s ]
[ sql ] [ SQL ] INSERT INTO `think_article` (`title` , `cate_id` , `type` , `keyword` , `remark` , `content` , `is_tui` , `status` , `views` , `auth` , `photo` , `ip` , `update_time` , `create_time`) VALUES ('大型网站系统架构的演化' , 27 , 0 , '大型网站系统架构的演化' , '一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。' , '<p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">前言</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。</span></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">一、最开始的网站架构</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 最初的架构，应用程序、数据库、文件都部署在一台服务器上，如图：</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/251844417179867.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"image\" border=\"0\" alt=\"image\" src=\"http://images.cnitblog.com/blog/352511/201409/251844423268454.png\" width=\"453\" height=\"347\" style=\"border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">二、应用、数据、文件分离</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 随着业务的扩展，一台服务器已经不能满足性能需求，故将应用程序、数据库、文件各自部署在独立的服务器上，并且根据服务器的用途配置不同的硬件，达到最佳的性能效果。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/251844429987826.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"image\" border=\"0\" alt=\"image\" src=\"http://images.cnitblog.com/blog/352511/201409/251844436545725.png\" width=\"603\" height=\"375\" style=\"border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">三、利用缓存改善网站性能</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 在硬件优化性能的同时，同时也通过软件进行性能优化，在大部分的网站系统中，都会利用缓存技术改善系统的性能，使用缓存主要源于热点数据的存在，大部分网站访问都遵循28原则（即80%的访问请求，最终落在20%的数据上），所以我们可以对热点数据进行缓存，减少这些数据的访问路径，提高用户体验。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146003164033.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"251844453265971\" border=\"0\" alt=\"251844453265971\" src=\"http://images.cnitblog.com/blog/352511/201409/302146030501236.png\" width=\"548\" height=\"558\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 缓存实现常见的方式是本地缓存、分布式缓存。当然还有CDN、反向代理等，这个后面再讲。本地缓存，顾名思义是将数据缓存在应用服务器本地，可以存在内存中，也可以存在文件，OSCache就是常用的本地缓存组件。本地缓存的特点是速度快，但因为本地空间有限所以缓存数据量也有限。分布式缓存的特点是，可以缓存海量的数据，并且扩展非常容易，在门户类网站中常常被使用，速度按理没有本地缓存快，常用的分布式缓存是Memcached、Redis。</span></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">四、使用集群改善应用服务器性能</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 应用服务器作为网站的入口，会承担大量的请求，我们往往通过应用服务器集群来分担请求数。应用服务器前面部署负载均衡服务器调度用户请求，根据分发策略将请求分发到多个应用服务器节点。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146043948978.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"251844471702801\" border=\"0\" alt=\"251844471702801\" src=\"http://images.cnitblog.com/blog/352511/201409/302146060811294.png\" width=\"721\" height=\"469\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是<span style=\"line-height: 1.8;\">七层负载均衡</span>和HAProxy支持四层、七层负载均衡，可以根据报文内容选择内部服务器，因此LVS分发路径优于Nginx和HAProxy，性能要高些，而Nginx和HAProxy则更具配置性，如可以用来做动静分离（根据请求报文特征，选择静态资源服务器还是应用服务器）。</span></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">五、数据库读写分离和分库分表</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 随着用户量的增加，数据库成为最大的瓶颈，改善数据库性能常用的手段是进行读写分离以及分表，读写分离顾名思义就是将数据库分为读库和写库，通过主备功能实现数据同步。分库分表则分为水平切分和垂直切分，水平切换则是对一个数据库特大的表进行拆分，例如用户表。垂直切分则是根据业务不同来切换，如用户业务、商品业务相关的表放在不同的数据库中。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146076915052.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851219209749\" border=\"0\" alt=\"260851219209749\" src=\"http://images.cnitblog.com/blog/352511/201409/302146095341882.png\" width=\"706\" height=\"439\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">六、使用CDN和反向代理提高网站性能</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp; 假如我们的服务器都部署在成都的机房，对于四川的用户来说访问是较快的，而对于北京的用户访问是较慢的，这是由于四川和北京分别属于电信和联通的不同发达地区，北京用户访问需要通过互联路由器经过较长的路径才能访问到成都的服务器，返回路径也一样，所以数据传输时间比较长。对于这种情况，常常使用CDN解决，CDN将数据内容缓存到运营商的机房，用户访问时先从最近的运营商获取数据，这样大大减少了网络访问的路径。比较专业的CDN运营商有蓝汛、网宿。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp; 而反向代理，则是部署在网站的机房，当用户请求达到时首先访问反向代理服务器，反向代理服务器将缓存的数据返回给用户，如果没有没有缓存数据才会继续走应用服务器获取，也减少了获取数据的成本。反向代理有Squid，Nginx。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146110032599.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851254513595\" border=\"0\" alt=\"260851254513595\" src=\"http://images.cnitblog.com/blog/352511/201409/302146127222157.png\" width=\"656\" height=\"547\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">七、使用分布式文件系统</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 用户一天天增加，业务量越来越大，产生的文件越来越多，单台的文件服务器已经不能满足需求。需要分布式的文件系统支撑。常用的分布式文件系统有NFS。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146147379271.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851282647353\" border=\"0\" alt=\"260851282647353\" src=\"http://images.cnitblog.com/blog/352511/201409/302146163629801.png\" width=\"686\" height=\"479\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">八、使用NoSql和搜索引擎</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 对于海量数据的查询，我们使用nosql数据库加上搜索引擎可以达到更好的性能。并不是所有的数据都要放在关系型数据中。常用的NOSQL有mongodb和redis，搜索引擎有lucene。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146182536347.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851321075527\" border=\"0\" alt=\"260851321075527\" src=\"http://images.cnitblog.com/blog/352511/201409/302146204097504.png\" width=\"692\" height=\"513\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">九、将应用服务器进行业务拆分</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 随着业务进一步扩展，应用程序变得非常臃肿，这时我们需要将应用程序进行业务拆分，如百度分为新闻、网页、图片等业务。每个业务应用负责相对独立的业务运作。业务之间通过消息进行通信或者同享数据库来实现。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146219727249.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851352481788\" border=\"0\" alt=\"260851352481788\" src=\"http://images.cnitblog.com/blog/352511/201409/302146241449879.png\" width=\"693\" height=\"513\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-size: x-large;\">十、搭建分布式服务</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp; 这时我们发现各个业务应用都会使用到一些基本的业务服务，例如用户服务、订单服务、支付服务、安全服务，这些服务是支撑各业务应用的基本要素。我们将这些服务抽取出来利用分部式服务框架搭建分布式服务。淘宝的Dubbo是一个不错的选择。</p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146262063009.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851397174320\" border=\"0\" alt=\"260851397174320\" src=\"http://images.cnitblog.com/blog/352511/201409/302146285194383.png\" width=\"786\" height=\"622\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal;\"><span style=\"line-height: 1.8; font-size: x-large;\">小结</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, &quot;Times New Roman&quot;, Times, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp; 大型网站的架构是根据业务需求不断完善的，根据不同的业务特征会做特定的设计和考虑，本文只是讲述一个常规大型网站会涉及的一些技术和手段。</p><p><br/></p>' , 1 , 1 , 1 , '韩会强' , 'images/j6378bmo_3gnsiy4rhgh8598958ac6f4b1.jpg' , '123.233.116.122' , 1502173356 , 1502173356) [ RunTime:0.003701s ]

---------------------------------------------------------------
[ 2017-08-08T14:22:39+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.026369s][吞吐率：37.92req/s] [内存消耗：3,917.44kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000298s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000815s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000152s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001016s ]

---------------------------------------------------------------
[ 2017-08-08T14:22:39+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.065034s][吞吐率：15.38req/s] [内存消耗：3,848.46kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000417s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.001125s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000218s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001279s ]

---------------------------------------------------------------
[ 2017-08-08T14:23:06+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.025538s][吞吐率：39.16req/s] [内存消耗：2,987.10kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000296s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000832s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000219s ]

---------------------------------------------------------------
[ 2017-08-08T14:25:03+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.327252s][吞吐率：3.06req/s] [内存消耗：3,780.95kb] [文件加载：61]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '183568',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundaryAONQELAs2CHqAw0f',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => 'Nginx反向代理实现均衡负载',
  'cate_id' => '',
  'type' => '0',
  'keyword' => 'Nginx,反向代理,实现,均衡负载',
  'remark' => '为jue.so架设一个服务器集群。
架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案',
  'content' => '<h4 id="架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy-Keepalived是目前使用最广泛的三种方案" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; font-size: 1.2em; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案</h4><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><h1 id="0x01-关于均衡负载" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x01-关于均衡负载" class="headerlink" title="0x01. 关于均衡负载" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x01. 关于均衡负载</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">其中Keepalived+HAProxy是一个高可用性方案。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">关于3者比较，可以看这篇博客<a href="http://www.rootop.org/pages/2773.html" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://www.rootop.org/pages/2773.html</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">工作在网络的7层之上，可以针对http应用做一些分流的策略。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p><br style="font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><h1 id="0x02-关于Nginx" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x02-关于Nginx" class="headerlink" title="0x02.关于Nginx" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x02.关于Nginx</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">nginx在启动后，在unix系统中会以daemon的方式在后台运行，后台进程包含一个master进程和多个worker进程。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">而基本的网络事件，则是放在worker进程中来处理了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">关于nginx，主要由3大模块，内核模块，事件模块，http核心模块。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">nginx模块一般被分成三大类：handler、filter和upstream。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://homeway.me/image/2014-12-04-nginx-work.png" title="nginx工作模型" class="fancybox" rel="article0" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;"><img src="/ueditor/php/upload/image/20170808/1502173482462464.png" alt="nginx工作模型" style="margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;"/></a><span class="caption" style="margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;">nginx工作模型</span></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p><br style="font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><h1 id="0x03-服务器集群环境" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x03-服务器集群环境" class="headerlink" title="0x03.服务器集群环境" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x03.服务器集群环境</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">接下来讲下想要搭的均衡负载环境。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://homeway.me/image/2014-12-04-nginx-load-balance.jpg" title="Nginx服务器集群" class="fancybox" rel="article0" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;"><img src="/ueditor/php/upload/image/20170808/1502173485362157.jpg" alt="Nginx服务器集群" style="margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;"/></a><span class="caption" style="margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;">Nginx服务器集群</span></p><pre style="margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace; font-size: 14px; vertical-align: baseline; background-color: rgb(39, 40, 34); overflow: auto; color: rgb(248, 248, 242); line-height: 22.4px;">系统环境&nbsp;:&nbsp;Linux&nbsp;Centos&nbsp;7&nbsp;aws&nbsp;2.6.32-504.1.3.el6.x86_64&nbsp;Nginx&nbsp;Version:1.6.0均衡负载服务器：&nbsp;172.31.19.122:80(lnmp一键安装)WEB1:&nbsp;172.31.15.59:80WEB2:&nbsp;172.31.15.94:80WEB3:&nbsp;172.31.15.24:80</pre><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p><br style="font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><h1 id="0x04-负载Nginx配置" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x04-负载Nginx配置" class="headerlink" title="0x04.负载Nginx配置" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x04.负载Nginx配置</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">服务器用lnmp一键安装，自带的conf配置已经配置好一切了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">下面是完整的配置文件。</p><blockquote style="margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; font-size: 14px; vertical-align: baseline; color: rgb(119, 119, 119); white-space: normal; background-color: rgb(255, 255, 255);"><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">/usr/local/nginx/conf/nginx.conf</p></blockquote><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><pre style="margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace; font-size: 14px; vertical-align: baseline; background-color: rgb(39, 40, 34); overflow: auto; color: rgb(248, 248, 242); line-height: 22.4px;">user&nbsp;&nbsp;www&nbsp;www;
worker_processes&nbsp;auto;
error_log&nbsp;&nbsp;/home/wwwlogs/nginx_error.log&nbsp;&nbsp;crit;
pid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/local/nginx/logs/nginx.pid;
worker_rlimit_nofile&nbsp;51200;

events&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;epoll;
&nbsp;&nbsp;&nbsp;&nbsp;worker_connections&nbsp;51200;
&nbsp;&nbsp;&nbsp;&nbsp;multi_accept&nbsp;on;
}

http&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mime.types;
&nbsp;&nbsp;&nbsp;&nbsp;default_type&nbsp;&nbsp;application/octet-stream;#处理接收的数据类型

&nbsp;&nbsp;&nbsp;&nbsp;server_names_hash_bucket_size&nbsp;128;
&nbsp;&nbsp;&nbsp;&nbsp;client_header_buffer_size&nbsp;32k;
&nbsp;&nbsp;&nbsp;&nbsp;large_client_header_buffers&nbsp;4&nbsp;32k;
&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;50m;

&nbsp;&nbsp;&nbsp;&nbsp;sendfile&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;tcp_nopush&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on;

&nbsp;&nbsp;&nbsp;&nbsp;keepalive_timeout&nbsp;60;
&nbsp;&nbsp;&nbsp;&nbsp;tcp_nodelay&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_connect_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_send_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_read_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffer_size&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffers&nbsp;4&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_busy_buffers_size&nbsp;128k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_temp_file_write_size&nbsp;256k;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;添加gzip压缩
&nbsp;&nbsp;&nbsp;&nbsp;gzip&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length&nbsp;&nbsp;1k;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;16k;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_http_version&nbsp;1.0;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_comp_level&nbsp;2;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text/plain&nbsp;application/x-javascript&nbsp;text/css&nbsp;application/xml;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_vary&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expired&nbsp;no-cache&nbsp;no-store&nbsp;private&nbsp;auth;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_disable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MSIE&nbsp;[1-6]\\.&quot;;

&nbsp;&nbsp;&nbsp;&nbsp;server_tokens&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过upstream处理均衡负载
&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;static.homeway&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.24:80;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;homeway&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;ip&nbsp;hash主要是对ip处理下，让下次访问时候，还是访问当前服务器，这样就不会导致session丢失
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip_hash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;weight权重，配置访问概率
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.59:80&nbsp;weight=10;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.94:80&nbsp;weight=5;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;80&nbsp;default;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;172.31.19.122;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm&nbsp;index.php;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#error_page&nbsp;&nbsp;&nbsp;404&nbsp;&nbsp;&nbsp;/404.html;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(js|css)?$&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12h;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;静态文件可以用CDN处理，本例子指向WEB3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(gif|jpg|jpeg|png|bmp|swf)$&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://static.homeway;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过均衡负载服务器指向WEB1、WEB2&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://homeway;&nbsp;&nbsp;#使用后端的web服务器&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_redirect&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;Host&nbsp;$host;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;10m;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_body_buffer_size&nbsp;128k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_connect_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_send_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_read_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffer_size&nbsp;4k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffers&nbsp;4&nbsp;32k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_busy_buffers_size&nbsp;64k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_temp_file_write_size&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_log&nbsp;&nbsp;/home/wwwlogs/access.log&nbsp;&nbsp;access;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;vhost/*.conf;
}</pre><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">核心指令”ip_hash”只能在upstream {}中使用。这条指令用于通知nginx使用ip hash负载均衡算法。如果没加这条指令，nginx会使用默认的round robin负载均衡模块，那么，你每次访问的服务器可能会不同，导致session丢失，一直要重新登录。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">关于upstream的源码分析，可以去看 tengine的介绍&nbsp;<a href="http://tengine.taobao.org/book/chapter_05.html" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://tengine.taobao.org/book/chapter_05.html</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">重启服务器下。</p><blockquote style="margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; font-size: 14px; vertical-align: baseline; color: rgb(119, 119, 119); white-space: normal; background-color: rgb(255, 255, 255);"><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">/root/lnmp restart</p></blockquote><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">搞定了，确定WEB1，WEB2,WEB3可以正常访问就行了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">这样，假设，我在WEB1的web目录下放一个 fuck.php, WEB2不放，那么。当我访问<a href="http://172.31.19.122%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%9C%89%E6%97%B6%E5%80%99404%EF%BC%8C%E6%9C%89%E6%97%B6%E5%80%99%E8%BF%94%E5%9B%9E%E6%AD%A3%E5%B8%B8%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BF%99%E5%B0%B1%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82/" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://172.31.19.122时候，就会有时候404，有时候返回正常页面，这就表示成功了。</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><p><br style="font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);"><br/></p><h1 id="0x05-关于服务性能" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x05-关于服务性能" class="headerlink" title="0x05.关于服务性能" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x05.关于服务性能</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">这个在目前不能做，因为无法做多用户并发访问，就算模拟器模拟效果也不能达到多用户并发的强度。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);">Nginx的几个优点：</p><ul style="margin: 1.6em 20px; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; list-style-position: initial; list-style-image: initial; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">Nginx工作在网络的7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下LVS并不具备这样的功能，所以Nginx单凭这点可利用的场合就远多于LVS了；但Nginx有用的这些功能使其可调整度要高于LVS，所以经常要去触碰触碰，触碰多了，人为出问题的几率也就会大。</p></li><li><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可以考虑用其作为反向代理加速器。</p></li><li><p>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一</p></li></ul><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000312s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000824s ]
[ sql ] [ SQL ] INSERT INTO `think_article` (`title` , `cate_id` , `type` , `keyword` , `remark` , `content` , `is_tui` , `status` , `views` , `auth` , `photo` , `ip` , `update_time` , `create_time`) VALUES ('Nginx反向代理实现均衡负载' , 0 , 0 , 'Nginx,反向代理,实现,均衡负载' , '为jue.so架设一个服务器集群。\r\n架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案' , '<h4 id=\"架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy-Keepalived是目前使用最广泛的三种方案\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; font-size: 1.2em; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);\">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案</h4><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><h1 id=\"0x01-关于均衡负载\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x01-关于均衡负载\" class=\"headerlink\" title=\"0x01. 关于均衡负载\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x01. 关于均衡负载</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">其中Keepalived+HAProxy是一个高可用性方案。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">关于3者比较，可以看这篇博客<a href=\"http://www.rootop.org/pages/2773.html\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://www.rootop.org/pages/2773.html</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">工作在网络的7层之上，可以针对http应用做一些分流的策略。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><h1 id=\"0x02-关于Nginx\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x02-关于Nginx\" class=\"headerlink\" title=\"0x02.关于Nginx\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x02.关于Nginx</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">nginx在启动后，在unix系统中会以daemon的方式在后台运行，后台进程包含一个master进程和多个worker进程。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">而基本的网络事件，则是放在worker进程中来处理了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">关于nginx，主要由3大模块，内核模块，事件模块，http核心模块。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">nginx模块一般被分成三大类：handler、filter和upstream。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://homeway.me/image/2014-12-04-nginx-work.png\" title=\"nginx工作模型\" class=\"fancybox\" rel=\"article0\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\"><img src=\"/ueditor/php/upload/image/20170808/1502173482462464.png\" alt=\"nginx工作模型\" style=\"margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;\"/></a><span class=\"caption\" style=\"margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;\">nginx工作模型</span></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><h1 id=\"0x03-服务器集群环境\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x03-服务器集群环境\" class=\"headerlink\" title=\"0x03.服务器集群环境\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x03.服务器集群环境</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">接下来讲下想要搭的均衡负载环境。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://homeway.me/image/2014-12-04-nginx-load-balance.jpg\" title=\"Nginx服务器集群\" class=\"fancybox\" rel=\"article0\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\"><img src=\"/ueditor/php/upload/image/20170808/1502173485362157.jpg\" alt=\"Nginx服务器集群\" style=\"margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;\"/></a><span class=\"caption\" style=\"margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;\">Nginx服务器集群</span></p><pre style=\"margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace; font-size: 14px; vertical-align: baseline; background-color: rgb(39, 40, 34); overflow: auto; color: rgb(248, 248, 242); line-height: 22.4px;\">系统环境&nbsp;:&nbsp;Linux&nbsp;Centos&nbsp;7&nbsp;aws&nbsp;2.6.32-504.1.3.el6.x86_64&nbsp;Nginx&nbsp;Version:1.6.0均衡负载服务器：&nbsp;172.31.19.122:80(lnmp一键安装)WEB1:&nbsp;172.31.15.59:80WEB2:&nbsp;172.31.15.94:80WEB3:&nbsp;172.31.15.24:80</pre><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><h1 id=\"0x04-负载Nginx配置\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x04-负载Nginx配置\" class=\"headerlink\" title=\"0x04.负载Nginx配置\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x04.负载Nginx配置</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">服务器用lnmp一键安装，自带的conf配置已经配置好一切了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">下面是完整的配置文件。</p><blockquote style=\"margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; font-size: 14px; vertical-align: baseline; color: rgb(119, 119, 119); white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">/usr/local/nginx/conf/nginx.conf</p></blockquote><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace; font-size: 14px; vertical-align: baseline; background-color: rgb(39, 40, 34); overflow: auto; color: rgb(248, 248, 242); line-height: 22.4px;\">user&nbsp;&nbsp;www&nbsp;www;\r\nworker_processes&nbsp;auto;\r\nerror_log&nbsp;&nbsp;/home/wwwlogs/nginx_error.log&nbsp;&nbsp;crit;\r\npid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/local/nginx/logs/nginx.pid;\r\nworker_rlimit_nofile&nbsp;51200;\r\n\r\nevents&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;epoll;\r\n&nbsp;&nbsp;&nbsp;&nbsp;worker_connections&nbsp;51200;\r\n&nbsp;&nbsp;&nbsp;&nbsp;multi_accept&nbsp;on;\r\n}\r\n\r\nhttp&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mime.types;\r\n&nbsp;&nbsp;&nbsp;&nbsp;default_type&nbsp;&nbsp;application/octet-stream;#处理接收的数据类型\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;server_names_hash_bucket_size&nbsp;128;\r\n&nbsp;&nbsp;&nbsp;&nbsp;client_header_buffer_size&nbsp;32k;\r\n&nbsp;&nbsp;&nbsp;&nbsp;large_client_header_buffers&nbsp;4&nbsp;32k;\r\n&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;50m;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;sendfile&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;tcp_nopush&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;keepalive_timeout&nbsp;60;\r\n&nbsp;&nbsp;&nbsp;&nbsp;tcp_nodelay&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_connect_timeout&nbsp;300;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_send_timeout&nbsp;300;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_read_timeout&nbsp;300;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffer_size&nbsp;64k;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffers&nbsp;4&nbsp;64k;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_busy_buffers_size&nbsp;128k;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_temp_file_write_size&nbsp;256k;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;添加gzip压缩\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length&nbsp;&nbsp;1k;\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;16k;\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_http_version&nbsp;1.0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_comp_level&nbsp;2;\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text/plain&nbsp;application/x-javascript&nbsp;text/css&nbsp;application/xml;\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_vary&nbsp;on;\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expired&nbsp;no-cache&nbsp;no-store&nbsp;private&nbsp;auth;\r\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_disable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MSIE&nbsp;[1-6]\\.&quot;;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;server_tokens&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过upstream处理均衡负载\r\n&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;static.homeway&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.24:80;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;homeway&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;ip&nbsp;hash主要是对ip处理下，让下次访问时候，还是访问当前服务器，这样就不会导致session丢失\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip_hash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;weight权重，配置访问概率\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.59:80&nbsp;weight=10;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.94:80&nbsp;weight=5;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;80&nbsp;default;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;172.31.19.122;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm&nbsp;index.php;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#error_page&nbsp;&nbsp;&nbsp;404&nbsp;&nbsp;&nbsp;/404.html;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(js|css)?$&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12h;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;静态文件可以用CDN处理，本例子指向WEB3\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(gif|jpg|jpeg|png|bmp|swf)$&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://static.homeway;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过均衡负载服务器指向WEB1、WEB2&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://homeway;&nbsp;&nbsp;#使用后端的web服务器&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_redirect&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;Host&nbsp;$host;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;10m;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_body_buffer_size&nbsp;128k;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_connect_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_send_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_read_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffer_size&nbsp;4k;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffers&nbsp;4&nbsp;32k;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_busy_buffers_size&nbsp;64k;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_temp_file_write_size&nbsp;64k;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_log&nbsp;&nbsp;/home/wwwlogs/access.log&nbsp;&nbsp;access;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;vhost/*.conf;\r\n}</pre><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">核心指令”ip_hash”只能在upstream {}中使用。这条指令用于通知nginx使用ip hash负载均衡算法。如果没加这条指令，nginx会使用默认的round robin负载均衡模块，那么，你每次访问的服务器可能会不同，导致session丢失，一直要重新登录。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">关于upstream的源码分析，可以去看 tengine的介绍&nbsp;<a href=\"http://tengine.taobao.org/book/chapter_05.html\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://tengine.taobao.org/book/chapter_05.html</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">重启服务器下。</p><blockquote style=\"margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; font-size: 14px; vertical-align: baseline; color: rgb(119, 119, 119); white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">/root/lnmp restart</p></blockquote><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">搞定了，确定WEB1，WEB2,WEB3可以正常访问就行了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">这样，假设，我在WEB1的web目录下放一个 fuck.php, WEB2不放，那么。当我访问<a href=\"http://172.31.19.122%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%9C%89%E6%97%B6%E5%80%99404%EF%BC%8C%E6%9C%89%E6%97%B6%E5%80%99%E8%BF%94%E5%9B%9E%E6%AD%A3%E5%B8%B8%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BF%99%E5%B0%B1%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82/\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://172.31.19.122时候，就会有时候404，有时候返回正常页面，这就表示成功了。</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><h1 id=\"0x05-关于服务性能\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: &quot;Droid Serif&quot;, Georgia, serif; vertical-align: baseline; line-height: 1.1em; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x05-关于服务性能\" class=\"headerlink\" title=\"0x05.关于服务性能\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x05.关于服务性能</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">这个在目前不能做，因为无法做多用户并发访问，就算模拟器模拟效果也不能达到多用户并发的强度。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\">Nginx的几个优点：</p><ul style=\"margin: 1.6em 20px; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, &quot;Microsoft Yahei&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; vertical-align: baseline; list-style-position: initial; list-style-image: initial; line-height: 1.6em; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">Nginx工作在网络的7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下LVS并不具备这样的功能，所以Nginx单凭这点可利用的场合就远多于LVS了；但Nginx有用的这些功能使其可调整度要高于LVS，所以经常要去触碰触碰，触碰多了，人为出问题的几率也就会大。</p></li><li><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可以考虑用其作为反向代理加速器。</p></li><li><p>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一</p></li></ul><p><br/></p>' , 1 , 1 , 1 , '韩会强' , 'images/j637bga8_6tjl3udbvxa65989593edb321.jpg' , '123.233.116.122' , 1502173502 , 1502173502) [ RunTime:0.003964s ]

---------------------------------------------------------------
[ 2017-08-08T14:25:04+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.026591s][吞吐率：37.61req/s] [内存消耗：3,904.21kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000293s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000829s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000170s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001053s ]

---------------------------------------------------------------
[ 2017-08-08T14:25:04+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.051007s][吞吐率：19.61req/s] [内存消耗：3,835.25kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000348s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000903s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000164s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001111s ]

---------------------------------------------------------------
[ 2017-08-08T14:25:14+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/edit_article/id/44/html
[ log ] hhqblog.com/admin/article/edit_article/id/44/html [运行时间：0.039567s][吞吐率：25.27req/s] [内存消耗：3,069.90kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '44',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/edit_article.html [ array (
  0 => 'article',
  1 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000322s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000868s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 44 LIMIT 1 [ RunTime:0.000370s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000537s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000184s ]

---------------------------------------------------------------
[ 2017-08-08T14:25:23+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/edit_article.html
[ log ] hhqblog.com/admin/article/edit_article.html [运行时间：0.030439s][吞吐率：32.85req/s] [内存消耗：3,598.91kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '47710',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/44/html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'id' => '44',
  'title' => 'Nginx反向代理实现均衡负载',
  'cate_id' => '19',
  'type' => '0',
  'keyword' => 'Nginx,反向代理,实现,均衡负载',
  'remark' => '为jue.so架设一个服务器集群。
架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案',
  'file' => '',
  'content' => '<h4 id="架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy-Keepalived是目前使用最广泛的三种方案" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案</h4><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x01-关于均衡负载" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x01-关于均衡负载" class="headerlink" title="0x01. 关于均衡负载" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x01. 关于均衡负载</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">其中Keepalived+HAProxy是一个高可用性方案。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">关于3者比较，可以看这篇博客<a href="http://www.rootop.org/pages/2773.html" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://www.rootop.org/pages/2773.html</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">工作在网络的7层之上，可以针对http应用做一些分流的策略。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/><p><br style="font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x02-关于Nginx" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x02-关于Nginx" class="headerlink" title="0x02.关于Nginx" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x02.关于Nginx</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">nginx在启动后，在unix系统中会以daemon的方式在后台运行，后台进程包含一个master进程和多个worker进程。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">而基本的网络事件，则是放在worker进程中来处理了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">关于nginx，主要由3大模块，内核模块，事件模块，http核心模块。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">nginx模块一般被分成三大类：handler、filter和upstream。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/image/2014-12-04-nginx-work.png" title="nginx工作模型" class="fancybox" rel="article0" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;"><img src="/ueditor/php/upload/image/20170808/1502173482462464.png" alt="nginx工作模型" style="margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;"/></a><span class="caption" style="margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;">nginx工作模型</span></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/><p><br style="font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x03-服务器集群环境" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x03-服务器集群环境" class="headerlink" title="0x03.服务器集群环境" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x03.服务器集群环境</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">接下来讲下想要搭的均衡负载环境。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/image/2014-12-04-nginx-load-balance.jpg" title="Nginx服务器集群" class="fancybox" rel="article0" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;"><img src="/ueditor/php/upload/image/20170808/1502173485362157.jpg" alt="Nginx服务器集群" style="margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;"/></a><span class="caption" style="margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;">Nginx服务器集群</span></p><pre style="margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: " source="" code="" font-size:="" vertical-align:="" background-color:="" overflow:="" color:="" line-height:="">系统环境&nbsp;:&nbsp;Linux&nbsp;Centos&nbsp;7&nbsp;aws&nbsp;2.6.32-504.1.3.el6.x86_64&nbsp;Nginx&nbsp;Version:1.6.0均衡负载服务器：&nbsp;172.31.19.122:80(lnmp一键安装)WEB1:&nbsp;172.31.15.59:80WEB2:&nbsp;172.31.15.94:80WEB3:&nbsp;172.31.15.24:80</pre><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/><p><br style="font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x04-负载Nginx配置" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x04-负载Nginx配置" class="headerlink" title="0x04.负载Nginx配置" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x04.负载Nginx配置</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">服务器用lnmp一键安装，自带的conf配置已经配置好一切了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">下面是完整的配置文件。</p><blockquote style="margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: " droid="" font-size:="" vertical-align:="" color:="" white-space:="" background-color:=""><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">/usr/local/nginx/conf/nginx.conf</p></blockquote><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><pre style="margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: " source="" code="" font-size:="" vertical-align:="" background-color:="" overflow:="" color:="" line-height:="">user&nbsp;&nbsp;www&nbsp;www;
worker_processes&nbsp;auto;
error_log&nbsp;&nbsp;/home/wwwlogs/nginx_error.log&nbsp;&nbsp;crit;
pid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/local/nginx/logs/nginx.pid;
worker_rlimit_nofile&nbsp;51200;

events&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;epoll;
&nbsp;&nbsp;&nbsp;&nbsp;worker_connections&nbsp;51200;
&nbsp;&nbsp;&nbsp;&nbsp;multi_accept&nbsp;on;
}

http&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mime.types;
&nbsp;&nbsp;&nbsp;&nbsp;default_type&nbsp;&nbsp;application/octet-stream;#处理接收的数据类型

&nbsp;&nbsp;&nbsp;&nbsp;server_names_hash_bucket_size&nbsp;128;
&nbsp;&nbsp;&nbsp;&nbsp;client_header_buffer_size&nbsp;32k;
&nbsp;&nbsp;&nbsp;&nbsp;large_client_header_buffers&nbsp;4&nbsp;32k;
&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;50m;

&nbsp;&nbsp;&nbsp;&nbsp;sendfile&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;tcp_nopush&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on;

&nbsp;&nbsp;&nbsp;&nbsp;keepalive_timeout&nbsp;60;
&nbsp;&nbsp;&nbsp;&nbsp;tcp_nodelay&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_connect_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_send_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_read_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffer_size&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffers&nbsp;4&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_busy_buffers_size&nbsp;128k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_temp_file_write_size&nbsp;256k;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;添加gzip压缩
&nbsp;&nbsp;&nbsp;&nbsp;gzip&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length&nbsp;&nbsp;1k;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;16k;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_http_version&nbsp;1.0;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_comp_level&nbsp;2;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text/plain&nbsp;application/x-javascript&nbsp;text/css&nbsp;application/xml;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_vary&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expired&nbsp;no-cache&nbsp;no-store&nbsp;private&nbsp;auth;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_disable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MSIE&nbsp;[1-6]\\.&quot;;

&nbsp;&nbsp;&nbsp;&nbsp;server_tokens&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过upstream处理均衡负载
&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;static.homeway&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.24:80;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;homeway&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;ip&nbsp;hash主要是对ip处理下，让下次访问时候，还是访问当前服务器，这样就不会导致session丢失
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip_hash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;weight权重，配置访问概率
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.59:80&nbsp;weight=10;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.94:80&nbsp;weight=5;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;80&nbsp;default;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;172.31.19.122;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm&nbsp;index.php;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#error_page&nbsp;&nbsp;&nbsp;404&nbsp;&nbsp;&nbsp;/404.html;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(js|css)?$&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12h;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;静态文件可以用CDN处理，本例子指向WEB3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(gif|jpg|jpeg|png|bmp|swf)$&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://static.homeway;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过均衡负载服务器指向WEB1、WEB2&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://homeway;&nbsp;&nbsp;#使用后端的web服务器&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_redirect&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;Host&nbsp;$host;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;10m;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_body_buffer_size&nbsp;128k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_connect_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_send_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_read_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffer_size&nbsp;4k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffers&nbsp;4&nbsp;32k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_busy_buffers_size&nbsp;64k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_temp_file_write_size&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_log&nbsp;&nbsp;/home/wwwlogs/access.log&nbsp;&nbsp;access;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;vhost/*.conf;
}</pre><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">核心指令”ip_hash”只能在upstream {}中使用。这条指令用于通知nginx使用ip hash负载均衡算法。如果没加这条指令，nginx会使用默认的round robin负载均衡模块，那么，你每次访问的服务器可能会不同，导致session丢失，一直要重新登录。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">关于upstream的源码分析，可以去看 tengine的介绍&nbsp;<a href="http://tengine.taobao.org/book/chapter_05.html" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://tengine.taobao.org/book/chapter_05.html</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">重启服务器下。</p><blockquote style="margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: " droid="" font-size:="" vertical-align:="" color:="" white-space:="" background-color:=""><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">/root/lnmp restart</p></blockquote><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">搞定了，确定WEB1，WEB2,WEB3可以正常访问就行了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">这样，假设，我在WEB1的web目录下放一个 fuck.php, WEB2不放，那么。当我访问<a href="http://172.31.19.122%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%9C%89%E6%97%B6%E5%80%99404%EF%BC%8C%E6%9C%89%E6%97%B6%E5%80%99%E8%BF%94%E5%9B%9E%E6%AD%A3%E5%B8%B8%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BF%99%E5%B0%B1%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82/" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://172.31.19.122时候，就会有时候404，有时候返回正常页面，这就表示成功了。</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/><p><br style="font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x05-关于服务性能" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x05-关于服务性能" class="headerlink" title="0x05.关于服务性能" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x05.关于服务性能</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">这个在目前不能做，因为无法做多用户并发访问，就算模拟器模拟效果也不能达到多用户并发的强度。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">Nginx的几个优点：</p><ul style="margin: 1.6em 20px; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" list-style-position:="" list-style-image:="" line-height:="" white-space:="" background-color:="" class=" list-paddingleft-2"><li><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">Nginx工作在网络的7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下LVS并不具备这样的功能，所以Nginx单凭这点可利用的场合就远多于LVS了；但Nginx有用的这些功能使其可调整度要高于LVS，所以经常要去触碰触碰，触碰多了，人为出问题的几率也就会大。</p></li><li><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可以考虑用其作为反向代理加速器。</p></li><li><p>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一</p></li></ul><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'like' => '0',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000282s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000800s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 44 LIMIT 1 [ RunTime:0.000389s ]
[ sql ] [ SQL ] UPDATE `think_article`  SET `title`='Nginx反向代理实现均衡负载',`cate_id`=19,`type`=0,`keyword`='Nginx,反向代理,实现,均衡负载',`remark`='为jue.so架设一个服务器集群。\n架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案',`content`='<h4 id=\"架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy-Keepalived是目前使用最广泛的三种方案\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案</h4><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x01-关于均衡负载\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x01-关于均衡负载\" class=\"headerlink\" title=\"0x01. 关于均衡负载\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x01. 关于均衡负载</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">其中Keepalived+HAProxy是一个高可用性方案。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">关于3者比较，可以看这篇博客<a href=\"http://www.rootop.org/pages/2773.html\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://www.rootop.org/pages/2773.html</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">工作在网络的7层之上，可以针对http应用做一些分流的策略。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x02-关于Nginx\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x02-关于Nginx\" class=\"headerlink\" title=\"0x02.关于Nginx\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x02.关于Nginx</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">nginx在启动后，在unix系统中会以daemon的方式在后台运行，后台进程包含一个master进程和多个worker进程。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">而基本的网络事件，则是放在worker进程中来处理了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">关于nginx，主要由3大模块，内核模块，事件模块，http核心模块。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">nginx模块一般被分成三大类：handler、filter和upstream。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/image/2014-12-04-nginx-work.png\" title=\"nginx工作模型\" class=\"fancybox\" rel=\"article0\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\"><img src=\"/ueditor/php/upload/image/20170808/1502173482462464.png\" alt=\"nginx工作模型\" style=\"margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;\"/></a><span class=\"caption\" style=\"margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;\">nginx工作模型</span></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x03-服务器集群环境\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x03-服务器集群环境\" class=\"headerlink\" title=\"0x03.服务器集群环境\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x03.服务器集群环境</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">接下来讲下想要搭的均衡负载环境。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/image/2014-12-04-nginx-load-balance.jpg\" title=\"Nginx服务器集群\" class=\"fancybox\" rel=\"article0\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\"><img src=\"/ueditor/php/upload/image/20170808/1502173485362157.jpg\" alt=\"Nginx服务器集群\" style=\"margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;\"/></a><span class=\"caption\" style=\"margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;\">Nginx服务器集群</span></p><pre style=\"margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: \" source=\"\" code=\"\" font-size:=\"\" vertical-align:=\"\" background-color:=\"\" overflow:=\"\" color:=\"\" line-height:=\"\">系统环境&nbsp;:&nbsp;Linux&nbsp;Centos&nbsp;7&nbsp;aws&nbsp;2.6.32-504.1.3.el6.x86_64&nbsp;Nginx&nbsp;Version:1.6.0均衡负载服务器：&nbsp;172.31.19.122:80(lnmp一键安装)WEB1:&nbsp;172.31.15.59:80WEB2:&nbsp;172.31.15.94:80WEB3:&nbsp;172.31.15.24:80</pre><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x04-负载Nginx配置\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x04-负载Nginx配置\" class=\"headerlink\" title=\"0x04.负载Nginx配置\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x04.负载Nginx配置</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">服务器用lnmp一键安装，自带的conf配置已经配置好一切了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">下面是完整的配置文件。</p><blockquote style=\"margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: \" droid=\"\" font-size:=\"\" vertical-align:=\"\" color:=\"\" white-space:=\"\" background-color:=\"\"><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">/usr/local/nginx/conf/nginx.conf</p></blockquote><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><pre style=\"margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: \" source=\"\" code=\"\" font-size:=\"\" vertical-align:=\"\" background-color:=\"\" overflow:=\"\" color:=\"\" line-height:=\"\">user&nbsp;&nbsp;www&nbsp;www;\nworker_processes&nbsp;auto;\nerror_log&nbsp;&nbsp;/home/wwwlogs/nginx_error.log&nbsp;&nbsp;crit;\npid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/local/nginx/logs/nginx.pid;\nworker_rlimit_nofile&nbsp;51200;\n\nevents&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;epoll;\n&nbsp;&nbsp;&nbsp;&nbsp;worker_connections&nbsp;51200;\n&nbsp;&nbsp;&nbsp;&nbsp;multi_accept&nbsp;on;\n}\n\nhttp&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mime.types;\n&nbsp;&nbsp;&nbsp;&nbsp;default_type&nbsp;&nbsp;application/octet-stream;#处理接收的数据类型\n\n&nbsp;&nbsp;&nbsp;&nbsp;server_names_hash_bucket_size&nbsp;128;\n&nbsp;&nbsp;&nbsp;&nbsp;client_header_buffer_size&nbsp;32k;\n&nbsp;&nbsp;&nbsp;&nbsp;large_client_header_buffers&nbsp;4&nbsp;32k;\n&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;50m;\n\n&nbsp;&nbsp;&nbsp;&nbsp;sendfile&nbsp;on;\n&nbsp;&nbsp;&nbsp;&nbsp;tcp_nopush&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on;\n\n&nbsp;&nbsp;&nbsp;&nbsp;keepalive_timeout&nbsp;60;\n&nbsp;&nbsp;&nbsp;&nbsp;tcp_nodelay&nbsp;on;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_connect_timeout&nbsp;300;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_send_timeout&nbsp;300;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_read_timeout&nbsp;300;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffer_size&nbsp;64k;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffers&nbsp;4&nbsp;64k;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_busy_buffers_size&nbsp;128k;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_temp_file_write_size&nbsp;256k;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;添加gzip压缩\n&nbsp;&nbsp;&nbsp;&nbsp;gzip&nbsp;on;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length&nbsp;&nbsp;1k;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;16k;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_http_version&nbsp;1.0;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_comp_level&nbsp;2;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text/plain&nbsp;application/x-javascript&nbsp;text/css&nbsp;application/xml;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_vary&nbsp;on;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expired&nbsp;no-cache&nbsp;no-store&nbsp;private&nbsp;auth;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_disable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MSIE&nbsp;[1-6]\\.&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;server_tokens&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过upstream处理均衡负载\n&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;static.homeway&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.24:80;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;homeway&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;ip&nbsp;hash主要是对ip处理下，让下次访问时候，还是访问当前服务器，这样就不会导致session丢失\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip_hash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;weight权重，配置访问概率\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.59:80&nbsp;weight=10;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.94:80&nbsp;weight=5;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;80&nbsp;default;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;172.31.19.122;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm&nbsp;index.php;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#error_page&nbsp;&nbsp;&nbsp;404&nbsp;&nbsp;&nbsp;/404.html;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(js|css)?$&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12h;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;静态文件可以用CDN处理，本例子指向WEB3\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(gif|jpg|jpeg|png|bmp|swf)$&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://static.homeway;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过均衡负载服务器指向WEB1、WEB2&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://homeway;&nbsp;&nbsp;#使用后端的web服务器&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_redirect&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;Host&nbsp;$host;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;10m;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_body_buffer_size&nbsp;128k;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_connect_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_send_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_read_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffer_size&nbsp;4k;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffers&nbsp;4&nbsp;32k;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_busy_buffers_size&nbsp;64k;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_temp_file_write_size&nbsp;64k;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_log&nbsp;&nbsp;/home/wwwlogs/access.log&nbsp;&nbsp;access;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;vhost/*.conf;\n}</pre><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">核心指令”ip_hash”只能在upstream {}中使用。这条指令用于通知nginx使用ip hash负载均衡算法。如果没加这条指令，nginx会使用默认的round robin负载均衡模块，那么，你每次访问的服务器可能会不同，导致session丢失，一直要重新登录。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">关于upstream的源码分析，可以去看 tengine的介绍&nbsp;<a href=\"http://tengine.taobao.org/book/chapter_05.html\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://tengine.taobao.org/book/chapter_05.html</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">重启服务器下。</p><blockquote style=\"margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: \" droid=\"\" font-size:=\"\" vertical-align:=\"\" color:=\"\" white-space:=\"\" background-color:=\"\"><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">/root/lnmp restart</p></blockquote><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">搞定了，确定WEB1，WEB2,WEB3可以正常访问就行了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">这样，假设，我在WEB1的web目录下放一个 fuck.php, WEB2不放，那么。当我访问<a href=\"http://172.31.19.122%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%9C%89%E6%97%B6%E5%80%99404%EF%BC%8C%E6%9C%89%E6%97%B6%E5%80%99%E8%BF%94%E5%9B%9E%E6%AD%A3%E5%B8%B8%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BF%99%E5%B0%B1%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82/\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://172.31.19.122时候，就会有时候404，有时候返回正常页面，这就表示成功了。</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x05-关于服务性能\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x05-关于服务性能\" class=\"headerlink\" title=\"0x05.关于服务性能\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x05.关于服务性能</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">这个在目前不能做，因为无法做多用户并发访问，就算模拟器模拟效果也不能达到多用户并发的强度。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">Nginx的几个优点：</p><ul style=\"margin: 1.6em 20px; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" list-style-position:=\"\" list-style-image:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\" class=\" list-paddingleft-2\"><li><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">Nginx工作在网络的7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下LVS并不具备这样的功能，所以Nginx单凭这点可利用的场合就远多于LVS了；但Nginx有用的这些功能使其可调整度要高于LVS，所以经常要去触碰触碰，触碰多了，人为出问题的几率也就会大。</p></li><li><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可以考虑用其作为反向代理加速器。</p></li><li><p>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一</p></li></ul><p><br/></p>',`is_tui`=1,`status`=1,`views`=1,`like`=0,`auth`='韩会强',`ip`='123.233.116.122',`update_time`=1502173523  WHERE  `id` = 44 [ RunTime:0.004312s ]

---------------------------------------------------------------
[ 2017-08-08T14:25:26+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.027144s][吞吐率：36.84req/s] [内存消耗：3,926.93kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/44/html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000323s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000847s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000171s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001058s ]

---------------------------------------------------------------
[ 2017-08-08T14:25:26+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.043041s][吞吐率：23.23req/s] [内存消耗：3,858.19kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000308s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000795s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000153s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001123s ]

---------------------------------------------------------------
[ 2017-08-08T14:28:33+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.022897s][吞吐率：43.67req/s] [内存消耗：2,987.10kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000295s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000777s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000206s ]

---------------------------------------------------------------
[ 2017-08-08T14:30:35+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.357584s][吞吐率：2.80req/s] [内存消耗：4,080.51kb] [文件加载：61]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '269253',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundaryWaehKrVEpLIQnt6L',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => '浅析分布式系统',
  'cate_id' => '27',
  'type' => '0',
  'keyword' => '分布式系统',
  'remark' => '我们常常会听说，某个互联网应用的服务器端系统多么牛逼，比如QQ、微信、淘宝。那么，一个互联网应用的服务器端系统，到底牛逼在什么地方？为什么海量的用户访问，会让一个服务器端系统变得更复杂？本文就是想从最基本的地方开始，探寻服务器端系统技术的基础概念。',
  'content' => '<h1 id="articleHeader0" style="box-sizing: border-box; font-size: 2.25em; margin: 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">WeTest导读</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">我们常常会听说，某个互联网应用的服务器端系统多么牛逼，比如QQ、微信、淘宝。那么，一个互联网应用的服务器端系统，到底牛逼在什么地方？为什么海量的用户访问，会让一个服务器端系统变得更复杂？本文就是想从最基本的地方开始，探寻服务器端系统技术的基础概念。</p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"/><h2 id="articleHeader1" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">承载量是分布式系统存在的原因</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">当一个互联网业务获得大众欢迎的时候，最显著碰到的技术问题，就是服务器非常繁忙。当每天有1000万个用户访问你的网站时，无论你使用什么样的服务器硬件，都不可能只用一台机器就承载的了。因此，在互联网程序员解决服务器端问题的时候，必须要考虑如何使用多台服务器，为同一种互联网应用提供服务，这就是所谓“分布式系统”的来源。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">然而，大量用户访问同一个互联网业务，所造成的问题并不简单。从表面上看，要能满足很多用户来自互联网的请求，最基本的需求就是所谓性能需求：用户反应网页打开很慢，或者网游中的动作很卡等等。而这些对于“服务速度”的要求，实际上包含的部分却是以下几个：高吞吐、高并发、低延迟和负载均衡。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">高吞吐，意味着你的系统，可以同时承载大量的用户使用。这里关注的整个系统能同时服务的用户数。这个吞吐量肯定是不可能用单台服务器解决的，因此需要多台服务器协作，才能达到所需要的吞吐量。而在多台服务器的协作中，如何才能有效的利用这些服务器，不致于其中某一部分服务器成为瓶颈，从而影响整个系统的处理能力，这就是一个分布式系统，在架构上需要仔细权衡的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">高并发是高吞吐的一个延伸需求。当我们在承载海量用户的时候，我们当然希望每个服务器都能尽其所能的工作，而不要出现无谓的消耗和等待的情况。然而，软件系统并不是简单的设计，就能对同时处理多个任务，做到“尽量多”的处理。很多时候，我们的程序会因为要选择处理哪个任务，而导致额外的消耗。这也是分布式系统解决的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">低延迟对于人数稀少的服务来说不算什么问题。然而，如果我们需要在大量用户访问的时候，也能很快的返回计算结果，这就要困难的多。因为除了大量用户访问可能造成请求在排队外，还有可能因为排队的长度太长，导致内存耗尽、带宽占满等空间性的问题。如果因为排队失败而采取重试的策略，则整个延迟会变的更高。所以分布式系统会采用很多请求分拣和分发的做法，尽快的让更多的服务器来出来用户的请求。但是，由于一个数量庞大的分布式系统，必然需要把用户的请求经过多次的分发，整个延迟可能会因为这些分发和转交的操作，变得更高，所以分布式系统除了分发请求外，还要尽量想办法减少分发的层次数，以便让请求能尽快的得到处理。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKkz?w=554&amp;h=421" src="https://segmentfault.com/img/bVNKkz?w=554&h=421" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">由于互联网业务的用户来自全世界，因此在物理空间上可能来自各种不同延迟的网络和线路，在时间上也可能来自不同的时区，所以要有效的应对这种用户来源的复杂性，就需要把多个服务器部署在不同的空间来提供服务。同时，我们也需要让同时发生的请求，有效的让多个不同服务器承载。所谓的负载均衡，就是分布式系统与生俱来需要完成的功课。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">由于分布式系统，几乎是解决互联网业务承载量问题，的最基本方法，所以作为一个服务器端程序员，掌握分布式系统技术就变得异常重要了。然而，分布式系统的问题，并非是学会用几个框架和使用几个库，就能轻易解决的，因为当一个程序在一个电脑上运行，变成了又无数个电脑上同时协同运行，在开发、运维上都会带来很大的差别。</p><h2 id="articleHeader2" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">分布式系统提高承载量的基本手段</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">分层模型（路由、代理）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">使用多态服务器来协同完成计算任务，最简单的思路就是，让每个服务器都能完成全部的请求，然后把请求随机的发给任何一个服务器处理。最早期的互联网应用中，DNS轮询就是这样的做法：当用户输入一个域名试图访问某个网站，这个域名会被解释成多个IP地址中的一个，随后这个网站的访问请求，就被发往对应IP的服务器了，这样多个服务器（多个IP地址）就能一起解决处理大量的用户请求。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">然而，单纯的请求随机转发，并不能解决一切问题。比如我们很多互联网业务，都是需要用户登录的。在登录某一个服务器后，用户会发起多个请求，如果我们把这些请求随机的转发到不同的服务器上，那么用户登录的状态就会丢失，造成一些请求处理失败。简单的依靠一层服务转发是不够的，所以我们会增加一批服务器，这些服务器会根据用户的Cookie，或者用户的登录凭据，来再次转发给后面具体处理业务的服务器。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">除了登录的需求外，我们还发现，很多数据是需要数据库来处理的，而我们的这些数据往往都只能集中到一个数据库中，否则在查询的时候就会丢失其他服务器上存放的数据结果。所以往往我们还会把数据库单独出来成为一批专用的服务器。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">至此，我们就会发现，一个典型的三层结构出现了：接入、逻辑、存储。然而，这种三层结果，并不就能包医百病。例如，当我们需要让用户在线互动（网游就是典型） ，那么分割在不同逻辑服务器上的在线状态数据，是无法知道对方的，这样我们就需要专门做一个类似互动服务器的专门系统，让用户登录的时候，也同时记录一份数据到它那里，表明某个用户登录在某个服务器上，而所有的互动操作，要先经过这个互动服务器，才能正确的把消息转发到目标用户的服务器上。&nbsp;<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKkN?w=554&amp;h=346" src="https://segmentfault.com/img/bVNKkN?w=554&h=346" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">又例如，当我们在使用网上论坛（BBS）系统的时候，我们发的文章，不可能只写入一个数据库里，因为太多人的阅读请求会拖死这个数据库。我们常常会按论坛板块来写入不同的数据库，又或者是同时写入多个数据库。这样把文章数据分别存放到不同的服务器上，才能应对大量的操作请求。然而，用户在读取文章的时候，就需要有一个专门的程序，去查找具体文章在哪一个服务器上，这时候我们就要架设一个专门的代理层，把所有的文章请求先转交给它，由它按照我们预设的存储计划，去找对应的数据库获取数据。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">根据上面的例子来看，分布式系统虽然具有三层典型的结构，但是实际上往往不止有三层，而是根据业务需求，会设计成多个层次的。为了把请求转交给正确的进程处理，我们而设计很多专门用于转发请求的进程和服务器。这些进程我们常常以Proxy或者Router来命名，一个多层结构常常会具备各种各样的Proxy进程。这些代理进程，很多时候都是通过TCP来连接前后两端。然而，TCP虽然简单，但是却会有故障后不容易恢复的问题。而且TCP的网络编程，也是有点复杂的。——所以，人们设计出更好进程间通讯机制：消息队列。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKkQ?w=553&amp;h=365" src="https://segmentfault.com/img/bVNKkQ?w=553&h=365" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">尽管通过各种Proxy或者Router进程能组建出强大的分布式系统，但是其管理的复杂性也是非常高的。所以人们在分层模式的基础上，想出了更多的方法，来让这种分层模式的程序变得更简单高效的方法。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">并发模型（多线程、异步）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">当我们在编写服务器端程序是，我们会明确的知道，大部分的程序，都是会处理同时到达的多个请求的。因此我们不能好像HelloWorld那么简单的，从一个简单的输入计算出输出来。因为我们会同时获得很多个输入，需要返回很多个输出。在这些处理的过程中，往往我们还会碰到需要“等待”或“阻塞”的情况，比如我们的程序要等待数据库处理结果，等待向另外一个进程请求结果等等……如果我们把请求一个挨着一个的处理，那么这些空闲的等待时间将白白浪费，造成用户的响应延时增加，以及整体系统的吞吐量极度下降。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">所以在如何同时处理多个请求的问题上，业界有2个典型的方案。一种是多线程，一种是异步。在早期的系统中，多线程或多进程是最常用的技术。这种技术的代码编写起来比较简单，因为每个线程中的代码都肯定是按先后顺序执行的。但是由于同时运行着多个线程，所以你无法保障多个线程之间的代码的先后顺序。这对于需要处理同一个数据的逻辑来说，是一个非常严重的问题，最简单的例子就是显示某个新闻的阅读量。两个++操作同时运行，有可能结果只加了1，而不是2。所以多线程下，我们常常要加很多数据的锁，而这些锁又反过来可能导致线程的死锁。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">因此异步回调模型在随后比多线程更加流行，除了多线程的死锁问题外，异步还能解决多线程下，线程反复切换导致不必要的开销的问题：每个线程都需要一个独立的栈空间，在多线程并行运行的时候，这些栈的数据可能需要来回的拷贝，这额外消耗了CPU。同时由于每个线程都需要占用栈空间，所以在大量线程存在的时候，内存的消耗也是巨大的。而异步回调模型则能很好的解决这些问题，不过异步回调更像是“手工版”的并行处理，需要开发者自己去实现如何“并行”的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">异步回调基于非阻塞的I/O操作（网络和文件），这样我们就不用在调用读写函数的时候“卡”在那一句函数调用，而是立刻返回“有无数据”的结果。而Linux的epoll技术，则利用底层内核的机制，让我们可以快速的“查找”到有数据可以读写的连接文件。由于每个操作都是非阻塞的，所以我们的程序可以只用一个进程，就处理大量并发的请求。因为只有一个进程，所以所有的数据处理，其顺序都是固定的，不可能出现多线程中，两个函数的语句交错执行的情况，因此也不需要各种“锁”。从这个角度看，异步非阻塞的技术，是大大简化了开发的过程。由于只有一个线程，也不需要有线程切换之类的开销，所以异步非阻塞成为很多对吞吐量、并发有较高要求的系统首选。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKkX?w=554&amp;h=364" src="https://segmentfault.com/img/bVNKkX?w=554&h=364" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">int epoll_create(int size)；//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">缓冲技术</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">在互联网服务中，大部分的用户交互，都是需要立刻返回结果的，所以对于延迟有一定的要求。而类似网络游戏之类服务，延迟更是要求缩短到几十毫秒以内。所以为了降低延迟，缓冲是互联网服务中最常见的技术之一。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">早期的WEB系统中，如果每个HTTP请求的处理，都去数据库（MySQL）读写一次，那么数据库很快就会因为连接数占满而停止响应。因为一般的数据库，支持的连接数都只有几百，而WEB的应用的并发请求，轻松能到几千。这也是很多设计不良的网站人一多就卡死的最直接原因。为了尽量减少对数据库的连接和访问，人们设计了很多缓冲系统——把从数据库中查询的结果存放到更快的设施上，如果没有相关联的修改，就直接从这里读。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">最典型的WEB应用缓冲系统是Memcache。由于PHP本身的线程结构，是不带状态的。早期PHP本身甚至连操作“堆”内存的方法都没有，所以那些持久的状态，就一定要存放到另外一个进程里。而Memcache就是一个简单可靠的存放临时状态的开源软件。很多PHP应用现在的处理逻辑，都是先从数据库读取数据，然后写入Memcache；当下次请求来的时候，先尝试从Memcache里面读取数据，这样就有可能大大减少对数据库的访问。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKk6?w=333&amp;h=375" src="https://segmentfault.com/img/bVNKk6?w=333&h=375" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">然而Memcache本身是一个独立的服务器进程，这个进程自身并不带特别的集群功能。也就是说这些Memcache进程，并不能直接组建成一个统一的集群。如果一个Memcache不够用，我们就要手工用代码去分配，哪些数据应该去哪个Memcache进程。——这对于真正的大型分布式网站来说，管理一个这样的缓冲系统，是一个很繁琐的工作。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">因此人们开始考虑设计一些更高效的缓冲系统：从性能上来说，Memcache的每笔请求，都要经过网络传输，才能去拉取内存中的数据。这无疑是有一点浪费的，因为请求者本身的内存，也是可以存放数据的。——这就是促成了很多利用请求方内存的缓冲算法和技术，其中最简单的就是使用LRU算法，把数据放在一个哈希表结构的堆内存中。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">而Memcache的不具备集群功能，也是一个用户的痛点。于是很多人开始设计，如何让数据缓存分不到不同的机器上。最简单的思路是所谓读写分离，也就是缓存每次写，都写到多个缓冲进程上记录，而读则可以随机读任何一个进程。在业务数据有明显的读写不平衡差距上，效果是非常好的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">然而，并不是所有的业务都能简单的用读写分离来解决问题，比如一些在线互动的互联网业务，比如社区、游戏。这些业务的数据读写频率并没很大的差异，而且也要求很高的延迟。因此人们又再想办法，把本地内存和远端进程的内存缓存结合起来使用，让数据具备两级缓存。同时，一个数据不在同时的复制存在所有的缓存进程上，而是按一定规律分布在多个进程上。——这种分布规律使用的算法，最流行的就是所谓“一致性哈希”。这种算法的好处是，当某一个进程失效挂掉，不需要把整个集群中所有的缓存数据，都重新修改一次位置。你可以想象一下，如果我们的数据缓存分布，是用简单的以数据的ID对进程数取模，那么一旦进程数变化，每个数据存放的进程位置都可能变化，这对于服务器的故障容忍是不利的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">Orcale公司旗下有一款叫Coherence的产品，是在缓存系统上设计比较好的。这个产品是一个商业产品，支持利用本地内存缓存和远程进程缓存协作。集群进程是完全自管理的，还支持在数据缓存所在进程，进行用户定义的计算（处理器功能），这就不仅仅是缓存了，还是一个分布式的计算系统。&nbsp;<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlc?w=553&amp;h=283" src="https://segmentfault.com/img/bVNKlc?w=553&h=283" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">存储技术（NoSQL）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">相信CAP理论大家已经耳熟能详，然而在互联发展的早期，大家都还在使用MySQL的时候，如何让数据库存放更多的数据，承载更多的连接，很多团队都是绞尽脑汁。甚至于有很多业务，主要的数据存储方式是文件，数据库反而变成是辅助的设施了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlh?w=554&amp;h=477" src="https://segmentfault.com/img/bVNKlh?w=554&h=477" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">然而，当NoSQL兴起，大家突然发现，其实很多互联网业务，其数据格式是如此的简单，很多时候根部不需要关系型数据库那种复杂的表格。对于索引的要求往往也只是根据主索引搜索。而更复杂的全文搜索，本身数据库也做不到。所以现在相当多的高并发的互联网业务，首选NoSQL来做存储设施。最早的NoSQL数据库有MangoDB等，现在最流行的似乎就是Redis了。甚至有些团队，把Redis也当成缓冲系统的一部分，实际上也是认可Redis的性能优势。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">NoSQL除了更快、承载量更大以外，更重要的特点是，这种数据存储方式，只能按照一条索引来检索和写入。这样的需求约束，带来了分布上的好处，我们可以按这条主索引，来定义数据存放的进程（服务器）。这样一个数据库的数据，就能很方便的存放在不同的服务器上。在分布式系统的必然趋势下，数据存储层终于也找到了分布的方法。</p><h2 id="articleHeader3" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">分布式系统在可管理性上造成的问题</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">分布式系统并不是简单的把一堆服务器一起运行起来就能满足需求的。对比单机或少量服务器的集群，有一些特别需要解决的问题等待着我们。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">硬件故障率</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">所谓分布式系统，肯定就不是只有一台服务器。假设一台服务器的平均故障时间是1%，那么当你有100台服务器的时候，那就几乎总有一台是在故障的。虽然这个比方不一定很准确，但是，当你的系统所涉及的硬件越来越多，硬件的故障也会从偶然事件变成一个必然事件。一般我们在写功能代码的时候，是不会考虑到硬件故障的时候应该怎么办的。而如果在编写分布式系统的时候，就一定需要面对这个问题了。否则，很可能只有一台服务器出故障，整个数百台服务器的集群都工作不正常了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlo?w=554&amp;h=185" src="https://segmentfault.com/img/bVNKlo?w=554&h=185" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">除了服务器自己的内存、硬盘等故障，服务器之间的网络线路故障更加常见。而且这种故障还有可能是偶发的，或者是会自动恢复的。面对这种问题，如果只是简单的把“出现故障”的机器剔除出去，那还是不够的。因为网络可能过一会儿就又恢复了，而你的集群可能因为这一下的临时故障，丢失了过半的处理能力。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">如何让分布式系统，在各种可能随时出现故障的情况下，尽量的自动维护和维持对外服务，成为了编写程序就要考虑的问题。由于要考虑到这种故障的情况，所以我们在设计架构的时候，也要有意识的预设一些冗余、自我维护的功能。这些都不是产品上的业务需求，完全就是技术上的功能需求。能否在这方面提出对的需求，然后正确的实现，是服务器端程序员最重要的职责之一。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">资源利用率优化</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">在分布式系统的集群，包含了很多个服务器，当这样一个集群的硬件承载能力到达极限的时候，最自然的想法就是增加更多的硬件。然而，一个软件系统不是那么容易就可以通过“增加”硬件来提高承载性能的。因为软件在多个服务器上的工作，是需要有复杂细致的协调工作。在对一个集群扩容的时候，我们往往会要停掉整个集群的服务，然后修改各种配置，最后才能重新启动一个加入了新的服务器的集群。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlA?w=554&amp;h=352" src="https://segmentfault.com/img/bVNKlA?w=554&h=352" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">由于在每个服务器的内存里，都可能会有一些用户使用的数据，所以如果冒然在运行的时候，就试图修改集群中提供服务的配置，很可能会造成内存数据的丢失和错误。因此，运行时扩容在对无状态的服务上，是比较容易的，比如增加一些Web服务器。但如果是在有状态的服务上，比如网络游戏，几乎是不可能进行简单的运行时扩容的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">分布式集群除了扩容，还有缩容的需求。当用户人数下降，服务器硬件资源出现空闲的时候，我们往往需要这些空闲的资源能利用起来，放到另外一些新的服务集群里去。缩容和集群中有故障需要容灾有一定类似之处，区别是缩容的时间点和目标是可预期的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">由于分布式集群中的扩容、缩容，以及希望尽量能在线操作，这导致了非常复杂的技术问题需要处理，比如集群中互相关联的配置如何正确高效的修改、如何对有状态的进程进行操作、如何在扩容缩容的过程中保证集群中节点之间通信的正常。作为服务器端程序员，会需要花费大量的经历，来对多个进程的集群状态变化，造成的一系列问题进行专门的开发。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">软件服务内容更新</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">现在都流行用敏捷开发模式中的“迭代”，来表示一个服务不断的更新程序，满足新的需求，修正BUG。如果我们仅仅管理一台服务器，那么更新这一台服务器上的程序，是非常简单的：只要把软件包拷贝过去，然后修改下配置就好。但是如果你要对成百上千的服务器去做同样的操作，就不可能每台服务器登录上去处理。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">服务器端的程序批量安装部署工具，是每个分布式系统开发者都需要的。然而，我们的安装工作除了拷贝二进制文件和配置文件外，还会有很多其他的操作。比如打开防火墙、建立共享内存文件、修改数据库表结构、改写一些数据文件等等……甚至有一些还要在服务器上安装新的软件。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlK?w=499&amp;h=314" src="https://segmentfault.com/img/bVNKlK?w=499&h=314" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">如果我们在开发服务器端程序的时候，就考虑到软件更新、版本升级的问题，那么我们对于配置文件、命令行参数、系统变量的使用，就会预先做一定的规划，这能让安装部署的工具运行更快，可靠性更高。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">除了安装部署的过程，还有一个重要的问题，就是不同版本间数据的问题。我们在升级版本的时候，旧版本程序生成的一些持久化数据，一般都是旧的数据格式的；而我们升级版本中如果涉及修改了数据格式，比如数据表结果，那么这些旧格式的数据，都要转换改写成新版本的数据格式才行。这导致了我们在设计数据结构的时候，就要考虑清楚这些表格的结构，是用最简单直接的表达方式，来让将来的修改更简单；还是一早就预计到修改的范围，专门预设一些字段，或者使用其他形式存放数据。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">除了持久化数据以外，如果存在客户端程序（如受击APP），这些客户端程序的升级往往不能和服务器同步，如果升级的内容包含了通信协议的修改，这就造成了我们必须为不同的版本部署不同的服务器端系统的问题。为了避免同时维护多套服务器，我们在软件开发的时候，往往倾向于所谓“版本兼容”的协议定义方式。而怎样设计的协议才能有很好的兼容性，又是服务器端程序需要仔细考虑的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">数据统计和决策</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">一般来说，分布式系统的日志数据，都是被集中到一起，然后统一进行统计的。然而，当集群的规模到一定程度的时候，这些日志的数据量会变得非常恐怖。很多时候，统计一天的日志量，要消耗计算机运行一天以上的时间。所以，日志统计这项工作，也变成一门非常专业的活动。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">经典的分布式统计模型，有Google的Map Reduce模型。这种模型既有灵活性，也能利用大量服务器进行统计工作。但是缺点是易用性往往不够好，因为这些数据的统计和我们常见的SQL数据表统计有非常大的差异，所以我们最后还是常常把数据丢到MySQL里面去做更细层面的统计。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKl3?w=554&amp;h=335" src="https://segmentfault.com/img/bVNKl3?w=554&h=335" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">由于分布式系统日志数量的庞大，以及日志复杂程度的提高。我们变得必须要掌握类似Map Reduce技术，才能真正的对分布式系统进行数据统计。而且我们还需要想办法提高统计工作的工作效率。</p><h2 id="articleHeader4" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">解决分布式系统可管理性的基本手段</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">目录服务（ZooKeeper）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">分布式系统是一个由很多进程组成的整体，这个整体中每个成员部分，都会具备一些状态，比如自己的负责模块，自己的负载情况，对某些数据的掌握等等。而这些和其他进程相关的数据，在故障恢复、扩容缩容的时候变得非常重要。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">简单的分布式系统，可以通过静态的配置文件，来记录这些数据：进程之间的连接对应关系，他们的IP地址和端口，等等。然而一个自动化程度高的分布式系统，必然要求这些状态数据都是动态保存的。这样才能让程序自己去做容灾和负载均衡的工作。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">一些程序员会专门自己编写一个DIR服务（目录服务），来记录集群中进程的运行状态。集群中进程会和这个DIR服务产生自动关联，这样在容灾、扩容、负载均衡的时候，就可以自动根据这些DIR服务里的数据，来调整请求的发送目地，从而达到绕开故障机器、或连接到新的服务器的操作。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVCxVV?w=529&amp;h=319" src="https://segmentfault.com/img/bVCxVV?w=529&h=319" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">然而，如果我们只是用一个进程来充当这个工作。那么这个进程就成为了这个集群的“单点”——意思就是，如果这个进程故障了，那么整个集群可能都无法运行的。所以存放集群状态的目录服务，也需要是分布式的。幸好我们有ZooKeeper这个优秀的开源软件，它正是一个分布式的目录服务区。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">ZooKeeper可以简单启动奇数个进程，来形成一个小的目录服务集群。这个集群会提供给所有其他进程，进行读写其巨大的“配置树”的能力。这些数据不仅仅会存放在一个ZooKeeper进程中，而是会根据一套非常安全的算法，让多个进程来承载。这让ZooKeeper成为一个优秀的分布式数据保存系统。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">由于ZooKeeper的数据存储结构，是一个类似文件目录的树状系统，所以我们常常会利用它的功能，把每个进程都绑定到其中一个“分枝”上，然后通过检查这些“分支”，来进行服务器请求的转发，就能简单的解决请求路由（由谁去做）的问题。另外还可以在这些“分支”上标记进程的负载的状态，这样负载均衡也很容易做了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">目录服务是分布式系统中最关键的组件之一。而ZooKeeper是一个很好的开源软件，正好是用来完成这个任务。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">消息队列服务（ActiveMQ、ZeroMQ、Jgroups）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">两个进程间如果要跨机器通讯，我们几乎都会用TCP/UDP这些协议。但是直接使用网络API去编写跨进程通讯，是一件非常麻烦的事情。除了要编写大量的底层socket代码外，我们还要处理诸如：如何找到要交互数据的进程，如何保障数据包的完整性不至于丢失，如果通讯的对方进程挂掉了，或者进程需要重启应该怎样等等这一系列问题。这些问题包含了容灾扩容、负载均衡等一系列的需求。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">为了解决分布式系统进程间通讯的问题，人们总结出了一个有效的模型，就是“消息队列”模型。消息队列模型，就是把进程间的交互，抽象成对一个个消息的处理，而对于这些消息，我们都有一些“队列”，也就是管道，来对消息进行暂存。每个进程都可以访问一个或者多个队列，从里面读取消息（消费）或写入消息（生产）。由于有一个缓存的管道，我们可以放心的对进程状态进行变化。当进程起来的时候，它会自动去消费消息就可以了。而消息本身的路由，也是由存放的队列决定的，这样就把复杂的路由问题，变成了如何管理静态的队列的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">一般的消息队列服务，都是提供简单的“投递”和“收取”两个接口，但是消息队列本身的管理方式却比较复杂，一般来说有两种。一部分的消息队列服务，提倡点对点的队列管理方式：每对通信节点之间，都有一个单独的消息队列。这种做法的好处是不同来源的消息，可以互不影响，不会因为某个队列的消息过多，挤占了其他队列的消息缓存空间。而且处理消息的程序也可以自己来定义处理的优先级——先收取、多处理某个队列，而少处理另外一些队列。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">但是这种点对点的消息队列，会随着集群的增长而增加大量的队列，这对于内存占用和运维管理都是一个复杂的事情。因此更高级的消息队列服务，开始可以让不同的队列共享内存空间，而消息队列的地址信息、建立和删除，都采用自动化的手段。——这些自动化往往需要依赖上文所述的“目录服务”，来登记队列的ID对应的物理IP和端口等信息。比如很多开发者使用ZooKeeper来充当消息队列服务的中央节点；而类似Jgropus这类软件，则自己维护一个集群状态来存放各节点今昔。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKmq?w=554&amp;h=300" src="https://segmentfault.com/img/bVNKmq?w=554&h=300" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">另外一种消息队列，则类似一个公共的邮箱。一个消息队列服务就是一个进程，任何使用者都可以投递或收取这个进程中的消息。这样对于消息队列的使用更简便，运维管理也比较方便。不过这种用法下，任何一个消息从发出到处理，最少进过两次进程间通信，其延迟是相对比较高的。并且由于没有预定的投递、收取约束，所以也比较容易出BUG。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">不管使用那种消息队列服务，在一个分布式服务器端系统中，进程间通讯都是必须要解决的问题，所以作为服务器端程序员，在编写分布式系统代码的时候，使用的最多的就是基于消息队列驱动的代码，这也直接导致了EJB3.0把“消息驱动的Bean”加入到规范之中。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">事务系统</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">在分布式的系统中，事务是最难解决的技术问题之一。由于一个处理可能分布在不同的处理进程上，任何一个进程都可能出现故障，而这个故障问题则需要导致一次回滚。这种回滚大部分又涉及多个其他的进程。这是一个扩散性的多进程通讯问题。要在分布式系统上解决事务问题，必须具备两个核心工具：一个是稳定的状态存储系统；另外一个是方便可靠的广播系统。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKmy?w=554&amp;h=236" src="https://segmentfault.com/img/bVNKmy?w=554&h=236" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">事务中任何一步的状态，都必须在整个集群中可见，并且还要有容灾的能力。这个需求，一般还是由集群的“目录服务”来承担。如果我们的目录服务足够健壮，那么我们可以把每步事务的处理状态，都同步写到目录服务上去。ZooKeeper再次在这个地方能发挥重要的作用。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">如果事务发生了中断，需要回滚，那么这个过程会涉及到多个已经执行过的步骤。也许这个回滚只需要在入口处回滚即可（加入那里有保存回滚所需的数据），也可能需要在各个处理节点上回滚。如果是后者，那么就需要集群中出现异常的节点，向其他所有相关的节点广播一个“回滚！事务ID是XXXX”这样的消息。这个广播的底层一般会由消息队列服务来承载，而类似Jgroups这样的软件，直接提供了广播服务。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">虽然现在我们在讨论事务系统，但实际上分布式系统经常所需的“分布式锁”功能，也是这个系统可以同时完成的。所谓的“分布式锁”，也就是一种能让各个节点先检查后执行的限制条件。如果我们有高效而单子操作的目录服务，那么这个锁状态实际上就是一种“单步事务”的状态记录，而回滚操作则默认是“暂停操作，稍后再试”。这种“锁”的方式，比事务的处理更简单，因此可靠性更高，所以现在越来越多的开发人员，愿意使用这种“锁”服务，而不是去实现一个“事务系统”。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKmI?w=356&amp;h=345" src="https://segmentfault.com/img/bVNKmI?w=356&h=345" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">自动部署工具（Docker）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">由于分布式系统最大的需求，是在运行时（有可能需要中断服务）来进行服务容量的变更：扩容或者缩容。而在分布式系统中某些节点故障的时候，也需要新的节点来恢复工作。这些如果还是像老式的服务器管理方式，通过填表、申报、进机房、装服务器、部署软件……这一套做法，那效率肯定是不行。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">在分布式系统的环境下，我们一般都是采用“池”的方式来管理服务。我们预先会申请一批机器，然后在某些机器上运行服务软件，另外一些则作为备份。显然我们这一批服务器不可能只为某一个业务服务，而是会提供多个不同的业务承载。那些备份的服务器，则会成为多个业务的通用备份“池”。随着业务需求的变化，一些服务器可能“退出”A服务而“加入”B服务。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">这种频繁的服务变化，依赖高度自动的软件部署工具。我们的运维人员，应该掌握这开发人员提供的部署工具，而不是厚厚的手册，来进行这类运维操作。一些比较有经验的开发团队，会统一所有的业务底层框架，以期大部分的部署、配置工具，都能用一套通用的系统来进行管理。而开源界，也有类似的尝试，最广为人知的莫过于RPM安装包格式，然而RPM的打包方式还是太复杂，不太符合服务器端程序的部署需求。所以后来又出现了Chef为代表的，可编程的通用部署系统。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKmR?w=500&amp;h=415" src="https://segmentfault.com/img/bVNKmR?w=500&h=415" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">然而，当NoSQL兴起，大家突然发现，其实很多互联网业务，其数据格式是如此的简单，很多时候根部不需要关系型数据库那种复杂的表格。对于索引的要求往往也只是根据主索引搜索。而更复杂的全文搜索，本身数据库也做不到。所以现在相当多的高并发的互联网业务，首选NoSQL来做存储设施。最早的NoSQL数据库有MangoDB等，现在最流行的似乎就是Redis了。甚至有些团队，把Redis也当成缓冲系统的一部分，实际上也是认可Redis的性能优势。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">NoSQL除了更快、承载量更大以外，更重要的特点是，这种数据存储方式，只能按照一条索引来检索和写入。这样的需求约束，带来了分布上的好处，我们可以按这条主索引，来定义数据存放的进程（服务器）。这样一个数据库的数据，就能很方便的存放在不同的服务器上。在分布式系统的必然趋势下，数据存储层终于也找到了分布的方法。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKne?w=554&amp;h=312" src="https://segmentfault.com/img/bVNKne?w=554&h=312" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">为了管理大量的分布式服务器端进程，我们确实需要花很多功夫，其优化其部署管理的工作。统一服务器端进程的运行规范，是实现自动化部署管理的基本条件。我们可以根据“操作系统”作为规范，采用Docker技术；也可以根据“Web应用”作为规范，采用某些PaaS平台技术；或者自己定义一些更具体的规范，自己开发完整的分布式计算平台。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">日志服务（log4j）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">服务器端的日志，一直是一个既重要又容易被忽视的问题。很多团队在刚开始的时候，仅仅把日志视为开发调试、排除BUG的辅助工具。但是很快会发现，在服务运营起来之后，日志几乎是服务器端系统，在运行时可以用来了解程序情况的唯一有效手段。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">尽管我们有各种profile工具，但是这些工具大部分都不适合在正式运营的服务上开启，因为会严重降低其运行性能。所以我们更多的时候需要根据日志来分析。尽管日志从本质上，就是一行行的文本信息，但是由于其具有很大的灵活性，所以会很受开发和运维人员的重视。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">日志本身从概念上，是一个很模糊的东西。你可以随便打开一个文件，然后写入一些信息。但是现代的服务器系统，一般都会对日志做一些标准化的需求规范：日志必须是一行一行的，这样比较方便日后的统计分析；每行日志文本，都应该有一些统一的头部，比如日期时间就是基本的需求；日志的输出应该是分等级的，比如fatal/error/warning/info/debug/trace等等，程序可以在运行时调整输出的等级，以便可以节省日志打印的消耗；日志的头部一般还需要一些类似用户ID或者IP地址之类的头信息，用于快速查找定位过滤某一批日志记录，或者有一些其他的用于过滤缩小日志查看范围的字段，这叫做染色功能；日志文件还需要有“回滚”功能，也就是保持固定大小的多个文件，避免长期运行后，把硬盘写满。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">由于有上述的各种需求，所以开源界提供了很多游戏的日志组件库，比如大名鼎鼎的log4j，以及成员众多的log4X家族库，这些都是应用广泛而饱受好评的工具。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">不过对比日志的打印功能，日志的搜集和统计功能却往往比较容易被忽视。作为分布式系统的程序员，肯定是希望能从一个集中节点，能搜集统计到整个集群日志情况。而有一些日志的统计结果，甚至希望能在很短时间内反复获取，用来监控整个集群的健康情况。要做到这一点，就必须有一个分布式的文件系统，用来存放源源不断到达的日志（这些日志往往通过UDP协议发送过来）。而在这个文件系统上，则需要有一个类似Map Reduce架构的统计系统，这样才能对海量的日志信息，进行快速的统计以及报警。有一些开发者会直接使用Hadoop系统，有一些则用Kafka来作为日志存储系统，上面再搭建自己的统计程序。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">日志服务是分布式运维的仪表盘、潜望镜。如果没有一个可靠的日志服务，整个系统的运行状况可能会是失控的。所以无论你的分布式系统节点是多还是少，必须花费重要的精力和专门的开发时间，去建立一个对日志进行自动化统计分析的系统。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKog?w=554&amp;h=301" src="https://segmentfault.com/img/bVNKog?w=554&h=301" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><h2 id="articleHeader5" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">分布式系统在开发效率上造成的问题和解决思路</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">根据上文所述，分布式系统在业务需求的功能以为，还需要增加额外很多非功能的需求。这些非功能需求，往往都是为了一个多进程系统能稳定可靠运行而去设计和实现的。这些“额外”的工作，一般都会让你的代码更加复杂，如果没有很好的工具，就会让你的开发效率严重下降。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">微服务框架：EJB、WebService</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">当我们在讨论服务器端软件分布的时候，服务进程之间的通信就难免了。然而服务进程间的通讯，并不是简单的收发消息就能完成的。这里还涉及了消息的路由、编码解码、服务状态的读写等等。如果整个流程都由自己开发，那就太累人了。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKoI?w=298&amp;h=267" src="https://segmentfault.com/img/bVNKoI?w=298&h=267" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">所以业界很早就推出了各种分布式的服务器端开发框架，最著名的就是“EJB”——企业JavaBean。但凡冠以“企业”的技术，往往都是分布式下所需的部分，而EJB这种技术，也是一种分布式对象调用的技术。我们如果需要让多个进程合作完成任务，则需要把任务分解到多个“类”上，然后这些“类”的对象就会在各个进程容器中存活，从而协作提供服务。这个过程很“面向对象”。每个对象都是一个“微服务”，可以提供某些分布式的功能。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">而另外一些系统，则走向学习互联网的基本模型：HTTP。所以就有了各种的WebService框架，从开源的到商业软件，都有各自的WebService实现。这种模型，把复杂的路由、编解码等操作，简化成常见的一次HTTP操作，是一种非常有效的抽象。开发人员开发和部署多个WebService到Web服务器上，就完成了分布式系统的搭建。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKoS?w=435&amp;h=164" src="https://segmentfault.com/img/bVNKoS?w=435&h=164" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">不管我们是学习EJB还是WebService，实际上我们都需要简化分布式调用的复杂程度。而分布式调用的复杂之处，就是因为需要把容灾、扩容、负载均衡等功能，融合到跨进程调用里。所以使用一套通用的代码，来为所有的跨进程通讯（调用），统一的实现容灾、扩容、负载均衡、过载保护、状态缓存命中等等非功能性需求，能大大简化整个分布式系统的复杂性。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">一般我们的微服务框架，都会在路由阶段，对整个集群所有节点的状态进行观察，如哪些地址上运行了哪些服务的进程，这些服务进程的负载状况如何，是否可用，然后对于有状态的服务，还会使用类似一致性哈希的算法，去尽量试图提高缓存的命中率。当集群中的节点状态发生变化的时候，微服务框架下的所有节点，都能尽快的获得这个变化的情况，从新根据当前状态，重新规划以后的服务路由方向，从而实现自动化的路由选择，避开那些负载过高或者失效的节点。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">有一些微服务框架，还提供了类似IDL转换成“骨架”、“桩”代码的工具，这样在编写远程调用程序的时候，完全无需编写那些复杂的网络相关的代码，所有的传输层、编码层代码都自动的编写好了。这方面EJB、Facebook的Thrift，Google gRPC都具备这种能力。在具备代码生成能力的框架下，我们编写一个分布式下可用的功能模块（可能是一个函数或者是一个类），就好像编写一个本地的函数那样简单。这绝对是分布式系统下非常重要的效率提升。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKoX?w=406&amp;h=367" src="https://segmentfault.com/img/bVNKoX?w=406&h=367" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">异步编程工具：协程、Futrue、Lamda</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">在分布式系统中编程，你不可避免的会碰到大量的“回调”型API。因为分布式系统涉及非常多的网络通信。任何一个业务命令，都可能被分解到多个进程，通过多次网络通信来组合完成。由于异步非阻塞的编程模型大行其道，所以我们的代码也往往动不动就要碰到“回调函数”。然而，回调这种异步编程模型，是一种非常不利于代码阅读的编程方法。因为你无法从头到尾的阅读代码，去了解一个业务任务，是怎样被逐步的完成的。属于一个业务任务的代码，由于多次的非阻塞回调，从而被分割成很多个回调函数，在代码的各处被串接起来。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">更有甚者，我们有时候会选择使用“观察者模式”，我们会在一个地方注册大量的“事件-响应函数”，然后在所有需要回调的地方，都发出一个事件。——这样的代码，比单纯的注册回调函数更难理解。因为事件对应的响应函数，通常在发出事件处是无法找到的。这些函数永远都会放在另外的一些文件里，而且有时候这些函数还会在运行时改变。而事件名字本身，也往往是匪夷所思难以理解的，因为当你的程序需要成千上百的事件的时候，起一个容易理解名符其实的名字，几乎是不可能的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">为了解决回调函数这种对于代码可读性的破坏作用，人们发明了很多不同的改进方法。其中最著名的是“协程”。我们以前常常习惯于用多线程来解决问题，所以非常熟悉以同步的方式去写代码。协程正是延续了我们的这一习惯，但不同于多线程的是，协程并不会“同时”运行，它只是在需要阻塞的地方，用Yield()切换出去执行其他协程，然后当阻塞结束后，用Resume()回到刚刚切换的位置继续往下执行。这相当于我们可以把回调函数的内容，接到Yield()调用的后面。这种编写代码的方法，非常类似于同步的写法，让代码变得非常易读。但是唯一的缺点是，Resume()的代码还是需要在所谓“主线程”中运行。用户必须自己从阻塞恢复的时候，去调用Resume()。协程另外一个缺点，是需要做栈保存，在切换到其他协程之后，栈上的临时变量，也都需要额外占用空间，这限制了协程代码的写法，让开发者不能用太大的临时变量。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKo8?w=452&amp;h=212" src="https://segmentfault.com/img/bVNKo8?w=452&h=212" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">而另外一种改善回调函数的写法，往往叫做Future/Promise模型。这种写法的基本思路，就是“一次性把所有回调写到一起”。这是一个非常实用的编程模型，它没有让你去彻底干掉回调，而是让你可以把回调从分散各处，集中到一个地方。在同一段代码中，你可以清晰的看到各个异步的步骤是如何串接、或者并行执行的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKpe?w=533&amp;h=223" src="https://segmentfault.com/img/bVNKpe?w=533&h=223" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">最后说一下lamda模型，这种写法流行于js语言的广泛应用。由于在其他语言中，定一个回调函数是非常费事的：Java语言要设计一个接口然后做一个实现，简直是五星级的费事程度；C/C++支持函数指针，算是比较简单，但是也很容易导致代码看不懂；脚本语言相对好一些，也要定义个函数。而直接在调用回调的地方，写回调函数的内容，是最方便开发，也比较利于阅读的。更重要的，lamda一般意味着闭包，也就是说，这种回调函数的调用栈，是被分别保存的，很多需要在异步操作中，需要建立一个类似“会话池”的状态保存变量，在这里都是不需要的，而是可以自然生效的。这一点和协程有异曲同工之妙。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKpl?w=279&amp;h=361" src="https://segmentfault.com/img/bVNKpl?w=279&h=361" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">不管使用哪一种异步编程方式，其编码的复杂度，都是一定比同步调用的代码高的。所以我们在编写分布式服务器代码的时候，一定要仔细规划代码结构，避免出现随意添加功能代码，导致代码的可读性被破坏的情况。不可读的代码，就是不可维护的代码，而大量异步回调的服务器端代码，是更容易出现这种情况的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><strong style="box-sizing: border-box;">云服务模型：IaaS/PaaS/SaaS</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">在复杂的分布式系统开发和使用过程中，如何对大量服务器和进程的运维，一直是一个贯穿其中的问题。不管是使用微服务框架、还是统一的部署工具、日志监控服务，都是因为大量的服务器，要集中的管理，是非常不容易的。这里背后的原因，主要是大量的硬件和网络，把逻辑上的计算能力，切割成很多小块。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">随着计算机运算能力的提升，出现的虚拟化技术，却能把被分割的计算单元，更智能的统一起来。其中最常见的就是IaaS技术：当我们可以用一个服务器硬件，运行多个虚拟的服务器操作系统的时候，我们需要维护的硬件数量就会成倍的下降。而PaaS技术的流行，让我们可以为某一种特定的编程模型，统一的进行系统运行环境的部署维护。而不需要再一台台服务器的去装操作系统、配置运行容器、上传运行代码和数据。在没有统一的PaaS之前，安装大量的MySQL数据库，曾经是消耗大量时间和精力的工作。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">当我们的业务模型，成熟到可以抽象为一些固定的软件时，我们的分布式系统就会变得更加易用。我们的计算能力不再是代码和库，而是一个个通过网络提供服务的云——SaaS，这样使用者根本来维护、部署的工作都不需要，只要申请一个接口，填上预期的容量额度，就能直接使用了。这不仅节省了大量开发对应功能的事件，还等于把大量的运维工作，都交出去给SaaS的维护者——而他们做这样的维护会更加专业。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKpw?w=300&amp;h=254" src="https://segmentfault.com/img/bVNKpw?w=300&h=254" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">在运维模型的进化上，从IaaS到PaaS到SaaS，其应用范围也许是越来越窄，但使用的便利性却成倍的提高。这也证明了，软件劳动的工作，也是可以通过分工，向更专业化、更细分的方向去提高效率。</p><h2 id="articleHeader6" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">总结分布式系统问题的解决路径</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKpK?w=650&amp;h=768" src="https://segmentfault.com/img/bVNKpK?w=650&h=768" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">针对服务器承载能力的问题，腾讯WeTest运用了沉淀十多年的内部实践经验总结，通过基于真实业务场景和用户行为进行压力测试，帮助游戏开发者发现服务器端的性能瓶颈，进行针对性的性能调优，降低服务器采购和维护成本，提高用户留存和转化率。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000282s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000848s ]
[ sql ] [ SQL ] INSERT INTO `think_article` (`title` , `cate_id` , `type` , `keyword` , `remark` , `content` , `is_tui` , `status` , `views` , `auth` , `photo` , `ip` , `update_time` , `create_time`) VALUES ('浅析分布式系统' , 27 , 0 , '分布式系统' , '我们常常会听说，某个互联网应用的服务器端系统多么牛逼，比如QQ、微信、淘宝。那么，一个互联网应用的服务器端系统，到底牛逼在什么地方？为什么海量的用户访问，会让一个服务器端系统变得更复杂？本文就是想从最基本的地方开始，探寻服务器端系统技术的基础概念。' , '<h1 id=\"articleHeader0\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 0px; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">WeTest导读</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">我们常常会听说，某个互联网应用的服务器端系统多么牛逼，比如QQ、微信、淘宝。那么，一个互联网应用的服务器端系统，到底牛逼在什么地方？为什么海量的用户访问，会让一个服务器端系统变得更复杂？本文就是想从最基本的地方开始，探寻服务器端系统技术的基础概念。</p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h2 id=\"articleHeader1\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">承载量是分布式系统存在的原因</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当一个互联网业务获得大众欢迎的时候，最显著碰到的技术问题，就是服务器非常繁忙。当每天有1000万个用户访问你的网站时，无论你使用什么样的服务器硬件，都不可能只用一台机器就承载的了。因此，在互联网程序员解决服务器端问题的时候，必须要考虑如何使用多台服务器，为同一种互联网应用提供服务，这就是所谓“分布式系统”的来源。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">然而，大量用户访问同一个互联网业务，所造成的问题并不简单。从表面上看，要能满足很多用户来自互联网的请求，最基本的需求就是所谓性能需求：用户反应网页打开很慢，或者网游中的动作很卡等等。而这些对于“服务速度”的要求，实际上包含的部分却是以下几个：高吞吐、高并发、低延迟和负载均衡。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">高吞吐，意味着你的系统，可以同时承载大量的用户使用。这里关注的整个系统能同时服务的用户数。这个吞吐量肯定是不可能用单台服务器解决的，因此需要多台服务器协作，才能达到所需要的吞吐量。而在多台服务器的协作中，如何才能有效的利用这些服务器，不致于其中某一部分服务器成为瓶颈，从而影响整个系统的处理能力，这就是一个分布式系统，在架构上需要仔细权衡的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">高并发是高吞吐的一个延伸需求。当我们在承载海量用户的时候，我们当然希望每个服务器都能尽其所能的工作，而不要出现无谓的消耗和等待的情况。然而，软件系统并不是简单的设计，就能对同时处理多个任务，做到“尽量多”的处理。很多时候，我们的程序会因为要选择处理哪个任务，而导致额外的消耗。这也是分布式系统解决的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">低延迟对于人数稀少的服务来说不算什么问题。然而，如果我们需要在大量用户访问的时候，也能很快的返回计算结果，这就要困难的多。因为除了大量用户访问可能造成请求在排队外，还有可能因为排队的长度太长，导致内存耗尽、带宽占满等空间性的问题。如果因为排队失败而采取重试的策略，则整个延迟会变的更高。所以分布式系统会采用很多请求分拣和分发的做法，尽快的让更多的服务器来出来用户的请求。但是，由于一个数量庞大的分布式系统，必然需要把用户的请求经过多次的分发，整个延迟可能会因为这些分发和转交的操作，变得更高，所以分布式系统除了分发请求外，还要尽量想办法减少分发的层次数，以便让请求能尽快的得到处理。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKkz?w=554&amp;h=421\" src=\"https://segmentfault.com/img/bVNKkz?w=554&h=421\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于互联网业务的用户来自全世界，因此在物理空间上可能来自各种不同延迟的网络和线路，在时间上也可能来自不同的时区，所以要有效的应对这种用户来源的复杂性，就需要把多个服务器部署在不同的空间来提供服务。同时，我们也需要让同时发生的请求，有效的让多个不同服务器承载。所谓的负载均衡，就是分布式系统与生俱来需要完成的功课。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于分布式系统，几乎是解决互联网业务承载量问题，的最基本方法，所以作为一个服务器端程序员，掌握分布式系统技术就变得异常重要了。然而，分布式系统的问题，并非是学会用几个框架和使用几个库，就能轻易解决的，因为当一个程序在一个电脑上运行，变成了又无数个电脑上同时协同运行，在开发、运维上都会带来很大的差别。</p><h2 id=\"articleHeader2\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式系统提高承载量的基本手段</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">分层模型（路由、代理）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">使用多态服务器来协同完成计算任务，最简单的思路就是，让每个服务器都能完成全部的请求，然后把请求随机的发给任何一个服务器处理。最早期的互联网应用中，DNS轮询就是这样的做法：当用户输入一个域名试图访问某个网站，这个域名会被解释成多个IP地址中的一个，随后这个网站的访问请求，就被发往对应IP的服务器了，这样多个服务器（多个IP地址）就能一起解决处理大量的用户请求。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">然而，单纯的请求随机转发，并不能解决一切问题。比如我们很多互联网业务，都是需要用户登录的。在登录某一个服务器后，用户会发起多个请求，如果我们把这些请求随机的转发到不同的服务器上，那么用户登录的状态就会丢失，造成一些请求处理失败。简单的依靠一层服务转发是不够的，所以我们会增加一批服务器，这些服务器会根据用户的Cookie，或者用户的登录凭据，来再次转发给后面具体处理业务的服务器。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">除了登录的需求外，我们还发现，很多数据是需要数据库来处理的，而我们的这些数据往往都只能集中到一个数据库中，否则在查询的时候就会丢失其他服务器上存放的数据结果。所以往往我们还会把数据库单独出来成为一批专用的服务器。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">至此，我们就会发现，一个典型的三层结构出现了：接入、逻辑、存储。然而，这种三层结果，并不就能包医百病。例如，当我们需要让用户在线互动（网游就是典型） ，那么分割在不同逻辑服务器上的在线状态数据，是无法知道对方的，这样我们就需要专门做一个类似互动服务器的专门系统，让用户登录的时候，也同时记录一份数据到它那里，表明某个用户登录在某个服务器上，而所有的互动操作，要先经过这个互动服务器，才能正确的把消息转发到目标用户的服务器上。&nbsp;<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKkN?w=554&amp;h=346\" src=\"https://segmentfault.com/img/bVNKkN?w=554&h=346\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">又例如，当我们在使用网上论坛（BBS）系统的时候，我们发的文章，不可能只写入一个数据库里，因为太多人的阅读请求会拖死这个数据库。我们常常会按论坛板块来写入不同的数据库，又或者是同时写入多个数据库。这样把文章数据分别存放到不同的服务器上，才能应对大量的操作请求。然而，用户在读取文章的时候，就需要有一个专门的程序，去查找具体文章在哪一个服务器上，这时候我们就要架设一个专门的代理层，把所有的文章请求先转交给它，由它按照我们预设的存储计划，去找对应的数据库获取数据。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">根据上面的例子来看，分布式系统虽然具有三层典型的结构，但是实际上往往不止有三层，而是根据业务需求，会设计成多个层次的。为了把请求转交给正确的进程处理，我们而设计很多专门用于转发请求的进程和服务器。这些进程我们常常以Proxy或者Router来命名，一个多层结构常常会具备各种各样的Proxy进程。这些代理进程，很多时候都是通过TCP来连接前后两端。然而，TCP虽然简单，但是却会有故障后不容易恢复的问题。而且TCP的网络编程，也是有点复杂的。——所以，人们设计出更好进程间通讯机制：消息队列。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKkQ?w=553&amp;h=365\" src=\"https://segmentfault.com/img/bVNKkQ?w=553&h=365\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">尽管通过各种Proxy或者Router进程能组建出强大的分布式系统，但是其管理的复杂性也是非常高的。所以人们在分层模式的基础上，想出了更多的方法，来让这种分层模式的程序变得更简单高效的方法。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">并发模型（多线程、异步）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当我们在编写服务器端程序是，我们会明确的知道，大部分的程序，都是会处理同时到达的多个请求的。因此我们不能好像HelloWorld那么简单的，从一个简单的输入计算出输出来。因为我们会同时获得很多个输入，需要返回很多个输出。在这些处理的过程中，往往我们还会碰到需要“等待”或“阻塞”的情况，比如我们的程序要等待数据库处理结果，等待向另外一个进程请求结果等等……如果我们把请求一个挨着一个的处理，那么这些空闲的等待时间将白白浪费，造成用户的响应延时增加，以及整体系统的吞吐量极度下降。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">所以在如何同时处理多个请求的问题上，业界有2个典型的方案。一种是多线程，一种是异步。在早期的系统中，多线程或多进程是最常用的技术。这种技术的代码编写起来比较简单，因为每个线程中的代码都肯定是按先后顺序执行的。但是由于同时运行着多个线程，所以你无法保障多个线程之间的代码的先后顺序。这对于需要处理同一个数据的逻辑来说，是一个非常严重的问题，最简单的例子就是显示某个新闻的阅读量。两个++操作同时运行，有可能结果只加了1，而不是2。所以多线程下，我们常常要加很多数据的锁，而这些锁又反过来可能导致线程的死锁。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">因此异步回调模型在随后比多线程更加流行，除了多线程的死锁问题外，异步还能解决多线程下，线程反复切换导致不必要的开销的问题：每个线程都需要一个独立的栈空间，在多线程并行运行的时候，这些栈的数据可能需要来回的拷贝，这额外消耗了CPU。同时由于每个线程都需要占用栈空间，所以在大量线程存在的时候，内存的消耗也是巨大的。而异步回调模型则能很好的解决这些问题，不过异步回调更像是“手工版”的并行处理，需要开发者自己去实现如何“并行”的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">异步回调基于非阻塞的I/O操作（网络和文件），这样我们就不用在调用读写函数的时候“卡”在那一句函数调用，而是立刻返回“有无数据”的结果。而Linux的epoll技术，则利用底层内核的机制，让我们可以快速的“查找”到有数据可以读写的连接文件。由于每个操作都是非阻塞的，所以我们的程序可以只用一个进程，就处理大量并发的请求。因为只有一个进程，所以所有的数据处理，其顺序都是固定的，不可能出现多线程中，两个函数的语句交错执行的情况，因此也不需要各种“锁”。从这个角度看，异步非阻塞的技术，是大大简化了开发的过程。由于只有一个线程，也不需要有线程切换之类的开销，所以异步非阻塞成为很多对吞吐量、并发有较高要求的系统首选。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKkX?w=554&amp;h=364\" src=\"https://segmentfault.com/img/bVNKkX?w=554&h=364\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">int epoll_create(int size)；//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">缓冲技术</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在互联网服务中，大部分的用户交互，都是需要立刻返回结果的，所以对于延迟有一定的要求。而类似网络游戏之类服务，延迟更是要求缩短到几十毫秒以内。所以为了降低延迟，缓冲是互联网服务中最常见的技术之一。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">早期的WEB系统中，如果每个HTTP请求的处理，都去数据库（MySQL）读写一次，那么数据库很快就会因为连接数占满而停止响应。因为一般的数据库，支持的连接数都只有几百，而WEB的应用的并发请求，轻松能到几千。这也是很多设计不良的网站人一多就卡死的最直接原因。为了尽量减少对数据库的连接和访问，人们设计了很多缓冲系统——把从数据库中查询的结果存放到更快的设施上，如果没有相关联的修改，就直接从这里读。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">最典型的WEB应用缓冲系统是Memcache。由于PHP本身的线程结构，是不带状态的。早期PHP本身甚至连操作“堆”内存的方法都没有，所以那些持久的状态，就一定要存放到另外一个进程里。而Memcache就是一个简单可靠的存放临时状态的开源软件。很多PHP应用现在的处理逻辑，都是先从数据库读取数据，然后写入Memcache；当下次请求来的时候，先尝试从Memcache里面读取数据，这样就有可能大大减少对数据库的访问。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKk6?w=333&amp;h=375\" src=\"https://segmentfault.com/img/bVNKk6?w=333&h=375\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">然而Memcache本身是一个独立的服务器进程，这个进程自身并不带特别的集群功能。也就是说这些Memcache进程，并不能直接组建成一个统一的集群。如果一个Memcache不够用，我们就要手工用代码去分配，哪些数据应该去哪个Memcache进程。——这对于真正的大型分布式网站来说，管理一个这样的缓冲系统，是一个很繁琐的工作。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">因此人们开始考虑设计一些更高效的缓冲系统：从性能上来说，Memcache的每笔请求，都要经过网络传输，才能去拉取内存中的数据。这无疑是有一点浪费的，因为请求者本身的内存，也是可以存放数据的。——这就是促成了很多利用请求方内存的缓冲算法和技术，其中最简单的就是使用LRU算法，把数据放在一个哈希表结构的堆内存中。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">而Memcache的不具备集群功能，也是一个用户的痛点。于是很多人开始设计，如何让数据缓存分不到不同的机器上。最简单的思路是所谓读写分离，也就是缓存每次写，都写到多个缓冲进程上记录，而读则可以随机读任何一个进程。在业务数据有明显的读写不平衡差距上，效果是非常好的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">然而，并不是所有的业务都能简单的用读写分离来解决问题，比如一些在线互动的互联网业务，比如社区、游戏。这些业务的数据读写频率并没很大的差异，而且也要求很高的延迟。因此人们又再想办法，把本地内存和远端进程的内存缓存结合起来使用，让数据具备两级缓存。同时，一个数据不在同时的复制存在所有的缓存进程上，而是按一定规律分布在多个进程上。——这种分布规律使用的算法，最流行的就是所谓“一致性哈希”。这种算法的好处是，当某一个进程失效挂掉，不需要把整个集群中所有的缓存数据，都重新修改一次位置。你可以想象一下，如果我们的数据缓存分布，是用简单的以数据的ID对进程数取模，那么一旦进程数变化，每个数据存放的进程位置都可能变化，这对于服务器的故障容忍是不利的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Orcale公司旗下有一款叫Coherence的产品，是在缓存系统上设计比较好的。这个产品是一个商业产品，支持利用本地内存缓存和远程进程缓存协作。集群进程是完全自管理的，还支持在数据缓存所在进程，进行用户定义的计算（处理器功能），这就不仅仅是缓存了，还是一个分布式的计算系统。&nbsp;<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlc?w=553&amp;h=283\" src=\"https://segmentfault.com/img/bVNKlc?w=553&h=283\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">存储技术（NoSQL）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">相信CAP理论大家已经耳熟能详，然而在互联发展的早期，大家都还在使用MySQL的时候，如何让数据库存放更多的数据，承载更多的连接，很多团队都是绞尽脑汁。甚至于有很多业务，主要的数据存储方式是文件，数据库反而变成是辅助的设施了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlh?w=554&amp;h=477\" src=\"https://segmentfault.com/img/bVNKlh?w=554&h=477\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">然而，当NoSQL兴起，大家突然发现，其实很多互联网业务，其数据格式是如此的简单，很多时候根部不需要关系型数据库那种复杂的表格。对于索引的要求往往也只是根据主索引搜索。而更复杂的全文搜索，本身数据库也做不到。所以现在相当多的高并发的互联网业务，首选NoSQL来做存储设施。最早的NoSQL数据库有MangoDB等，现在最流行的似乎就是Redis了。甚至有些团队，把Redis也当成缓冲系统的一部分，实际上也是认可Redis的性能优势。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">NoSQL除了更快、承载量更大以外，更重要的特点是，这种数据存储方式，只能按照一条索引来检索和写入。这样的需求约束，带来了分布上的好处，我们可以按这条主索引，来定义数据存放的进程（服务器）。这样一个数据库的数据，就能很方便的存放在不同的服务器上。在分布式系统的必然趋势下，数据存储层终于也找到了分布的方法。</p><h2 id=\"articleHeader3\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式系统在可管理性上造成的问题</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式系统并不是简单的把一堆服务器一起运行起来就能满足需求的。对比单机或少量服务器的集群，有一些特别需要解决的问题等待着我们。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">硬件故障率</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">所谓分布式系统，肯定就不是只有一台服务器。假设一台服务器的平均故障时间是1%，那么当你有100台服务器的时候，那就几乎总有一台是在故障的。虽然这个比方不一定很准确，但是，当你的系统所涉及的硬件越来越多，硬件的故障也会从偶然事件变成一个必然事件。一般我们在写功能代码的时候，是不会考虑到硬件故障的时候应该怎么办的。而如果在编写分布式系统的时候，就一定需要面对这个问题了。否则，很可能只有一台服务器出故障，整个数百台服务器的集群都工作不正常了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlo?w=554&amp;h=185\" src=\"https://segmentfault.com/img/bVNKlo?w=554&h=185\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">除了服务器自己的内存、硬盘等故障，服务器之间的网络线路故障更加常见。而且这种故障还有可能是偶发的，或者是会自动恢复的。面对这种问题，如果只是简单的把“出现故障”的机器剔除出去，那还是不够的。因为网络可能过一会儿就又恢复了，而你的集群可能因为这一下的临时故障，丢失了过半的处理能力。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">如何让分布式系统，在各种可能随时出现故障的情况下，尽量的自动维护和维持对外服务，成为了编写程序就要考虑的问题。由于要考虑到这种故障的情况，所以我们在设计架构的时候，也要有意识的预设一些冗余、自我维护的功能。这些都不是产品上的业务需求，完全就是技术上的功能需求。能否在这方面提出对的需求，然后正确的实现，是服务器端程序员最重要的职责之一。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">资源利用率优化</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在分布式系统的集群，包含了很多个服务器，当这样一个集群的硬件承载能力到达极限的时候，最自然的想法就是增加更多的硬件。然而，一个软件系统不是那么容易就可以通过“增加”硬件来提高承载性能的。因为软件在多个服务器上的工作，是需要有复杂细致的协调工作。在对一个集群扩容的时候，我们往往会要停掉整个集群的服务，然后修改各种配置，最后才能重新启动一个加入了新的服务器的集群。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlA?w=554&amp;h=352\" src=\"https://segmentfault.com/img/bVNKlA?w=554&h=352\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于在每个服务器的内存里，都可能会有一些用户使用的数据，所以如果冒然在运行的时候，就试图修改集群中提供服务的配置，很可能会造成内存数据的丢失和错误。因此，运行时扩容在对无状态的服务上，是比较容易的，比如增加一些Web服务器。但如果是在有状态的服务上，比如网络游戏，几乎是不可能进行简单的运行时扩容的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式集群除了扩容，还有缩容的需求。当用户人数下降，服务器硬件资源出现空闲的时候，我们往往需要这些空闲的资源能利用起来，放到另外一些新的服务集群里去。缩容和集群中有故障需要容灾有一定类似之处，区别是缩容的时间点和目标是可预期的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于分布式集群中的扩容、缩容，以及希望尽量能在线操作，这导致了非常复杂的技术问题需要处理，比如集群中互相关联的配置如何正确高效的修改、如何对有状态的进程进行操作、如何在扩容缩容的过程中保证集群中节点之间通信的正常。作为服务器端程序员，会需要花费大量的经历，来对多个进程的集群状态变化，造成的一系列问题进行专门的开发。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">软件服务内容更新</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">现在都流行用敏捷开发模式中的“迭代”，来表示一个服务不断的更新程序，满足新的需求，修正BUG。如果我们仅仅管理一台服务器，那么更新这一台服务器上的程序，是非常简单的：只要把软件包拷贝过去，然后修改下配置就好。但是如果你要对成百上千的服务器去做同样的操作，就不可能每台服务器登录上去处理。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">服务器端的程序批量安装部署工具，是每个分布式系统开发者都需要的。然而，我们的安装工作除了拷贝二进制文件和配置文件外，还会有很多其他的操作。比如打开防火墙、建立共享内存文件、修改数据库表结构、改写一些数据文件等等……甚至有一些还要在服务器上安装新的软件。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlK?w=499&amp;h=314\" src=\"https://segmentfault.com/img/bVNKlK?w=499&h=314\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">如果我们在开发服务器端程序的时候，就考虑到软件更新、版本升级的问题，那么我们对于配置文件、命令行参数、系统变量的使用，就会预先做一定的规划，这能让安装部署的工具运行更快，可靠性更高。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">除了安装部署的过程，还有一个重要的问题，就是不同版本间数据的问题。我们在升级版本的时候，旧版本程序生成的一些持久化数据，一般都是旧的数据格式的；而我们升级版本中如果涉及修改了数据格式，比如数据表结果，那么这些旧格式的数据，都要转换改写成新版本的数据格式才行。这导致了我们在设计数据结构的时候，就要考虑清楚这些表格的结构，是用最简单直接的表达方式，来让将来的修改更简单；还是一早就预计到修改的范围，专门预设一些字段，或者使用其他形式存放数据。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">除了持久化数据以外，如果存在客户端程序（如受击APP），这些客户端程序的升级往往不能和服务器同步，如果升级的内容包含了通信协议的修改，这就造成了我们必须为不同的版本部署不同的服务器端系统的问题。为了避免同时维护多套服务器，我们在软件开发的时候，往往倾向于所谓“版本兼容”的协议定义方式。而怎样设计的协议才能有很好的兼容性，又是服务器端程序需要仔细考虑的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">数据统计和决策</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">一般来说，分布式系统的日志数据，都是被集中到一起，然后统一进行统计的。然而，当集群的规模到一定程度的时候，这些日志的数据量会变得非常恐怖。很多时候，统计一天的日志量，要消耗计算机运行一天以上的时间。所以，日志统计这项工作，也变成一门非常专业的活动。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">经典的分布式统计模型，有Google的Map Reduce模型。这种模型既有灵活性，也能利用大量服务器进行统计工作。但是缺点是易用性往往不够好，因为这些数据的统计和我们常见的SQL数据表统计有非常大的差异，所以我们最后还是常常把数据丢到MySQL里面去做更细层面的统计。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKl3?w=554&amp;h=335\" src=\"https://segmentfault.com/img/bVNKl3?w=554&h=335\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于分布式系统日志数量的庞大，以及日志复杂程度的提高。我们变得必须要掌握类似Map Reduce技术，才能真正的对分布式系统进行数据统计。而且我们还需要想办法提高统计工作的工作效率。</p><h2 id=\"articleHeader4\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">解决分布式系统可管理性的基本手段</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">目录服务（ZooKeeper）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式系统是一个由很多进程组成的整体，这个整体中每个成员部分，都会具备一些状态，比如自己的负责模块，自己的负载情况，对某些数据的掌握等等。而这些和其他进程相关的数据，在故障恢复、扩容缩容的时候变得非常重要。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">简单的分布式系统，可以通过静态的配置文件，来记录这些数据：进程之间的连接对应关系，他们的IP地址和端口，等等。然而一个自动化程度高的分布式系统，必然要求这些状态数据都是动态保存的。这样才能让程序自己去做容灾和负载均衡的工作。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">一些程序员会专门自己编写一个DIR服务（目录服务），来记录集群中进程的运行状态。集群中进程会和这个DIR服务产生自动关联，这样在容灾、扩容、负载均衡的时候，就可以自动根据这些DIR服务里的数据，来调整请求的发送目地，从而达到绕开故障机器、或连接到新的服务器的操作。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVCxVV?w=529&amp;h=319\" src=\"https://segmentfault.com/img/bVCxVV?w=529&h=319\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">然而，如果我们只是用一个进程来充当这个工作。那么这个进程就成为了这个集群的“单点”——意思就是，如果这个进程故障了，那么整个集群可能都无法运行的。所以存放集群状态的目录服务，也需要是分布式的。幸好我们有ZooKeeper这个优秀的开源软件，它正是一个分布式的目录服务区。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">ZooKeeper可以简单启动奇数个进程，来形成一个小的目录服务集群。这个集群会提供给所有其他进程，进行读写其巨大的“配置树”的能力。这些数据不仅仅会存放在一个ZooKeeper进程中，而是会根据一套非常安全的算法，让多个进程来承载。这让ZooKeeper成为一个优秀的分布式数据保存系统。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于ZooKeeper的数据存储结构，是一个类似文件目录的树状系统，所以我们常常会利用它的功能，把每个进程都绑定到其中一个“分枝”上，然后通过检查这些“分支”，来进行服务器请求的转发，就能简单的解决请求路由（由谁去做）的问题。另外还可以在这些“分支”上标记进程的负载的状态，这样负载均衡也很容易做了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">目录服务是分布式系统中最关键的组件之一。而ZooKeeper是一个很好的开源软件，正好是用来完成这个任务。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">消息队列服务（ActiveMQ、ZeroMQ、Jgroups）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">两个进程间如果要跨机器通讯，我们几乎都会用TCP/UDP这些协议。但是直接使用网络API去编写跨进程通讯，是一件非常麻烦的事情。除了要编写大量的底层socket代码外，我们还要处理诸如：如何找到要交互数据的进程，如何保障数据包的完整性不至于丢失，如果通讯的对方进程挂掉了，或者进程需要重启应该怎样等等这一系列问题。这些问题包含了容灾扩容、负载均衡等一系列的需求。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">为了解决分布式系统进程间通讯的问题，人们总结出了一个有效的模型，就是“消息队列”模型。消息队列模型，就是把进程间的交互，抽象成对一个个消息的处理，而对于这些消息，我们都有一些“队列”，也就是管道，来对消息进行暂存。每个进程都可以访问一个或者多个队列，从里面读取消息（消费）或写入消息（生产）。由于有一个缓存的管道，我们可以放心的对进程状态进行变化。当进程起来的时候，它会自动去消费消息就可以了。而消息本身的路由，也是由存放的队列决定的，这样就把复杂的路由问题，变成了如何管理静态的队列的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">一般的消息队列服务，都是提供简单的“投递”和“收取”两个接口，但是消息队列本身的管理方式却比较复杂，一般来说有两种。一部分的消息队列服务，提倡点对点的队列管理方式：每对通信节点之间，都有一个单独的消息队列。这种做法的好处是不同来源的消息，可以互不影响，不会因为某个队列的消息过多，挤占了其他队列的消息缓存空间。而且处理消息的程序也可以自己来定义处理的优先级——先收取、多处理某个队列，而少处理另外一些队列。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">但是这种点对点的消息队列，会随着集群的增长而增加大量的队列，这对于内存占用和运维管理都是一个复杂的事情。因此更高级的消息队列服务，开始可以让不同的队列共享内存空间，而消息队列的地址信息、建立和删除，都采用自动化的手段。——这些自动化往往需要依赖上文所述的“目录服务”，来登记队列的ID对应的物理IP和端口等信息。比如很多开发者使用ZooKeeper来充当消息队列服务的中央节点；而类似Jgropus这类软件，则自己维护一个集群状态来存放各节点今昔。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKmq?w=554&amp;h=300\" src=\"https://segmentfault.com/img/bVNKmq?w=554&h=300\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">另外一种消息队列，则类似一个公共的邮箱。一个消息队列服务就是一个进程，任何使用者都可以投递或收取这个进程中的消息。这样对于消息队列的使用更简便，运维管理也比较方便。不过这种用法下，任何一个消息从发出到处理，最少进过两次进程间通信，其延迟是相对比较高的。并且由于没有预定的投递、收取约束，所以也比较容易出BUG。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">不管使用那种消息队列服务，在一个分布式服务器端系统中，进程间通讯都是必须要解决的问题，所以作为服务器端程序员，在编写分布式系统代码的时候，使用的最多的就是基于消息队列驱动的代码，这也直接导致了EJB3.0把“消息驱动的Bean”加入到规范之中。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">事务系统</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在分布式的系统中，事务是最难解决的技术问题之一。由于一个处理可能分布在不同的处理进程上，任何一个进程都可能出现故障，而这个故障问题则需要导致一次回滚。这种回滚大部分又涉及多个其他的进程。这是一个扩散性的多进程通讯问题。要在分布式系统上解决事务问题，必须具备两个核心工具：一个是稳定的状态存储系统；另外一个是方便可靠的广播系统。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKmy?w=554&amp;h=236\" src=\"https://segmentfault.com/img/bVNKmy?w=554&h=236\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">事务中任何一步的状态，都必须在整个集群中可见，并且还要有容灾的能力。这个需求，一般还是由集群的“目录服务”来承担。如果我们的目录服务足够健壮，那么我们可以把每步事务的处理状态，都同步写到目录服务上去。ZooKeeper再次在这个地方能发挥重要的作用。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">如果事务发生了中断，需要回滚，那么这个过程会涉及到多个已经执行过的步骤。也许这个回滚只需要在入口处回滚即可（加入那里有保存回滚所需的数据），也可能需要在各个处理节点上回滚。如果是后者，那么就需要集群中出现异常的节点，向其他所有相关的节点广播一个“回滚！事务ID是XXXX”这样的消息。这个广播的底层一般会由消息队列服务来承载，而类似Jgroups这样的软件，直接提供了广播服务。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">虽然现在我们在讨论事务系统，但实际上分布式系统经常所需的“分布式锁”功能，也是这个系统可以同时完成的。所谓的“分布式锁”，也就是一种能让各个节点先检查后执行的限制条件。如果我们有高效而单子操作的目录服务，那么这个锁状态实际上就是一种“单步事务”的状态记录，而回滚操作则默认是“暂停操作，稍后再试”。这种“锁”的方式，比事务的处理更简单，因此可靠性更高，所以现在越来越多的开发人员，愿意使用这种“锁”服务，而不是去实现一个“事务系统”。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKmI?w=356&amp;h=345\" src=\"https://segmentfault.com/img/bVNKmI?w=356&h=345\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">自动部署工具（Docker）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于分布式系统最大的需求，是在运行时（有可能需要中断服务）来进行服务容量的变更：扩容或者缩容。而在分布式系统中某些节点故障的时候，也需要新的节点来恢复工作。这些如果还是像老式的服务器管理方式，通过填表、申报、进机房、装服务器、部署软件……这一套做法，那效率肯定是不行。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在分布式系统的环境下，我们一般都是采用“池”的方式来管理服务。我们预先会申请一批机器，然后在某些机器上运行服务软件，另外一些则作为备份。显然我们这一批服务器不可能只为某一个业务服务，而是会提供多个不同的业务承载。那些备份的服务器，则会成为多个业务的通用备份“池”。随着业务需求的变化，一些服务器可能“退出”A服务而“加入”B服务。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这种频繁的服务变化，依赖高度自动的软件部署工具。我们的运维人员，应该掌握这开发人员提供的部署工具，而不是厚厚的手册，来进行这类运维操作。一些比较有经验的开发团队，会统一所有的业务底层框架，以期大部分的部署、配置工具，都能用一套通用的系统来进行管理。而开源界，也有类似的尝试，最广为人知的莫过于RPM安装包格式，然而RPM的打包方式还是太复杂，不太符合服务器端程序的部署需求。所以后来又出现了Chef为代表的，可编程的通用部署系统。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKmR?w=500&amp;h=415\" src=\"https://segmentfault.com/img/bVNKmR?w=500&h=415\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">然而，当NoSQL兴起，大家突然发现，其实很多互联网业务，其数据格式是如此的简单，很多时候根部不需要关系型数据库那种复杂的表格。对于索引的要求往往也只是根据主索引搜索。而更复杂的全文搜索，本身数据库也做不到。所以现在相当多的高并发的互联网业务，首选NoSQL来做存储设施。最早的NoSQL数据库有MangoDB等，现在最流行的似乎就是Redis了。甚至有些团队，把Redis也当成缓冲系统的一部分，实际上也是认可Redis的性能优势。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">NoSQL除了更快、承载量更大以外，更重要的特点是，这种数据存储方式，只能按照一条索引来检索和写入。这样的需求约束，带来了分布上的好处，我们可以按这条主索引，来定义数据存放的进程（服务器）。这样一个数据库的数据，就能很方便的存放在不同的服务器上。在分布式系统的必然趋势下，数据存储层终于也找到了分布的方法。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKne?w=554&amp;h=312\" src=\"https://segmentfault.com/img/bVNKne?w=554&h=312\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">为了管理大量的分布式服务器端进程，我们确实需要花很多功夫，其优化其部署管理的工作。统一服务器端进程的运行规范，是实现自动化部署管理的基本条件。我们可以根据“操作系统”作为规范，采用Docker技术；也可以根据“Web应用”作为规范，采用某些PaaS平台技术；或者自己定义一些更具体的规范，自己开发完整的分布式计算平台。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">日志服务（log4j）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">服务器端的日志，一直是一个既重要又容易被忽视的问题。很多团队在刚开始的时候，仅仅把日志视为开发调试、排除BUG的辅助工具。但是很快会发现，在服务运营起来之后，日志几乎是服务器端系统，在运行时可以用来了解程序情况的唯一有效手段。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">尽管我们有各种profile工具，但是这些工具大部分都不适合在正式运营的服务上开启，因为会严重降低其运行性能。所以我们更多的时候需要根据日志来分析。尽管日志从本质上，就是一行行的文本信息，但是由于其具有很大的灵活性，所以会很受开发和运维人员的重视。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">日志本身从概念上，是一个很模糊的东西。你可以随便打开一个文件，然后写入一些信息。但是现代的服务器系统，一般都会对日志做一些标准化的需求规范：日志必须是一行一行的，这样比较方便日后的统计分析；每行日志文本，都应该有一些统一的头部，比如日期时间就是基本的需求；日志的输出应该是分等级的，比如fatal/error/warning/info/debug/trace等等，程序可以在运行时调整输出的等级，以便可以节省日志打印的消耗；日志的头部一般还需要一些类似用户ID或者IP地址之类的头信息，用于快速查找定位过滤某一批日志记录，或者有一些其他的用于过滤缩小日志查看范围的字段，这叫做染色功能；日志文件还需要有“回滚”功能，也就是保持固定大小的多个文件，避免长期运行后，把硬盘写满。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于有上述的各种需求，所以开源界提供了很多游戏的日志组件库，比如大名鼎鼎的log4j，以及成员众多的log4X家族库，这些都是应用广泛而饱受好评的工具。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">不过对比日志的打印功能，日志的搜集和统计功能却往往比较容易被忽视。作为分布式系统的程序员，肯定是希望能从一个集中节点，能搜集统计到整个集群日志情况。而有一些日志的统计结果，甚至希望能在很短时间内反复获取，用来监控整个集群的健康情况。要做到这一点，就必须有一个分布式的文件系统，用来存放源源不断到达的日志（这些日志往往通过UDP协议发送过来）。而在这个文件系统上，则需要有一个类似Map Reduce架构的统计系统，这样才能对海量的日志信息，进行快速的统计以及报警。有一些开发者会直接使用Hadoop系统，有一些则用Kafka来作为日志存储系统，上面再搭建自己的统计程序。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">日志服务是分布式运维的仪表盘、潜望镜。如果没有一个可靠的日志服务，整个系统的运行状况可能会是失控的。所以无论你的分布式系统节点是多还是少，必须花费重要的精力和专门的开发时间，去建立一个对日志进行自动化统计分析的系统。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKog?w=554&amp;h=301\" src=\"https://segmentfault.com/img/bVNKog?w=554&h=301\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><h2 id=\"articleHeader5\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式系统在开发效率上造成的问题和解决思路</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">根据上文所述，分布式系统在业务需求的功能以为，还需要增加额外很多非功能的需求。这些非功能需求，往往都是为了一个多进程系统能稳定可靠运行而去设计和实现的。这些“额外”的工作，一般都会让你的代码更加复杂，如果没有很好的工具，就会让你的开发效率严重下降。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">微服务框架：EJB、WebService</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当我们在讨论服务器端软件分布的时候，服务进程之间的通信就难免了。然而服务进程间的通讯，并不是简单的收发消息就能完成的。这里还涉及了消息的路由、编码解码、服务状态的读写等等。如果整个流程都由自己开发，那就太累人了。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKoI?w=298&amp;h=267\" src=\"https://segmentfault.com/img/bVNKoI?w=298&h=267\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">所以业界很早就推出了各种分布式的服务器端开发框架，最著名的就是“EJB”——企业JavaBean。但凡冠以“企业”的技术，往往都是分布式下所需的部分，而EJB这种技术，也是一种分布式对象调用的技术。我们如果需要让多个进程合作完成任务，则需要把任务分解到多个“类”上，然后这些“类”的对象就会在各个进程容器中存活，从而协作提供服务。这个过程很“面向对象”。每个对象都是一个“微服务”，可以提供某些分布式的功能。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">而另外一些系统，则走向学习互联网的基本模型：HTTP。所以就有了各种的WebService框架，从开源的到商业软件，都有各自的WebService实现。这种模型，把复杂的路由、编解码等操作，简化成常见的一次HTTP操作，是一种非常有效的抽象。开发人员开发和部署多个WebService到Web服务器上，就完成了分布式系统的搭建。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKoS?w=435&amp;h=164\" src=\"https://segmentfault.com/img/bVNKoS?w=435&h=164\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">不管我们是学习EJB还是WebService，实际上我们都需要简化分布式调用的复杂程度。而分布式调用的复杂之处，就是因为需要把容灾、扩容、负载均衡等功能，融合到跨进程调用里。所以使用一套通用的代码，来为所有的跨进程通讯（调用），统一的实现容灾、扩容、负载均衡、过载保护、状态缓存命中等等非功能性需求，能大大简化整个分布式系统的复杂性。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">一般我们的微服务框架，都会在路由阶段，对整个集群所有节点的状态进行观察，如哪些地址上运行了哪些服务的进程，这些服务进程的负载状况如何，是否可用，然后对于有状态的服务，还会使用类似一致性哈希的算法，去尽量试图提高缓存的命中率。当集群中的节点状态发生变化的时候，微服务框架下的所有节点，都能尽快的获得这个变化的情况，从新根据当前状态，重新规划以后的服务路由方向，从而实现自动化的路由选择，避开那些负载过高或者失效的节点。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">有一些微服务框架，还提供了类似IDL转换成“骨架”、“桩”代码的工具，这样在编写远程调用程序的时候，完全无需编写那些复杂的网络相关的代码，所有的传输层、编码层代码都自动的编写好了。这方面EJB、Facebook的Thrift，Google gRPC都具备这种能力。在具备代码生成能力的框架下，我们编写一个分布式下可用的功能模块（可能是一个函数或者是一个类），就好像编写一个本地的函数那样简单。这绝对是分布式系统下非常重要的效率提升。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKoX?w=406&amp;h=367\" src=\"https://segmentfault.com/img/bVNKoX?w=406&h=367\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">异步编程工具：协程、Futrue、Lamda</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在分布式系统中编程，你不可避免的会碰到大量的“回调”型API。因为分布式系统涉及非常多的网络通信。任何一个业务命令，都可能被分解到多个进程，通过多次网络通信来组合完成。由于异步非阻塞的编程模型大行其道，所以我们的代码也往往动不动就要碰到“回调函数”。然而，回调这种异步编程模型，是一种非常不利于代码阅读的编程方法。因为你无法从头到尾的阅读代码，去了解一个业务任务，是怎样被逐步的完成的。属于一个业务任务的代码，由于多次的非阻塞回调，从而被分割成很多个回调函数，在代码的各处被串接起来。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">更有甚者，我们有时候会选择使用“观察者模式”，我们会在一个地方注册大量的“事件-响应函数”，然后在所有需要回调的地方，都发出一个事件。——这样的代码，比单纯的注册回调函数更难理解。因为事件对应的响应函数，通常在发出事件处是无法找到的。这些函数永远都会放在另外的一些文件里，而且有时候这些函数还会在运行时改变。而事件名字本身，也往往是匪夷所思难以理解的，因为当你的程序需要成千上百的事件的时候，起一个容易理解名符其实的名字，几乎是不可能的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">为了解决回调函数这种对于代码可读性的破坏作用，人们发明了很多不同的改进方法。其中最著名的是“协程”。我们以前常常习惯于用多线程来解决问题，所以非常熟悉以同步的方式去写代码。协程正是延续了我们的这一习惯，但不同于多线程的是，协程并不会“同时”运行，它只是在需要阻塞的地方，用Yield()切换出去执行其他协程，然后当阻塞结束后，用Resume()回到刚刚切换的位置继续往下执行。这相当于我们可以把回调函数的内容，接到Yield()调用的后面。这种编写代码的方法，非常类似于同步的写法，让代码变得非常易读。但是唯一的缺点是，Resume()的代码还是需要在所谓“主线程”中运行。用户必须自己从阻塞恢复的时候，去调用Resume()。协程另外一个缺点，是需要做栈保存，在切换到其他协程之后，栈上的临时变量，也都需要额外占用空间，这限制了协程代码的写法，让开发者不能用太大的临时变量。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKo8?w=452&amp;h=212\" src=\"https://segmentfault.com/img/bVNKo8?w=452&h=212\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">而另外一种改善回调函数的写法，往往叫做Future/Promise模型。这种写法的基本思路，就是“一次性把所有回调写到一起”。这是一个非常实用的编程模型，它没有让你去彻底干掉回调，而是让你可以把回调从分散各处，集中到一个地方。在同一段代码中，你可以清晰的看到各个异步的步骤是如何串接、或者并行执行的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKpe?w=533&amp;h=223\" src=\"https://segmentfault.com/img/bVNKpe?w=533&h=223\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">最后说一下lamda模型，这种写法流行于js语言的广泛应用。由于在其他语言中，定一个回调函数是非常费事的：Java语言要设计一个接口然后做一个实现，简直是五星级的费事程度；C/C++支持函数指针，算是比较简单，但是也很容易导致代码看不懂；脚本语言相对好一些，也要定义个函数。而直接在调用回调的地方，写回调函数的内容，是最方便开发，也比较利于阅读的。更重要的，lamda一般意味着闭包，也就是说，这种回调函数的调用栈，是被分别保存的，很多需要在异步操作中，需要建立一个类似“会话池”的状态保存变量，在这里都是不需要的，而是可以自然生效的。这一点和协程有异曲同工之妙。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKpl?w=279&amp;h=361\" src=\"https://segmentfault.com/img/bVNKpl?w=279&h=361\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">不管使用哪一种异步编程方式，其编码的复杂度，都是一定比同步调用的代码高的。所以我们在编写分布式服务器代码的时候，一定要仔细规划代码结构，避免出现随意添加功能代码，导致代码的可读性被破坏的情况。不可读的代码，就是不可维护的代码，而大量异步回调的服务器端代码，是更容易出现这种情况的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">云服务模型：IaaS/PaaS/SaaS</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在复杂的分布式系统开发和使用过程中，如何对大量服务器和进程的运维，一直是一个贯穿其中的问题。不管是使用微服务框架、还是统一的部署工具、日志监控服务，都是因为大量的服务器，要集中的管理，是非常不容易的。这里背后的原因，主要是大量的硬件和网络，把逻辑上的计算能力，切割成很多小块。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">随着计算机运算能力的提升，出现的虚拟化技术，却能把被分割的计算单元，更智能的统一起来。其中最常见的就是IaaS技术：当我们可以用一个服务器硬件，运行多个虚拟的服务器操作系统的时候，我们需要维护的硬件数量就会成倍的下降。而PaaS技术的流行，让我们可以为某一种特定的编程模型，统一的进行系统运行环境的部署维护。而不需要再一台台服务器的去装操作系统、配置运行容器、上传运行代码和数据。在没有统一的PaaS之前，安装大量的MySQL数据库，曾经是消耗大量时间和精力的工作。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当我们的业务模型，成熟到可以抽象为一些固定的软件时，我们的分布式系统就会变得更加易用。我们的计算能力不再是代码和库，而是一个个通过网络提供服务的云——SaaS，这样使用者根本来维护、部署的工作都不需要，只要申请一个接口，填上预期的容量额度，就能直接使用了。这不仅节省了大量开发对应功能的事件，还等于把大量的运维工作，都交出去给SaaS的维护者——而他们做这样的维护会更加专业。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKpw?w=300&amp;h=254\" src=\"https://segmentfault.com/img/bVNKpw?w=300&h=254\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在运维模型的进化上，从IaaS到PaaS到SaaS，其应用范围也许是越来越窄，但使用的便利性却成倍的提高。这也证明了，软件劳动的工作，也是可以通过分工，向更专业化、更细分的方向去提高效率。</p><h2 id=\"articleHeader6\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">总结分布式系统问题的解决路径</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKpK?w=650&amp;h=768\" src=\"https://segmentfault.com/img/bVNKpK?w=650&h=768\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">针对服务器承载能力的问题，腾讯WeTest运用了沉淀十多年的内部实践经验总结，通过基于真实业务场景和用户行为进行压力测试，帮助游戏开发者发现服务器端的性能瓶颈，进行针对性的性能调优，降低服务器采购和维护成本，提高用户留存和转化率。</p><p><br/></p>' , 1 , 1 , 1 , '韩会强' , 'images/j637il88_f1nrt7kfc0b59895a8b0d73c.jpg' , '123.233.116.122' , 1502173835 , 1502173835) [ RunTime:0.005553s ]

---------------------------------------------------------------
[ 2017-08-08T14:30:37+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.028528s][吞吐率：35.05req/s] [内存消耗：3,945.13kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000312s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000855s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000190s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001081s ]

---------------------------------------------------------------
[ 2017-08-08T14:30:37+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.042313s][吞吐率：23.63req/s] [内存消耗：3,876.15kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000296s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000853s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000158s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001077s ]

---------------------------------------------------------------
[ 2017-08-08T14:30:50+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.035221s][吞吐率：28.39req/s] [内存消耗：2,987.10kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000340s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000786s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000189s ]

---------------------------------------------------------------
[ 2017-08-08T14:31:08+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/category/index.html
[ log ] hhqblog.com/admin/category/index.html [运行时间：0.070991s][吞吐率：14.09req/s] [内存消耗：3,566.73kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'category',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Category->index[ /yjdata/www/hhqblog/application/admin/controller/Category.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/category/index.html [ array (
  0 => 'list',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000328s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000839s ]
[ sql ] [ SQL ] SELECT * FROM `think_article_cate` ORDER BY orderby asc,id desc [ RunTime:0.000314s ]

---------------------------------------------------------------
[ 2017-08-08T14:31:42+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/category/add_cate.html
[ log ] hhqblog.com/admin/category/add_cate.html [运行时间：0.027035s][吞吐率：36.99req/s] [内存消耗：3,243.46kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'category',
    2 => 'add_cate',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '43',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/category/index.html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'parent_id' => '17',
  'name' => 'Redis',
  'orderby' => '75',
  'status' => '1',
)
[ info ] [ RUN ] app\admin\controller\Category->add_cate[ /yjdata/www/hhqblog/application/admin/controller/Category.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000304s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000805s ]
[ sql ] [ SQL ] INSERT INTO `think_article_cate` (`parent_id` , `name` , `orderby` , `status` , `update_time` , `create_time`) VALUES (17 , 'Redis' , 75 , 1 , 1502173902 , 1502173902) [ RunTime:0.003338s ]

---------------------------------------------------------------
[ 2017-08-08T14:31:43+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/category/index.html
[ log ] hhqblog.com/admin/category/index.html [运行时间：0.026716s][吞吐率：37.43req/s] [内存消耗：3,340.96kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'category',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/category/index.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Category->index[ /yjdata/www/hhqblog/application/admin/controller/Category.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/category/index.html [ array (
  0 => 'list',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000301s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000822s ]
[ sql ] [ SQL ] SELECT * FROM `think_article_cate` ORDER BY orderby asc,id desc [ RunTime:0.000252s ]

---------------------------------------------------------------
[ 2017-08-08T14:31:49+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.028163s][吞吐率：35.51req/s] [内存消耗：3,944.90kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000291s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000905s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000180s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001119s ]

---------------------------------------------------------------
[ 2017-08-08T14:31:49+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.039459s][吞吐率：25.34req/s] [内存消耗：3,876.15kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000315s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000832s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000164s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001079s ]

---------------------------------------------------------------
[ 2017-08-08T14:31:55+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.022972s][吞吐率：43.53req/s] [内存消耗：2,987.73kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000311s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000830s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000200s ]

---------------------------------------------------------------
[ 2017-08-08T14:32:52+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：1.206706s][吞吐率：0.83req/s] [内存消耗：3,682.86kb] [文件加载：61]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '279970',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundaryfi3yyC37J2I2YzWx',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => '高可用、开源的Redis缓存集群方案',
  'cate_id' => '28',
  'type' => '0',
  'keyword' => 'Redis',
  'remark' => '由于单台Redis服务器的内存管理能力有限，使用过大内存的Redis又会使得服务器的性能急剧下降，一旦服务器发生故障将会影响更大范围业务，而Redis 3.0 beta1支持的集群功能还不适合生产环境的使用。于是为了获取更好的Redis缓存性能及可用性，很多公司都研发了Redis缓存集群方案。现对NetFlix、Twitter、国内的豌豆荚在缓存集群方面的解决方案进行一个汇总，以供读者参考，具体内容如下：',
  'content' => '<p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);">由于单台<a href="http://redis.io/" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">Redis</a>服务器的内存管理能力有限，使用过大内存的Redis又会使得服务器的性能急剧下降，一旦服务器发生故障将会影响更大范围业务，而Redis 3.0 beta1支持的集群功能还不适合生产环境的使用。于是为了获取更好的Redis缓存性能及可用性，很多公司都研发了Redis缓存集群方案。现对<a href="https://www.netflix.com/" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">NetFlix</a>、Twitter、国内的<a href="http://www.wandoujia.com/" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">豌豆荚</a>在缓存集群方面的解决方案进行一个汇总，以供读者参考，具体内容如下：</p><h2 style="margin: 0px 0px 10px; padding: 0px; font-size: 20px; font-weight: normal; border: 0px; float: none; clear: none; width: 610px; color: rgb(34, 34, 34); line-height: 24px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);">1、NetFlix对Dynamo的开源通用实现Dynomite</h2><p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a href="https://github.com/Netflix/dynomite" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">Dynomite</a>是NetFlix对亚马逊分布式存储引擎Dynamo的一个开源通用实现，使用C/C++语言编写、以代理的方式实现的Redis缓存集群方案。Dynomite不仅能够将基于内存的Redis和Memcached打造成分布式数据库，还支持持久化的MySQL、<a href="http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/overview/index.html" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">BerkeleyDB</a>、<a href="http://code.google.com/p/leveldb/" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">LevelDB</a>等数据库，并具有简单、高效、支持跨数据中心的数据复制等优点。Dynomite的最终目标是提供数据库存储引擎不能提供的简单、高效、跨数据中心的数据复制功能。Dynomite遵循<a href="http://www.apache.org/licenses/LICENSE-2.0.html" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">Apache License 2.0开源协议</a>发布，更多关于Dynomite的信息请查看NetFlix技术博客对<a href="http://techblog.netflix.com/2014/11/introducing-dynomite.html" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">Dynomite的介绍</a>。</p><h2 style="margin: 0px 0px 10px; padding: 0px; font-size: 20px; font-weight: normal; border: 0px; float: none; clear: none; width: 610px; color: rgb(34, 34, 34); line-height: 24px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);">2、Twitter的Redis/Memcached代理服务Twemproxy</h2><p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a href="https://github.com/twitter/twemproxy" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">Twemproxy</a>是一个使用C语言编写、以代理的方式实现的、轻量级的Redis代理服务器，它通过引入一个代理层，将应用程序后端的多台Redis实例进行统一管理，使应用程序只需要在Twemproxy上进行操作，而不用关心后面具体有多少个真实的Redis或Memcached实例，从而实现了基于Redis和Memcached的集群服务。当某个节点宕掉时，Twemproxy可以自动将它从集群中剔除，而当它恢复服务时，Twemproxy也会自动连接。由于是代理，所以Twemproxy会有微小的性能损失。根据 Redis作者的测试结果，在大多数情况下，Twemproxy的性能相当不错，同直接操作Redis相比，最多只有20%的性能损失。Twemproxy遵循Apache License 2.0开源协议发布，更多关于Twemproxy的信息请登录其在GitHub的主页查看。</p><h2 style="margin: 0px 0px 10px; padding: 0px; font-size: 20px; font-weight: normal; border: 0px; float: none; clear: none; width: 610px; color: rgb(34, 34, 34); line-height: 24px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);">3、豌豆荚的 Redis 集群解决方案Codis</h2><p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a href="https://github.com/wandoulabs/codis" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">Codis</a>是豌豆荚使用Go和C语言开发、以代理的方式实现的一个Redis分布式集群解决方案,且完全兼容Twemproxy。Twemproxy对于上一层的应用来说, 连接Codis Proxy（Redis代理服务）和连接原生的Redis服务器没有明显的区别,上一层应用能够像使用单机的 Redis一样对待。Codis底层会处理请求的转发、不停机的数据迁移等工作, 所有底层的一切处理, 对于客户端来说是透明的。总之，可以简单的认为后台连接的是一个内存无限大的Redis服务。Codis遵循<a href="http://zh.wikipedia.org/wiki/MIT%E8%A8%B1%E5%8F%AF%E8%AD%89" style="text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;">MIT开源协议</a>发布，更多关于Codis的信息请登录其在GitHub的主页查看。</p><p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);">另外，还有一些未开源的解决方案，比如新浪、百度、淘宝、腾讯等的Redis集群方案。在Redis官方正式推出可用于生产环境的集群方案前，以上三种方案是非常值得考虑在生产环境使用的方案。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000311s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000871s ]
[ sql ] [ SQL ] INSERT INTO `think_article` (`title` , `cate_id` , `type` , `keyword` , `remark` , `content` , `is_tui` , `status` , `views` , `auth` , `photo` , `ip` , `update_time` , `create_time`) VALUES ('高可用、开源的Redis缓存集群方案' , 28 , 0 , 'Redis' , '由于单台Redis服务器的内存管理能力有限，使用过大内存的Redis又会使得服务器的性能急剧下降，一旦服务器发生故障将会影响更大范围业务，而Redis 3.0 beta1支持的集群功能还不适合生产环境的使用。于是为了获取更好的Redis缓存性能及可用性，很多公司都研发了Redis缓存集群方案。现对NetFlix、Twitter、国内的豌豆荚在缓存集群方面的解决方案进行一个汇总，以供读者参考，具体内容如下：' , '<p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">由于单台<a href=\"http://redis.io/\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">Redis</a>服务器的内存管理能力有限，使用过大内存的Redis又会使得服务器的性能急剧下降，一旦服务器发生故障将会影响更大范围业务，而Redis 3.0 beta1支持的集群功能还不适合生产环境的使用。于是为了获取更好的Redis缓存性能及可用性，很多公司都研发了Redis缓存集群方案。现对<a href=\"https://www.netflix.com/\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">NetFlix</a>、Twitter、国内的<a href=\"http://www.wandoujia.com/\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">豌豆荚</a>在缓存集群方面的解决方案进行一个汇总，以供读者参考，具体内容如下：</p><h2 style=\"margin: 0px 0px 10px; padding: 0px; font-size: 20px; font-weight: normal; border: 0px; float: none; clear: none; width: 610px; color: rgb(34, 34, 34); line-height: 24px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">1、NetFlix对Dynamo的开源通用实现Dynomite</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"https://github.com/Netflix/dynomite\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">Dynomite</a>是NetFlix对亚马逊分布式存储引擎Dynamo的一个开源通用实现，使用C/C++语言编写、以代理的方式实现的Redis缓存集群方案。Dynomite不仅能够将基于内存的Redis和Memcached打造成分布式数据库，还支持持久化的MySQL、<a href=\"http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/overview/index.html\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">BerkeleyDB</a>、<a href=\"http://code.google.com/p/leveldb/\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">LevelDB</a>等数据库，并具有简单、高效、支持跨数据中心的数据复制等优点。Dynomite的最终目标是提供数据库存储引擎不能提供的简单、高效、跨数据中心的数据复制功能。Dynomite遵循<a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">Apache License 2.0开源协议</a>发布，更多关于Dynomite的信息请查看NetFlix技术博客对<a href=\"http://techblog.netflix.com/2014/11/introducing-dynomite.html\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">Dynomite的介绍</a>。</p><h2 style=\"margin: 0px 0px 10px; padding: 0px; font-size: 20px; font-weight: normal; border: 0px; float: none; clear: none; width: 610px; color: rgb(34, 34, 34); line-height: 24px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">2、Twitter的Redis/Memcached代理服务Twemproxy</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"https://github.com/twitter/twemproxy\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">Twemproxy</a>是一个使用C语言编写、以代理的方式实现的、轻量级的Redis代理服务器，它通过引入一个代理层，将应用程序后端的多台Redis实例进行统一管理，使应用程序只需要在Twemproxy上进行操作，而不用关心后面具体有多少个真实的Redis或Memcached实例，从而实现了基于Redis和Memcached的集群服务。当某个节点宕掉时，Twemproxy可以自动将它从集群中剔除，而当它恢复服务时，Twemproxy也会自动连接。由于是代理，所以Twemproxy会有微小的性能损失。根据 Redis作者的测试结果，在大多数情况下，Twemproxy的性能相当不错，同直接操作Redis相比，最多只有20%的性能损失。Twemproxy遵循Apache License 2.0开源协议发布，更多关于Twemproxy的信息请登录其在GitHub的主页查看。</p><h2 style=\"margin: 0px 0px 10px; padding: 0px; font-size: 20px; font-weight: normal; border: 0px; float: none; clear: none; width: 610px; color: rgb(34, 34, 34); line-height: 24px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">3、豌豆荚的 Redis 集群解决方案Codis</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"https://github.com/wandoulabs/codis\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">Codis</a>是豌豆荚使用Go和C语言开发、以代理的方式实现的一个Redis分布式集群解决方案,且完全兼容Twemproxy。Twemproxy对于上一层的应用来说, 连接Codis Proxy（Redis代理服务）和连接原生的Redis服务器没有明显的区别,上一层应用能够像使用单机的 Redis一样对待。Codis底层会处理请求的转发、不停机的数据迁移等工作, 所有底层的一切处理, 对于客户端来说是透明的。总之，可以简单的认为后台连接的是一个内存无限大的Redis服务。Codis遵循<a href=\"http://zh.wikipedia.org/wiki/MIT%E8%A8%B1%E5%8F%AF%E8%AD%89\" style=\"text-decoration-line: none; color: rgb(40, 106, 178); margin: 0px; border: 0px; padding: 0px; outline: none !important;\">MIT开源协议</a>发布，更多关于Codis的信息请登录其在GitHub的主页查看。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 1.8; clear: both; width: 610px; font-family: Helvetica, &quot;Open Sans&quot;, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, 微软雅黑, STHeiti, &quot;WenQuanYi Micro Hei&quot;, SimSun, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">另外，还有一些未开源的解决方案，比如新浪、百度、淘宝、腾讯等的Redis集群方案。在Redis官方正式推出可用于生产环境的集群方案前，以上三种方案是非常值得考虑在生产环境使用的方案。</p><p><br/></p>' , 1 , 1 , 1 , '韩会强' , 'images/j637li60_2iwa7t8ekm4z59895b135127a.jpg' , '123.233.116.122' , 1502173971 , 1502173971) [ RunTime:0.003323s ]

---------------------------------------------------------------
[ 2017-08-08T14:32:54+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.026852s][吞吐率：37.24req/s] [内存消耗：3,950.72kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000326s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000840s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000162s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001116s ]

---------------------------------------------------------------
[ 2017-08-08T14:32:54+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.032583s][吞吐率：30.69req/s] [内存消耗：3,881.82kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000307s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000822s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000172s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001108s ]

---------------------------------------------------------------
[ 2017-08-08T14:33:08+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.024364s][吞吐率：41.04req/s] [内存消耗：2,987.91kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000302s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000895s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000214s ]

---------------------------------------------------------------
[ 2017-08-08T14:33:19+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/category/index.html
[ log ] hhqblog.com/admin/category/index.html [运行时间：0.025901s][吞吐率：38.61req/s] [内存消耗：3,341.16kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'category',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Category->index[ /yjdata/www/hhqblog/application/admin/controller/Category.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/category/index.html [ array (
  0 => 'list',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000370s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000793s ]
[ sql ] [ SQL ] SELECT * FROM `think_article_cate` ORDER BY orderby asc,id desc [ RunTime:0.000256s ]

---------------------------------------------------------------
[ 2017-08-08T14:33:45+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/category/add_cate.html
[ log ] hhqblog.com/admin/category/add_cate.html [运行时间：0.026288s][吞吐率：38.04req/s] [内存消耗：3,243.32kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'category',
    2 => 'add_cate',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '74',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/category/index.html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'parent_id' => '17',
  'name' => '网站架构',
  'orderby' => '79',
  'status' => '1',
)
[ info ] [ RUN ] app\admin\controller\Category->add_cate[ /yjdata/www/hhqblog/application/admin/controller/Category.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000297s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000852s ]
[ sql ] [ SQL ] INSERT INTO `think_article_cate` (`parent_id` , `name` , `orderby` , `status` , `update_time` , `create_time`) VALUES (17 , '网站架构' , 79 , 1 , 1502174025 , 1502174025) [ RunTime:0.002456s ]

---------------------------------------------------------------
[ 2017-08-08T14:33:47+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/category/index.html
[ log ] hhqblog.com/admin/category/index.html [运行时间：0.026594s][吞吐率：37.60req/s] [内存消耗：3,343.01kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'category',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/category/index.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Category->index[ /yjdata/www/hhqblog/application/admin/controller/Category.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/category/index.html [ array (
  0 => 'list',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000308s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000799s ]
[ sql ] [ SQL ] SELECT * FROM `think_article_cate` ORDER BY orderby asc,id desc [ RunTime:0.000239s ]

---------------------------------------------------------------
[ 2017-08-08T14:33:51+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.029706s][吞吐率：33.66req/s] [内存消耗：3,950.56kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000331s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000897s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000187s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001107s ]

---------------------------------------------------------------
[ 2017-08-08T14:33:51+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.032996s][吞吐率：30.31req/s] [内存消耗：3,881.82kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000318s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000859s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000170s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001098s ]

---------------------------------------------------------------
[ 2017-08-08T14:33:55+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.023450s][吞吐率：42.64req/s] [内存消耗：2,988.77kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.; _pk_ses.1.3fef=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000314s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000798s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000207s ]

---------------------------------------------------------------
[ 2017-08-08T14:36:15+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.131608s][吞吐率：7.60req/s] [内存消耗：3,793.65kb] [文件加载：61]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '175892',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundary40Sl527ZS6jTcogk',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => '大型网站架构演化历程',
  'cate_id' => '29',
  'type' => '0',
  'keyword' => '大型网站架构',
  'remark' => '大型网站的挑战主要来自庞大的用户，高并发的访问和海量数据，任何简单的业务一旦需要处理数以P计的数据和面对数以亿计的用户，问题就会变得棘手。大型网站架构主要就是解决这类问题。更多内容也可以阅读各大互联网公司架构演进之路汇总、大型网站架构技术一览两篇文章。',
  'content' => '<blockquote style="box-sizing: border-box; padding: 15px 20px 1px; margin: 30px; font-size: 16px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: &quot;Microsoft Yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;">大型网站的挑战主要来自庞大的用户，高并发的访问和海量数据，任何简单的业务一旦需要处理数以P计的数据和面对数以亿计的用户，问题就会变得棘手。大型网站架构主要就是解决这类问题。更多内容也可以阅读<a href="http://www.hollischuang.com/archives/1036" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;">各大互联网公司架构演进之路汇总</a>、<a href="http://www.hollischuang.com/archives/1132" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;">大型网站架构技术一览</a>两篇文章。</p></blockquote><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">本文内容大部分来自<a href="http://s.click.taobao.com/Zr8vnex" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;">《大型网站技术架构》</a>,这本书很值得一看，强烈推荐。</p><h2 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin: 18px 0px; font-size: 18px; padding: 10px 0px; border-bottom: 1px solid rgb(234, 234, 234); white-space: normal; background-color: rgb(255, 255, 255);">大型网站系统的特点</h2><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">高并发，大流量</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">需要面对高并发用户，大流量访问。Google 日均 PV 35 亿，日 IP 访问数 3 亿；腾讯 QQ 的最大在线用户数 1.4 亿（2011年数据）。</p><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">高可用</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">系统 7 x 24 小时不间断服务。</p><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">海量数据</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">需要存储、管理海量数据，需要使用大量服务器。Facebook 每周上传的照片数量接近 10 亿，百度收录的网页数目有数百亿，Google 有近百万台服务器为全球用户提供服务。</p><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">用户分布广泛，网络情况复杂</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">许多大型互联网站都是为全球用户提供服务的，用户分布范围广，各地网络情况千差万别。在国内，还有各个运营商网络互通难的问题。</p><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">安全环境恶劣</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">由于互联网的开放性，使得互联网站更容易受到攻击，大型网站几乎每天都会被黑客攻击。</p><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">需求快速变更，发布频繁</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">和传统软件的版本发布频率不同，互联网产品为快速适应市场，满足用户需求，其产品发布频率极高。一般大型网站的产品每周都有新版本发布上线，中小型网站的发布更频繁，有时候一天会发布几十次。</p><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">渐进式发展</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">几乎所有的大型互联网网站都是从一个小网站开始，渐进地发展起来的。Facebook 是扎克伯格同学在哈佛大学的宿舍里开发的；Google 的第一台服务器部署在斯坦福大学的实验室；阿里巴巴是在马云家的客厅诞生的。好的互联网产品都是慢慢运营出来的，不是一开始就开发好的，这也正好与网站架构的发展演化过程对应。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h2 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin: 18px 0px; font-size: 18px; padding: 10px 0px; border-bottom: 1px solid rgb(234, 234, 234); white-space: normal; background-color: rgb(255, 255, 255);">大型网站架构演化发展历程</h2><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">大型网站的技术挑战主要来自于庞大的用户，高并发的访问和海量的数据，任何简单的业务一旦需要处理数以 P 计的数据和面对数以亿计的用户，问题就会变得很棘手。大型网站架构主要解决这类问题。</p><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">初始阶段的网站架构</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">大型网站都是从小型网站发展而来，网站架构也是一样，是从小型网站架构逐步演化而来。小型网站最开始没有太多人访问，只需要一台服务器就绰绰有余，这时的网站架构如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/1.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174171701329.png" alt="1" width="341" height="239" class="alignnone size-full wp-image-729" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">应用程序、数据库、文件等所有资源都在一台服务器上。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">应用服务和数据服务分离</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">随着网站业务的发展，一台服务器逐渐不能满足需求：越来越多的用户访问导致性能越来越差，越来越多的数据导致存储空间不足。这时就需要将应用和数据分离。应用和数据分离后整个网站使用3台服务器：应用服务器、文件服务器和数据库服务器。这 3 台服务器对硬件资源的要求各不相同：</p><blockquote style="box-sizing: border-box; padding: 15px 20px 1px; margin: 30px; font-size: 16px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: &quot;Microsoft Yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;">应用服务器需要处理大量的业务逻辑，因此需要更快更强大的CPU；</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;">数据库服务器需要快速磁盘检索和数据缓存，因此需要更快的磁盘和更大的内存；</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;">文件服务器需要存储大量用户上传的文件，因此需要更大的硬盘。</p></blockquote><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">此时，网站系统的架构如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/2.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174171157442.png" alt="2" width="445" height="317" class="alignnone size-full wp-image-730" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">应用和数据分离后，不同特性的服务器承担不同的服务角色，网站的并发处理能力和数据存储空间得到了很大改善，支持网站业务进一步发展。但是随着用户逐渐增多，网站又一次面临挑战：数据库压力太大导致访问延迟，进而影响整个网站的性能，用户体验受到影响。这时需要对网站架构进一步优化。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">使用缓存改善网站性能</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">网站访问的特点和现实世界的财富分配一样遵循二八定律：80% 的业务访问集中在20% 的数据上。既然大部分业务访问集中在一小部分数据上，那么如果把这一小部分数据缓存在内存中，就可以减少数据库的访问压力，提高整个网站的数据访问速度，改善数据库的写入性能了。 网站使用的缓存可以分为两种：缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器上的远程缓存。</p><blockquote style="box-sizing: border-box; padding: 15px 20px 1px; margin: 30px; font-size: 16px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: &quot;Microsoft Yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;">本地缓存的访问速度更快一些，但是受应用服务器内存限制，其缓存数据量有限，而且会出现和应用程序争用内存的情况。</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;">远程分布式缓存可以使用集群的方式，部署大内存的服务器作为专门的缓存服务器，可以在理论上做到不受内存容量限制的缓存服务。</p></blockquote><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/31.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174171622068.png" alt="3" width="517" height="491" class="alignnone size-full wp-image-731" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">使用缓存后，数据访问压力得到有效缓解，但是单一应用服务器能够处理的请求连接有限，在网站访问高峰期，应用服务器成为整个网站的瓶颈。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">使用应用服务器集群改善网站的并发处理能力</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">使用集群是网站解决高并发、海量数据问题的常用手段。当一台服务器的处理能力、存储空间不足时，不要企图去更换更强大的服务器，对大型网站而言，不管多么强大的服务器，都满足不了网站持续增长的业务需求。这种情况下，更恰当的做法是增加一台服务器分担原有服务器的访问及存储压力。&nbsp;<span style="box-sizing: border-box; font-weight: 700;">对网站架构而言，只要能通过增加一台服务器的方式改善负载压力，就可以以同样的方式持续增加服务器不断改善系统性能，从而实现系统的可伸缩性</span>。应用服务器实现集群是网站可伸缩架构设计中较为简单成熟的一种，如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/4.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174171829553.png" alt="4" width="747" height="459" class="alignnone size-full wp-image-732" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">通过负载均衡调度服务器，可以将来自用户浏览器的访问请求分发到应用服务器集群中的任何一台服务器上，如果有更多用户，就在集群中加入更多的应用服务器，使应用服务器的压力不再成为整个网站的瓶颈。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">数据库读写分离</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">网站在使用缓存后，使对大部分数据读操作访问都可以不通过数据库就能完成，但是仍有一部分读操作（缓存访问不命中、缓存过期）和全部的写操作都需要访问数据库，在网站的用户达到一定规模后，数据库因为负载压力过高而成为网站的瓶颈。 目前大部分的主流数据库都提供主从热备功能，通过配置两台数据库主从关系，可以将一台数据库服务器的数据更新同步到另一台服务器上。网站利用数据库的这一功能，实现数据库读写分离，从而改善数据库负载压力。如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/5.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174172880307.png" alt="5" width="747" height="569" class="alignnone size-full wp-image-733" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">应用服务器在写数据的时候，访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库，这样当应用服务器读数据的时候，就可以通过从数据库获得数据。为了便于应用程序访问读写分离后的数据库，通常在应用服务器端使用专门的数据访问模块，使数据库读写分离对应用透明。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">使用反向代理和 CDN 加速网站响应</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">随着网站业务不断发展，用户规模越来越大，由于中国复杂的网络环境，不同地区的用户访问网站时，速度差别也极大。有研究表明，网站访问延迟和用户流失率正相关，网站访问越慢，用户越容易失去耐心而离开。为了提供更好的用户体验，留住用户，网站需要加速网站访问速度。主要手段有使用 CDN 和方向代理。如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/6.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174172304043.png" alt="6" width="811" height="572" class="alignnone size-full wp-image-734" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">CDN 和反向代理的基本原理都是缓存。</p><blockquote style="box-sizing: border-box; padding: 15px 20px 1px; margin: 30px; font-size: 16px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: &quot;Microsoft Yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;">CDN 部署在网络提供商的机房，使用户在请求网站服务时，可以从距离自己最近的网络提供商机房获取数据</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;">反向代理则部署在网站的中心机房，当用户请求到达中心机房后，首先访问的服务器是反向代理服务器，如果反向代理服务器中缓存着用户请求的资源，就将其直接返回给用户</p></blockquote><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">使用 CDN 和反向代理的目的都是尽早返回数据给用户，一方面加快用户访问速度，另一方面也减轻后端服务器的负载压力。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">使用分布式文件系统和分布式数据库系统</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">任何强大的单一服务器都满足不了大型网站持续增长的业务需求。数据库经过读写分离后，从一台服务器拆分成两台服务器，但是随着网站业务的发展依然不能满足需求，这时需要使用分布式数据库。文件系统也一样，需要使用分布式文件系统。如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/7.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174172574630.png" alt="7" width="808" height="506" class="alignnone size-large wp-image-735" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">分布式数据库是网站数据库拆分的最后手段，只有在单表数据规模非常庞大的时候才使用。不到不得已时，网站更常用的数据库拆分手段是业务分库，将不同业务的数据部署在不同的物理服务器上。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">使用 NoSQL 和搜索引擎</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">随着网站业务越来越复杂，对数据存储和检索的需求也越来越复杂，网站需要采用一些非关系数据库技术如 NoSQL 和非数据库查询技术如搜索引擎。如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/8.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174172394036.png" alt="8" width="808" height="506" class="alignnone size-large wp-image-736" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">NoSQL 和搜索引擎都是源自互联网的技术手段，对可伸缩的分布式特性具有更好的支持。应用服务器则通过一个统一数据访问模块访问各种数据，减轻应用程序管理诸多数据源的麻烦。</p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">业务拆分</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">大型网站为了应对日益复杂的业务场景，通过使用分而治之的手段将整个网站业务分成不同的产品线。如大型购物交易网站都会将首页、商铺、订单、买家、卖家等拆分成不同的产品线，分归不同的业务团队负责。</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">具体到技术上，也会根据产品线划分，将一个网站拆分成许多不同的应用，每个应用独立部署。应用之间可以通过一个超链接建立关系（在首页上的导航链接每个都指向不同的应用地址），也可以通过消息队列进行数据分发，当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统，如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/9.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174172693094.png" alt="9" width="831" height="506" class="alignnone size-large wp-image-737" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><hr style="box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"/><h3 style="box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);">分布式服务</h3><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">随着业务拆分越来越小，存储系统越来越庞大，应用系统的整体复杂度呈指数级增加，部署维护越来越困难。由于所有应用要和所有数据库系统连接，在数万台服务器规模的网站中，这些连接的数目是服务器规模的平方，导致数据库连接资源不足，拒绝服务。</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">既然每一个应用系统都需要执行许多相同的业务操作，比如用户管理、商品管理等，那么可以将这些共用的业务提取出来，独立部署。由这些可复用的业务连接数据库，提供共用业务服务，而应用系统只需要管理用户界面，通过分布式服务调用共用业务服务完成具体业务操作。如下图所示：</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);"><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/10.png" style="box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;"><img src="/ueditor/php/upload/image/20170808/1502174173801246.png" alt="10" width="974" height="506" class="alignnone size-large wp-image-738" style="box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;"/></a></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);">大型网站的架构演化到这里，基本上大多数的技术问题都得以解决，诸如跨数据中心的实时数据同步和具体网站业务相关的问题也都可以通过组合改进现有技术架构解决。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000324s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000884s ]
[ sql ] [ SQL ] INSERT INTO `think_article` (`title` , `cate_id` , `type` , `keyword` , `remark` , `content` , `is_tui` , `status` , `views` , `auth` , `photo` , `ip` , `update_time` , `create_time`) VALUES ('大型网站架构演化历程' , 29 , 0 , '大型网站架构' , '大型网站的挑战主要来自庞大的用户，高并发的访问和海量数据，任何简单的业务一旦需要处理数以P计的数据和面对数以亿计的用户，问题就会变得棘手。大型网站架构主要就是解决这类问题。更多内容也可以阅读各大互联网公司架构演进之路汇总、大型网站架构技术一览两篇文章。' , '<blockquote style=\"box-sizing: border-box; padding: 15px 20px 1px; margin: 30px; font-size: 16px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: &quot;Microsoft Yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;\">大型网站的挑战主要来自庞大的用户，高并发的访问和海量数据，任何简单的业务一旦需要处理数以P计的数据和面对数以亿计的用户，问题就会变得棘手。大型网站架构主要就是解决这类问题。更多内容也可以阅读<a href=\"http://www.hollischuang.com/archives/1036\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\">各大互联网公司架构演进之路汇总</a>、<a href=\"http://www.hollischuang.com/archives/1132\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\">大型网站架构技术一览</a>两篇文章。</p></blockquote><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">本文内容大部分来自<a href=\"http://s.click.taobao.com/Zr8vnex\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\">《大型网站技术架构》</a>,这本书很值得一看，强烈推荐。</p><h2 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin: 18px 0px; font-size: 18px; padding: 10px 0px; border-bottom: 1px solid rgb(234, 234, 234); white-space: normal; background-color: rgb(255, 255, 255);\">大型网站系统的特点</h2><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">高并发，大流量</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">需要面对高并发用户，大流量访问。Google 日均 PV 35 亿，日 IP 访问数 3 亿；腾讯 QQ 的最大在线用户数 1.4 亿（2011年数据）。</p><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">高可用</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">系统 7 x 24 小时不间断服务。</p><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">海量数据</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">需要存储、管理海量数据，需要使用大量服务器。Facebook 每周上传的照片数量接近 10 亿，百度收录的网页数目有数百亿，Google 有近百万台服务器为全球用户提供服务。</p><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">用户分布广泛，网络情况复杂</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">许多大型互联网站都是为全球用户提供服务的，用户分布范围广，各地网络情况千差万别。在国内，还有各个运营商网络互通难的问题。</p><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">安全环境恶劣</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">由于互联网的开放性，使得互联网站更容易受到攻击，大型网站几乎每天都会被黑客攻击。</p><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">需求快速变更，发布频繁</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">和传统软件的版本发布频率不同，互联网产品为快速适应市场，满足用户需求，其产品发布频率极高。一般大型网站的产品每周都有新版本发布上线，中小型网站的发布更频繁，有时候一天会发布几十次。</p><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">渐进式发展</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">几乎所有的大型互联网网站都是从一个小网站开始，渐进地发展起来的。Facebook 是扎克伯格同学在哈佛大学的宿舍里开发的；Google 的第一台服务器部署在斯坦福大学的实验室；阿里巴巴是在马云家的客厅诞生的。好的互联网产品都是慢慢运营出来的，不是一开始就开发好的，这也正好与网站架构的发展演化过程对应。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h2 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin: 18px 0px; font-size: 18px; padding: 10px 0px; border-bottom: 1px solid rgb(234, 234, 234); white-space: normal; background-color: rgb(255, 255, 255);\">大型网站架构演化发展历程</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">大型网站的技术挑战主要来自于庞大的用户，高并发的访问和海量的数据，任何简单的业务一旦需要处理数以 P 计的数据和面对数以亿计的用户，问题就会变得很棘手。大型网站架构主要解决这类问题。</p><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">初始阶段的网站架构</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">大型网站都是从小型网站发展而来，网站架构也是一样，是从小型网站架构逐步演化而来。小型网站最开始没有太多人访问，只需要一台服务器就绰绰有余，这时的网站架构如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/1.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174171701329.png\" alt=\"1\" width=\"341\" height=\"239\" class=\"alignnone size-full wp-image-729\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">应用程序、数据库、文件等所有资源都在一台服务器上。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">应用服务和数据服务分离</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">随着网站业务的发展，一台服务器逐渐不能满足需求：越来越多的用户访问导致性能越来越差，越来越多的数据导致存储空间不足。这时就需要将应用和数据分离。应用和数据分离后整个网站使用3台服务器：应用服务器、文件服务器和数据库服务器。这 3 台服务器对硬件资源的要求各不相同：</p><blockquote style=\"box-sizing: border-box; padding: 15px 20px 1px; margin: 30px; font-size: 16px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: &quot;Microsoft Yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;\">应用服务器需要处理大量的业务逻辑，因此需要更快更强大的CPU；</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;\">数据库服务器需要快速磁盘检索和数据缓存，因此需要更快的磁盘和更大的内存；</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;\">文件服务器需要存储大量用户上传的文件，因此需要更大的硬盘。</p></blockquote><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">此时，网站系统的架构如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/2.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174171157442.png\" alt=\"2\" width=\"445\" height=\"317\" class=\"alignnone size-full wp-image-730\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">应用和数据分离后，不同特性的服务器承担不同的服务角色，网站的并发处理能力和数据存储空间得到了很大改善，支持网站业务进一步发展。但是随着用户逐渐增多，网站又一次面临挑战：数据库压力太大导致访问延迟，进而影响整个网站的性能，用户体验受到影响。这时需要对网站架构进一步优化。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">使用缓存改善网站性能</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">网站访问的特点和现实世界的财富分配一样遵循二八定律：80% 的业务访问集中在20% 的数据上。既然大部分业务访问集中在一小部分数据上，那么如果把这一小部分数据缓存在内存中，就可以减少数据库的访问压力，提高整个网站的数据访问速度，改善数据库的写入性能了。 网站使用的缓存可以分为两种：缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器上的远程缓存。</p><blockquote style=\"box-sizing: border-box; padding: 15px 20px 1px; margin: 30px; font-size: 16px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: &quot;Microsoft Yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;\">本地缓存的访问速度更快一些，但是受应用服务器内存限制，其缓存数据量有限，而且会出现和应用程序争用内存的情况。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;\">远程分布式缓存可以使用集群的方式，部署大内存的服务器作为专门的缓存服务器，可以在理论上做到不受内存容量限制的缓存服务。</p></blockquote><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/31.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174171622068.png\" alt=\"3\" width=\"517\" height=\"491\" class=\"alignnone size-full wp-image-731\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">使用缓存后，数据访问压力得到有效缓解，但是单一应用服务器能够处理的请求连接有限，在网站访问高峰期，应用服务器成为整个网站的瓶颈。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">使用应用服务器集群改善网站的并发处理能力</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">使用集群是网站解决高并发、海量数据问题的常用手段。当一台服务器的处理能力、存储空间不足时，不要企图去更换更强大的服务器，对大型网站而言，不管多么强大的服务器，都满足不了网站持续增长的业务需求。这种情况下，更恰当的做法是增加一台服务器分担原有服务器的访问及存储压力。&nbsp;<span style=\"box-sizing: border-box; font-weight: 700;\">对网站架构而言，只要能通过增加一台服务器的方式改善负载压力，就可以以同样的方式持续增加服务器不断改善系统性能，从而实现系统的可伸缩性</span>。应用服务器实现集群是网站可伸缩架构设计中较为简单成熟的一种，如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/4.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174171829553.png\" alt=\"4\" width=\"747\" height=\"459\" class=\"alignnone size-full wp-image-732\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">通过负载均衡调度服务器，可以将来自用户浏览器的访问请求分发到应用服务器集群中的任何一台服务器上，如果有更多用户，就在集群中加入更多的应用服务器，使应用服务器的压力不再成为整个网站的瓶颈。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">数据库读写分离</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">网站在使用缓存后，使对大部分数据读操作访问都可以不通过数据库就能完成，但是仍有一部分读操作（缓存访问不命中、缓存过期）和全部的写操作都需要访问数据库，在网站的用户达到一定规模后，数据库因为负载压力过高而成为网站的瓶颈。 目前大部分的主流数据库都提供主从热备功能，通过配置两台数据库主从关系，可以将一台数据库服务器的数据更新同步到另一台服务器上。网站利用数据库的这一功能，实现数据库读写分离，从而改善数据库负载压力。如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/5.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174172880307.png\" alt=\"5\" width=\"747\" height=\"569\" class=\"alignnone size-full wp-image-733\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">应用服务器在写数据的时候，访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库，这样当应用服务器读数据的时候，就可以通过从数据库获得数据。为了便于应用程序访问读写分离后的数据库，通常在应用服务器端使用专门的数据访问模块，使数据库读写分离对应用透明。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">使用反向代理和 CDN 加速网站响应</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">随着网站业务不断发展，用户规模越来越大，由于中国复杂的网络环境，不同地区的用户访问网站时，速度差别也极大。有研究表明，网站访问延迟和用户流失率正相关，网站访问越慢，用户越容易失去耐心而离开。为了提供更好的用户体验，留住用户，网站需要加速网站访问速度。主要手段有使用 CDN 和方向代理。如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/6.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174172304043.png\" alt=\"6\" width=\"811\" height=\"572\" class=\"alignnone size-full wp-image-734\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">CDN 和反向代理的基本原理都是缓存。</p><blockquote style=\"box-sizing: border-box; padding: 15px 20px 1px; margin: 30px; font-size: 16px; border-left: 5px solid rgb(238, 238, 238); color: rgb(153, 153, 153); font-family: &quot;Microsoft Yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;\">CDN 部署在网络提供商的机房，使用户在请求网站服务时，可以从距离自己最近的网络提供商机房获取数据</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; word-wrap: break-word; padding: 0px;\">反向代理则部署在网站的中心机房，当用户请求到达中心机房后，首先访问的服务器是反向代理服务器，如果反向代理服务器中缓存着用户请求的资源，就将其直接返回给用户</p></blockquote><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">使用 CDN 和反向代理的目的都是尽早返回数据给用户，一方面加快用户访问速度，另一方面也减轻后端服务器的负载压力。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">使用分布式文件系统和分布式数据库系统</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">任何强大的单一服务器都满足不了大型网站持续增长的业务需求。数据库经过读写分离后，从一台服务器拆分成两台服务器，但是随着网站业务的发展依然不能满足需求，这时需要使用分布式数据库。文件系统也一样，需要使用分布式文件系统。如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/7.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174172574630.png\" alt=\"7\" width=\"808\" height=\"506\" class=\"alignnone size-large wp-image-735\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式数据库是网站数据库拆分的最后手段，只有在单表数据规模非常庞大的时候才使用。不到不得已时，网站更常用的数据库拆分手段是业务分库，将不同业务的数据部署在不同的物理服务器上。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">使用 NoSQL 和搜索引擎</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">随着网站业务越来越复杂，对数据存储和检索的需求也越来越复杂，网站需要采用一些非关系数据库技术如 NoSQL 和非数据库查询技术如搜索引擎。如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/8.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174172394036.png\" alt=\"8\" width=\"808\" height=\"506\" class=\"alignnone size-large wp-image-736\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">NoSQL 和搜索引擎都是源自互联网的技术手段，对可伸缩的分布式特性具有更好的支持。应用服务器则通过一个统一数据访问模块访问各种数据，减轻应用程序管理诸多数据源的麻烦。</p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">业务拆分</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">大型网站为了应对日益复杂的业务场景，通过使用分而治之的手段将整个网站业务分成不同的产品线。如大型购物交易网站都会将首页、商铺、订单、买家、卖家等拆分成不同的产品线，分归不同的业务团队负责。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">具体到技术上，也会根据产品线划分，将一个网站拆分成许多不同的应用，每个应用独立部署。应用之间可以通过一个超链接建立关系（在首页上的导航链接每个都指向不同的应用地址），也可以通过消息队列进行数据分发，当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统，如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/9.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174172693094.png\" alt=\"9\" width=\"831\" height=\"506\" class=\"alignnone size-large wp-image-737\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><hr style=\"box-sizing: content-box; height: 0px; margin-top: 20px; margin-bottom: 20px; border-right: 0px; border-bottom: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"/><h3 style=\"box-sizing: border-box; font-family: &quot;Microsoft Yahei&quot;; line-height: 1.1; color: rgb(85, 85, 85); margin-top: 20px; margin-bottom: 18px; font-size: 16px; padding: 10px 0px; white-space: normal; background-color: rgb(255, 255, 255);\">分布式服务</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">随着业务拆分越来越小，存储系统越来越庞大，应用系统的整体复杂度呈指数级增加，部署维护越来越困难。由于所有应用要和所有数据库系统连接，在数万台服务器规模的网站中，这些连接的数目是服务器规模的平方，导致数据库连接资源不足，拒绝服务。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">既然每一个应用系统都需要执行许多相同的业务操作，比如用户管理、商品管理等，那么可以将这些共用的业务提取出来，独立部署。由这些可复用的业务连接数据库，提供共用业务服务，而应用系统只需要管理用户界面，通过分布式服务调用共用业务服务完成具体业务操作。如下图所示：</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.hollischuang.com/wp-content/uploads/2015/12/10.png\" style=\"box-sizing: border-box; background: 0px 0px; color: rgb(44, 219, 135); transition: all 0.25s;\"><img src=\"/ueditor/php/upload/image/20170808/1502174173801246.png\" alt=\"10\" width=\"974\" height=\"506\" class=\"alignnone size-large wp-image-738\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; margin: 0px auto; display: block; max-width: 100%; height: auto;\"/></a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 18px; word-wrap: break-word; color: rgb(85, 85, 85); font-family: &quot;Microsoft Yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">大型网站的架构演化到这里，基本上大多数的技术问题都得以解决，诸如跨数据中心的实时数据同步和具体网站业务相关的问题也都可以通过组合改进现有技术架构解决。</p><p><br/></p>' , 1 , 1 , 1 , '韩会强' , 'images/j637pvko_5izoto7cxtjz59895bdfb1a46.jpg' , '123.233.116.122' , 1502174175 , 1502174175) [ RunTime:0.004393s ]

---------------------------------------------------------------
[ 2017-08-08T14:36:17+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.030073s][吞吐率：33.25req/s] [内存消耗：3,943.59kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000327s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000928s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000164s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001222s ]

---------------------------------------------------------------
[ 2017-08-08T14:36:17+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.033085s][吞吐率：30.23req/s] [内存消耗：3,874.90kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000304s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000862s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000173s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.001112s ]

---------------------------------------------------------------
[ 2017-08-08T14:36:43+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.023571s][吞吐率：42.42req/s] [内存消耗：2,989.04kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/add_article.html [ array (
  0 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000287s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000814s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000232s ]

---------------------------------------------------------------
[ 2017-08-08T14:37:48+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/add_article.html
[ log ] hhqblog.com/admin/article/add_article.html [运行时间：0.359927s][吞吐率：2.78req/s] [内存消耗：3,837.59kb] [文件加载：61]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'add_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '215353',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'multipart/form-data; boundary=----WebKitFormBoundary5H5claUN8DurieXd',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'title' => '大型网站技术架构-入门梳理',
  'cate_id' => '29',
  'type' => '0',
  'keyword' => '大型网站技术架构-入门梳理',
  'remark' => '本文是对《大型网站架构设计》(李智慧 著)一书的梳理，类似文字版的“思维导图”
全文主要围绕“性能，可用性，伸缩性，扩展性，安全”这五个要素
性能，可用性，伸缩性这几个要素基本都涉及到应用服务器，缓存服务器，存储服务器这几个方面',
  'content' => '<h2 id="articleHeader1" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">前言</h2><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">本文是对《大型网站架构设计》(李智慧 著)一书的梳理，类似文字版的“思维导图”</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">全文主要围绕“性能，可用性，伸缩性，扩展性，安全”这五个要素</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">性能，可用性，伸缩性这几个要素基本都涉及到应用服务器，缓存服务器，存储服务器这几个方面</p></li></ul><h2 id="articleHeader2" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">概述</h2><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">三个纬度：演化、模式、要素</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">五个要素： 性能，可用性，伸缩性，扩展性，安全</p></li></ul><h3 id="articleHeader3" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">演化历程</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">图例可参考&nbsp;<a href="http://www.hollischuang.com/archives/728" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">大型网站架构演化历程</a>：</p><ol style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">初始阶段的网站架构</strong>：一台服务器，上面同时拥有应用程序，数据库，文件，等所有资源。例如 LAMP 架构</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">应用和数据服务分离</strong>：三台服务器（硬件资源各不相同），分别是应用服务器，文件服务器和数据库服务器</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">使用缓存改善网站性能</strong>：分为两种，缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器的远程缓存</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">使用应用服务器集群改善网站并发处理能力</strong>：通过负载均衡调度服务器来将访问请求分发到应用服务器集群中的任何一台机器</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">数据库读写分离</strong>：数据库采用主从热备，应用服务器在写数据时访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库。应用服务器使用专门的数据访问模块从而对应用透明</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">使用反向代理和 CDN 加速网站响应</strong>：这两者基本原理都是缓存。反向代理部署在网站的中心机房，CDN 部署在网络提供商的机房</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">使用分布式文件系统和分布式数据库系统</strong>：数据库拆分的最后手段，更常用的是业务分库</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">使用 NoSQL 和搜索引擎</strong>：对可伸缩的分布式有更好的支持</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">业务拆分</strong>：将整个网站业务拆分成不同的应用，每个应用独立部署维护，应用之间通过超链接建立联系/消息队列进行数据分发/访问同一数据存储系统</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">分布式服务</strong>：公共业务提取出来独立部署</p></li></ol><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/remote/1460000008161251?w=974&amp;h=506" src="https://segmentfault.com/img/remote/1460000008161251?w=974&h=506" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">演化的价值观</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">大型网站架构的核心价值是随网站所需灵活应对</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">驱动大型网站技术发展的主要力量是网站的业务发展</p></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">误区</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">一味追随大公司的解决方案</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">为了技术而技术</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">企图用技术解决所有问题</p></li></ul><h3 id="articleHeader4" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">架构模式</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">模式的关键在于模式的可重复性</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">分层</strong>：横向切分</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">分割</strong>：纵向切分</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">分布式</strong>：分层和分割的主要目的是为了切分后的模块便于分布式部署。常用方案：</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式应用和服务</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式静态资源</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式数据和存储</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式计算</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式配置，分布式锁，分布式文件，等等</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">集群</strong>：多台服务器部署相同的应用构成一个集群，通过负载均衡设备共同对外提供服务</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">缓存</strong>：将数据放距离计算最近的位置加快处理速度，改善性能第一手段，可以加快访问速度，减小后端负载压力。使用缓存&nbsp;<strong style="box-sizing: border-box;">两个前提条件</strong>&nbsp;：1.数据访问热点不均衡；2.数据某时段内有效，不会很快过期</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">CDN</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">反向代理</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">本地缓存</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式缓存</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">异步</strong>：旨在系统解耦。异步架构是典型的消费者生产者模式，特性如下：</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">提高系统可用性</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">加快网站访问速度</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">消除并发访问高峰</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">冗余</strong>：实现高可用。数据库的冷备份和热备份</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">自动化</strong>：包括发布过程自动化，自动化代码管理，自动化测试，自动化安全检测，自动化部署，自动化监控，自动化报警，自动化失效转移，自动化失效恢复，自动化降级，自动化分配资源</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">安全</strong>：密码，手机校验码，加密，验证码，过滤，风险控制</p></li></ul><h3 id="articleHeader5" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">核心要素</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">架构是“最高层次的规划，难以改变的规定”。主要关注五个要素：</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">性能</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">可用性(Availability)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">伸缩性(Scalability)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">扩展性(Extensibility)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">安全性</p></li></ul><h2 id="articleHeader6" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);">架构</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">下面依次对这五个要素进行归纳</p><h3 id="articleHeader7" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">高性能</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">性能的测试指标主要有：</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">响应时间：指应用执行一个操作需要的时间</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">并发数：指系统能够同时处理请求的数目</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">吞吐量：指单位时间内系统处理的请求数量</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">性能计数器：描述服务器或者操作系统性能的一些数据指标</p></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">性能测试方法：</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">性能测试</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">负载测试</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">压力测试</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">稳定性测试</p></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/remote/1460000008161252?w=835&amp;h=381" src="https://segmentfault.com/img/remote/1460000008161252?w=835&h=381" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">性能优化,根据网站分层架构，可以分为三大类：</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">Web 前端性能优化</strong></p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">保护网站安全</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">通过配置缓存功能加速 Web 请求</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">实现负载均衡</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">减少 http 请求</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">使用浏览器缓存</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">启用压缩</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">CSS 放在页面最上面，JavaScript 放在页面最下面</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">减少 Cookie 传输</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">浏览器访问优化</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">CDN 加速：本质是一个缓存，一般缓存静态资源</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">反向代理</p></li></ul><ul style="list-style-type: square;" class=" list-paddingleft-2"></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">应用服务器性能优化</strong>：主要手段有 缓存、集群、异步</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">多线程(设计为无状态，使用局部对象，并发访问资源使用锁)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">资源复用(单例，对象池)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据结构</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">垃圾回收</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式缓存(<em style="box-sizing: border-box;">网站性能优化第一定律：优化考虑使用缓存优化性能</em>)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">异步操作(<em style="box-sizing: border-box;">消息队列，削峰作用</em>)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">使用集群</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">代码优化</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><strong style="box-sizing: border-box;">存储服务器性能优化</strong></p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">机械硬盘 vs. 固态硬盘</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">B+ 树 vs. LSM 树</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">RAID vs. HDFS</p></li></ul></ul><h3 id="articleHeader8" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">高可用</h3><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">高可用的网站架构：目的是保证服务器硬件故障时服务依然可用、数据依然保存并能够被访问，主要手段数据和服务的冗余备份及失效转移</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">高可用的应用：显著特点是应用的无状态性</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Session 复制</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Session 绑定</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">利用 Cookie 记录 Session</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Session 服务器</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">通过负载均衡进行无状态服务的失效转移</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">应用服务器集群的 Session 管理</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">高可用的服务：无状态的服务，可使用类似负载均衡的失效转移策略，此外还有如下策略</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分级管理</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">超时设置</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">异步调用</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">服务降级</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">幂等性设计</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">高可用的数据：主要手段是数据备份和失效转移机制</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">失效确认</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">访问转移</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据恢复</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">冷备：缺点是不能保证数据最终一致和数据可用性</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">热备：分为异步热备和同步热备</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据一致性(Consisitency)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据可用性(Availibility)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分区耐受性(Partition Tolerance)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">CAP 原理</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据备份</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">失效转移：由以下三部分组成</p></li></ul><ul style="list-style-type: square;" class=" list-paddingleft-2"></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">高可用网站的软件质量保证</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">主干开发、分支发布</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分支开发、主干发布</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">网站发布</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">自动化测试</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">预发布验证</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">代码控制</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">自动化发布</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">灰度发布</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">网站运行监控</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">警报系统</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">失效转移</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">自动优雅降级</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">用户行为日志采集（服务器端和客户端）</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">服务器性能监控</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">运行数据报告</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">监控数据采集</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">监控管理</p></li></ul><ul style="list-style-type: square;" class=" list-paddingleft-2"></ul></ul><h3 id="articleHeader9" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">伸缩性</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">大型网站的“大型”是指：</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">用户层面：大量用户及大量访问</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">功能方面：功能庞杂，产品众多</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">技术层面：网站需要部署大量的服务器</p></li></ul><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">伸缩性的分为如下几个方面</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">网站架构的伸缩性设计</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">纵向分离(分层后分离)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">横向分离(业务分割后分离)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">不同功能进行物理分离实现伸缩</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">单一功能通过集群规模实现伸缩</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">应用服务器集群的伸缩性设计</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">轮询(Round Robin, RR)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">加权轮询(Weighted Round Robin, WRR)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">随机(Random)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">最少链接(Least Connections)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">源地址散列(Source Hashing)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">HTTP 重定向负载均衡</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">DNS 域名解析负载均衡</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">反向代理负载均衡(在 HTTP 协议层面，应用层负载均衡)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">IP 负载均衡(在内核进程完成数据分发)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据链路层负载均衡(数据链路层修改 mac 地址，三角传输模式，LVS)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">负载均衡算法</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式缓存集群的伸缩性设计</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Memcached 客户端（包括 API，路由算法，服务器列表，通信模块）</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Memcached 服务器集群</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Memcached 分布式缓存集群的访问模型</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Memcached 分布式缓存集群的伸缩性挑战</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式缓存的一致性 Hash 算法(一致性 Hash 环，虚拟层)</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据存储服务集群的伸缩性设计</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">关系数据库集群的伸缩性设计</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">NoSQL 数据库的伸缩性设计</p></li></ul></ul><h3 id="articleHeader10" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">可扩展</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">系统架构设计层面的“开闭原则”</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">构建可扩展的网站架构</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">利用分布式消息队列降低耦合性</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">事件驱动架构(Event Driven Architecture)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式消息队列</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">利用分布式服务打造可复用的业务平台</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Web Service 与企业级分布式服务</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">大型网站分布式服务的特点</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分布式服务框架设计(Thrift, Dubbo)</p></li></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">可扩展的数据结构(如 ColumnFamily 设计)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">利用开放平台建设网站生态圈</p></li></ul><h3 id="articleHeader11" style="box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);">安全</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">XSS 攻击和 SQL 注入攻击是构成网站应用攻击最主要的两种手段，此外还包括 CSRF,Session 劫持等手段。</p><ul style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">攻击与防御</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Error Code</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">HTML 注释</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">文件上传</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">路径遍历</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">表单 Token</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">验证码</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Referer Check</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">避免被猜到数据库表结构信息</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">消毒</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">参数绑定</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">SQL 注入攻击</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">OS 注入攻击</p></li></ul><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">消毒(即对某些 html 危险字符转义)</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">HttpOnly</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">反射型</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">持久型</p></li></ul><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">XSS 攻击：跨站点脚本攻击（Cross Site Script）</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">XSS 防御手段</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">注入攻击</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">注入防御</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">CSRF 攻击：跨站点请求伪造（Cross Site Request Forgery）</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">CSRF 防御：主要手段是识别请求者身份</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">其他攻击和漏洞</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">Web 应用防火墙（ModSecurity）</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">网站安全漏洞扫描</p></li></ul><ul style="list-style-type: square;" class=" list-paddingleft-2"></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">信息加密技术及密钥安全管理</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">把密钥和算法放在一个独立的服务器上</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">将加解密算法放在应用系统中，密钥放在独立服务器</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">信息传输：公钥加密，私钥解密</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数字签名：私钥加密，公钥解密</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">不可逆，非明文</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">可加盐(salt)增加安全性</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">输入的微小变化会导致输出完全不同</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">单向散列加密：不同输入长度的信息通过散列计算得到固定长度的输出</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">对称加密：加密和解密使用同一个密钥</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">非对称加密</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">密钥安全管理：信息安全传输是靠密钥保证的，改善手段有：</p></li></ul><ul style="list-style-type: square;" class=" list-paddingleft-2"></ul><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">信息过滤与反垃圾</p></li><ul style="list-style-type: square;" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">文本匹配</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">分类算法</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">黑名单</p></li></ul></ul><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->add_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000302s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000879s ]
[ sql ] [ SQL ] INSERT INTO `think_article` (`title` , `cate_id` , `type` , `keyword` , `remark` , `content` , `is_tui` , `status` , `views` , `auth` , `photo` , `ip` , `update_time` , `create_time`) VALUES ('大型网站技术架构-入门梳理' , 29 , 0 , '大型网站技术架构-入门梳理' , '本文是对《大型网站架构设计》(李智慧 著)一书的梳理，类似文字版的“思维导图”\r\n全文主要围绕“性能，可用性，伸缩性，扩展性，安全”这五个要素\r\n性能，可用性，伸缩性这几个要素基本都涉及到应用服务器，缓存服务器，存储服务器这几个方面' , '<h2 id=\"articleHeader1\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">前言</h2><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">本文是对《大型网站架构设计》(李智慧 著)一书的梳理，类似文字版的“思维导图”</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">全文主要围绕“性能，可用性，伸缩性，扩展性，安全”这五个要素</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">性能，可用性，伸缩性这几个要素基本都涉及到应用服务器，缓存服务器，存储服务器这几个方面</p></li></ul><h2 id=\"articleHeader2\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">概述</h2><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">三个纬度：演化、模式、要素</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">五个要素： 性能，可用性，伸缩性，扩展性，安全</p></li></ul><h3 id=\"articleHeader3\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">演化历程</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">图例可参考&nbsp;<a href=\"http://www.hollischuang.com/archives/728\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">大型网站架构演化历程</a>：</p><ol style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">初始阶段的网站架构</strong>：一台服务器，上面同时拥有应用程序，数据库，文件，等所有资源。例如 LAMP 架构</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">应用和数据服务分离</strong>：三台服务器（硬件资源各不相同），分别是应用服务器，文件服务器和数据库服务器</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">使用缓存改善网站性能</strong>：分为两种，缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器的远程缓存</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">使用应用服务器集群改善网站并发处理能力</strong>：通过负载均衡调度服务器来将访问请求分发到应用服务器集群中的任何一台机器</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">数据库读写分离</strong>：数据库采用主从热备，应用服务器在写数据时访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库。应用服务器使用专门的数据访问模块从而对应用透明</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">使用反向代理和 CDN 加速网站响应</strong>：这两者基本原理都是缓存。反向代理部署在网站的中心机房，CDN 部署在网络提供商的机房</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">使用分布式文件系统和分布式数据库系统</strong>：数据库拆分的最后手段，更常用的是业务分库</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">使用 NoSQL 和搜索引擎</strong>：对可伸缩的分布式有更好的支持</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">业务拆分</strong>：将整个网站业务拆分成不同的应用，每个应用独立部署维护，应用之间通过超链接建立联系/消息队列进行数据分发/访问同一数据存储系统</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">分布式服务</strong>：公共业务提取出来独立部署</p></li></ol><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/remote/1460000008161251?w=974&amp;h=506\" src=\"https://segmentfault.com/img/remote/1460000008161251?w=974&h=506\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">演化的价值观</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">大型网站架构的核心价值是随网站所需灵活应对</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">驱动大型网站技术发展的主要力量是网站的业务发展</p></li></ul><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">误区</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">一味追随大公司的解决方案</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">为了技术而技术</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">企图用技术解决所有问题</p></li></ul><h3 id=\"articleHeader4\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">架构模式</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">模式的关键在于模式的可重复性</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">分层</strong>：横向切分</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">分割</strong>：纵向切分</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">分布式</strong>：分层和分割的主要目的是为了切分后的模块便于分布式部署。常用方案：</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式应用和服务</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式静态资源</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式数据和存储</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式计算</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式配置，分布式锁，分布式文件，等等</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">集群</strong>：多台服务器部署相同的应用构成一个集群，通过负载均衡设备共同对外提供服务</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">缓存</strong>：将数据放距离计算最近的位置加快处理速度，改善性能第一手段，可以加快访问速度，减小后端负载压力。使用缓存&nbsp;<strong style=\"box-sizing: border-box;\">两个前提条件</strong>&nbsp;：1.数据访问热点不均衡；2.数据某时段内有效，不会很快过期</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">CDN</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">反向代理</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">本地缓存</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式缓存</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">异步</strong>：旨在系统解耦。异步架构是典型的消费者生产者模式，特性如下：</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">提高系统可用性</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">加快网站访问速度</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">消除并发访问高峰</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">冗余</strong>：实现高可用。数据库的冷备份和热备份</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">自动化</strong>：包括发布过程自动化，自动化代码管理，自动化测试，自动化安全检测，自动化部署，自动化监控，自动化报警，自动化失效转移，自动化失效恢复，自动化降级，自动化分配资源</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">安全</strong>：密码，手机校验码，加密，验证码，过滤，风险控制</p></li></ul><h3 id=\"articleHeader5\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">核心要素</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">架构是“最高层次的规划，难以改变的规定”。主要关注五个要素：</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">性能</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">可用性(Availability)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">伸缩性(Scalability)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">扩展性(Extensibility)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">安全性</p></li></ul><h2 id=\"articleHeader6\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.75em; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; white-space: normal; background-color: rgb(255, 255, 255);\">架构</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">下面依次对这五个要素进行归纳</p><h3 id=\"articleHeader7\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">高性能</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">性能的测试指标主要有：</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">响应时间：指应用执行一个操作需要的时间</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">并发数：指系统能够同时处理请求的数目</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">吞吐量：指单位时间内系统处理的请求数量</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">性能计数器：描述服务器或者操作系统性能的一些数据指标</p></li></ul><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">性能测试方法：</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">性能测试</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">负载测试</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">压力测试</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">稳定性测试</p></li></ul><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/remote/1460000008161252?w=835&amp;h=381\" src=\"https://segmentfault.com/img/remote/1460000008161252?w=835&h=381\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">性能优化,根据网站分层架构，可以分为三大类：</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">Web 前端性能优化</strong></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">保护网站安全</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">通过配置缓存功能加速 Web 请求</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">实现负载均衡</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">减少 http 请求</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">使用浏览器缓存</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">启用压缩</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">CSS 放在页面最上面，JavaScript 放在页面最下面</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">减少 Cookie 传输</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">浏览器访问优化</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">CDN 加速：本质是一个缓存，一般缓存静态资源</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">反向代理</p></li></ul><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">应用服务器性能优化</strong>：主要手段有 缓存、集群、异步</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">多线程(设计为无状态，使用局部对象，并发访问资源使用锁)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">资源复用(单例，对象池)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据结构</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">垃圾回收</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式缓存(<em style=\"box-sizing: border-box;\">网站性能优化第一定律：优化考虑使用缓存优化性能</em>)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">异步操作(<em style=\"box-sizing: border-box;\">消息队列，削峰作用</em>)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">使用集群</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">代码优化</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\"><strong style=\"box-sizing: border-box;\">存储服务器性能优化</strong></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">机械硬盘 vs. 固态硬盘</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">B+ 树 vs. LSM 树</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">RAID vs. HDFS</p></li></ul></ul><h3 id=\"articleHeader8\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">高可用</h3><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">高可用的网站架构：目的是保证服务器硬件故障时服务依然可用、数据依然保存并能够被访问，主要手段数据和服务的冗余备份及失效转移</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">高可用的应用：显著特点是应用的无状态性</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Session 复制</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Session 绑定</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">利用 Cookie 记录 Session</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Session 服务器</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">通过负载均衡进行无状态服务的失效转移</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">应用服务器集群的 Session 管理</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">高可用的服务：无状态的服务，可使用类似负载均衡的失效转移策略，此外还有如下策略</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分级管理</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">超时设置</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">异步调用</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">服务降级</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">幂等性设计</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">高可用的数据：主要手段是数据备份和失效转移机制</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">失效确认</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">访问转移</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据恢复</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">冷备：缺点是不能保证数据最终一致和数据可用性</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">热备：分为异步热备和同步热备</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据一致性(Consisitency)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据可用性(Availibility)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分区耐受性(Partition Tolerance)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">CAP 原理</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据备份</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">失效转移：由以下三部分组成</p></li></ul><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">高可用网站的软件质量保证</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">主干开发、分支发布</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分支开发、主干发布</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">网站发布</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">自动化测试</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">预发布验证</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">代码控制</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">自动化发布</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">灰度发布</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">网站运行监控</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">警报系统</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">失效转移</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">自动优雅降级</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">用户行为日志采集（服务器端和客户端）</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">服务器性能监控</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">运行数据报告</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">监控数据采集</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">监控管理</p></li></ul><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"></ul></ul><h3 id=\"articleHeader9\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">伸缩性</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">大型网站的“大型”是指：</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">用户层面：大量用户及大量访问</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">功能方面：功能庞杂，产品众多</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">技术层面：网站需要部署大量的服务器</p></li></ul><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">伸缩性的分为如下几个方面</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">网站架构的伸缩性设计</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">纵向分离(分层后分离)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">横向分离(业务分割后分离)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">不同功能进行物理分离实现伸缩</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">单一功能通过集群规模实现伸缩</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">应用服务器集群的伸缩性设计</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">轮询(Round Robin, RR)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">加权轮询(Weighted Round Robin, WRR)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">随机(Random)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">最少链接(Least Connections)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">源地址散列(Source Hashing)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">HTTP 重定向负载均衡</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">DNS 域名解析负载均衡</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">反向代理负载均衡(在 HTTP 协议层面，应用层负载均衡)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">IP 负载均衡(在内核进程完成数据分发)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据链路层负载均衡(数据链路层修改 mac 地址，三角传输模式，LVS)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">负载均衡算法</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式缓存集群的伸缩性设计</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Memcached 客户端（包括 API，路由算法，服务器列表，通信模块）</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Memcached 服务器集群</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Memcached 分布式缓存集群的访问模型</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Memcached 分布式缓存集群的伸缩性挑战</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式缓存的一致性 Hash 算法(一致性 Hash 环，虚拟层)</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据存储服务集群的伸缩性设计</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">关系数据库集群的伸缩性设计</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">NoSQL 数据库的伸缩性设计</p></li></ul></ul><h3 id=\"articleHeader10\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">可扩展</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">系统架构设计层面的“开闭原则”</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">构建可扩展的网站架构</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">利用分布式消息队列降低耦合性</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">事件驱动架构(Event Driven Architecture)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式消息队列</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">利用分布式服务打造可复用的业务平台</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Web Service 与企业级分布式服务</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">大型网站分布式服务的特点</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分布式服务框架设计(Thrift, Dubbo)</p></li></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">可扩展的数据结构(如 ColumnFamily 设计)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">利用开放平台建设网站生态圈</p></li></ul><h3 id=\"articleHeader11\" style=\"box-sizing: border-box; font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-weight: 500; line-height: 1.2; color: rgb(51, 51, 51); margin: 1.5em 0px 0px; font-size: 1.5em; white-space: normal; background-color: rgb(255, 255, 255);\">安全</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">XSS 攻击和 SQL 注入攻击是构成网站应用攻击最主要的两种手段，此外还包括 CSRF,Session 劫持等手段。</p><ul style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;WenQuanYi Micro Hei&quot;, &quot;Microsoft Yahei&quot;, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">攻击与防御</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Error Code</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">HTML 注释</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">文件上传</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">路径遍历</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">表单 Token</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">验证码</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Referer Check</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">避免被猜到数据库表结构信息</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">消毒</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">参数绑定</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">SQL 注入攻击</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">OS 注入攻击</p></li></ul><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">消毒(即对某些 html 危险字符转义)</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">HttpOnly</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">反射型</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">持久型</p></li></ul><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">XSS 攻击：跨站点脚本攻击（Cross Site Script）</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">XSS 防御手段</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">注入攻击</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">注入防御</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">CSRF 攻击：跨站点请求伪造（Cross Site Request Forgery）</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">CSRF 防御：主要手段是识别请求者身份</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">其他攻击和漏洞</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">Web 应用防火墙（ModSecurity）</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">网站安全漏洞扫描</p></li></ul><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">信息加密技术及密钥安全管理</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">把密钥和算法放在一个独立的服务器上</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">将加解密算法放在应用系统中，密钥放在独立服务器</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">信息传输：公钥加密，私钥解密</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数字签名：私钥加密，公钥解密</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">不可逆，非明文</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">可加盐(salt)增加安全性</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">输入的微小变化会导致输出完全不同</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">单向散列加密：不同输入长度的信息通过散列计算得到固定长度的输出</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">对称加密：加密和解密使用同一个密钥</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">非对称加密</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">密钥安全管理：信息安全传输是靠密钥保证的，改善手段有：</p></li></ul><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"></ul><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">信息过滤与反垃圾</p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">文本匹配</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">分类算法</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">黑名单</p></li></ul></ul><p><br/></p>' , 1 , 1 , 1 , '韩会强' , 'images/j637rvc0_47gvl84kzy9o59895c3c8738f.jpg' , '123.233.116.122' , 1502174268 , 1502174268) [ RunTime:0.005048s ]

---------------------------------------------------------------
[ 2017-08-08T14:37:50+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.026625s][吞吐率：37.56req/s] [内存消耗：3,775.20kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/add_article.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000299s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000828s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000170s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000810s ]

---------------------------------------------------------------
[ 2017-08-08T14:37:50+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.037400s][吞吐率：26.74req/s] [内存消耗：3,706.16kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000300s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000842s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000164s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000847s ]

---------------------------------------------------------------
[ 2017-08-08T14:38:01+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/edit_article/id/41/html
[ log ] hhqblog.com/admin/article/edit_article/id/41/html [运行时间：0.025991s][吞吐率：38.47req/s] [内存消耗：3,087.39kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '41',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/edit_article.html [ array (
  0 => 'article',
  1 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000305s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000929s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 41 LIMIT 1 [ RunTime:0.000381s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000603s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000160s ]

---------------------------------------------------------------
[ 2017-08-08T14:38:21+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/edit_article.html
[ log ] hhqblog.com/admin/article/edit_article.html [运行时间：0.033211s][吞吐率：30.11req/s] [内存消耗：3,682.54kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '79635',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/41/html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'id' => '41',
  'title' => 'Linux服务器集群系统各概念辨析',
  'cate_id' => '29',
  'type' => '0',
  'keyword' => 'Linux,服务器集群,集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算',
  'remark' => '集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。',
  'file' => '',
  'content' => '<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">造成菜鸟们困惑的原因，主要是广义和狭义，以及目的和客观作用 两个方面。<br style="box-sizing: border-box;"/>所以，太深的概念不必深究，也没有必要吹毛求疵。纯概念化的东西毫无意义，更重要的是它的使用场景，当然，概念在一定程度上本身就是说明了它的使用场景。所有这些概念都是为了解决生产环境的实际问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">那么，我们实际生产环境中都有什么问题呢？</p><ol style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">当数据库性能遇到问题时，是否能够横向扩展，通过添加服务器的方式达到更高的吞吐量，从而充分利用现有的硬件实现更好的投资回报率。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">是否拥有实时同步的副本，当数据库面临灾难时，可以短时间内通过故障转移的方式保证数据库的可用性。此外，当数据丢失或损坏时，能否通过所谓的实时副本（热备）实现数据的零损失。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据库的横向扩展是否对应用程序透明，如果数据库的横向扩展需要应用程序端进行大量修改，则所带来的后果不仅仅是高昂的开发成本，同时也会带来很多潜在和非潜在的风险。</p></li></ol><h2 id="articleHeader0" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">集群和冗余的区别？</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">这两个概念并不是对立关系， 多台服务器做集群（不是主从），本身就有冗余和负载均衡的效果。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">狭义上来说，集群就是把多台服务器虚拟成一台服务器，而冗余的每台服务器都是独立的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">**集群的侧重点在于协同，多台服务器协同分担工作，提升效率。<br style="box-sizing: border-box;"/>冗余的侧重点在于防止单点故障，一主多备的架构，也就是“主从复制”。所以<strong style="box-sizing: border-box;">数据冗余=高可用集群=主从</strong>。**</p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">主从一定程度上起到了负载均衡的作用。但其实主要目的还是为了保证数据冗余和高可用性。<br style="box-sizing: border-box;"/>主从只提供一种成本较低的数据备份方案加上不完美的灾备和负载均衡。由于复制存在时间差，不能同步读，所以只是不完善的负载均衡和有损灾备。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">主从显然达不到集群的严格度，不论是HA 还AA（多活并行集群），主从都达不到数据一致性的集群要求，<br style="box-sizing: border-box;"/>主从很难严格界定是那种模式,可以归类为：有一定冗余度的非一致性异步副本（不可靠不同步），对于没有严格一致性要求的系统，可以定制为分担负载、查询过时报表的一种措施。</p></blockquote><h2 id="articleHeader1" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">集群</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">还是上面提到的，所谓集群，简单来说就是“多台服务器协同分担工作”，重点在“协同”上。所以，任务调度是集群的核心技术，因为集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。</p><h3 id="articleHeader2" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">所谓的负载均衡，高可用，高性能又是什么呢？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">集群有负载均衡集群，高可用集群，高性能集群，分别侧重于抗并发，避免单点故障和大数据下的并行处理。</strong>三者也有不同的实现方法，但同时这三者又是相辅相成的。</p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">Load Balance负载均衡着重在于提供服务并发处理能力的集群。是为了消除性能瓶颈，当然也可以起到备份工作。<strong style="box-sizing: border-box;">把负载压力根据某种算法合理分配到集群中的每一台计算机上，以减轻主服务器的压力，降低对主服务器的硬件和软件要求。</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">实现原理：一个负载均衡器加上一个集群实现的。负载均衡集群中有一个分发器或者叫调度器，我们将其称之为Director，它处在多台服务器的上面，分发器根据内部锁定义的规则或调度方式从下面的服务器群中选择一个以此来响应客户端发送的请求。分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p></blockquote><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">High Available高可用以提升服务在线的能力的集群。<br style="box-sizing: border-box;"/>高可用集群主要是为了避免单点故障存在的,备机平时不参与工作。高可用集群是服务的可用性比较高，当我们某台服务器死机后不会造成我们的服务不可用。其工作模式则是将一个具有故障的服务转交给一个正常工作的服务器，从而达到服务不会中断。一般来说我们集群中工作在前端（分发器）的服务器都会对我们的后端服务器做一个健康检查，如果发现我们服务器当机就不会对其在做转发。<br style="box-sizing: border-box;"/>衡量标准：可用性=在线时间/(在线时间+故障处理时间)<br style="box-sizing: border-box;"/>高可用性群集，是保证业务连续性的有效解决方案，一般有两个或两个以上的节点，且分为活动节点及备用节点。通常把正在执行业务的称为活动节点，而作为活动节点的一个备份的则称为备用节点。当活动节点出现问题，导致正在运行的业务（任务）不能正常运行时，备用节点此时就会侦测到，并立即接续活动节点来执行业务。从而实现业务的不中断或短暂中断。<br style="box-sizing: border-box;"/>实现原理：<strong style="box-sizing: border-box;">利用集群管理软件，当主机故障时，备机能够自动接管主机的工作，并及时切换过去，以实现对用户的不间断服务。</strong></p></blockquote><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">High Performance高性能着重用于处理一个海量任务。高性能的集群是当某一个任务量非常大的时候，我们做一个集群共同来完成这一个任务，所以又被称为“并行处理集群”。<strong style="box-sizing: border-box;">充分利用集群中的每一台计算机的资源，实现复杂运算的并行处理，通常用于科学计算领域，比如基因分 析，化学分析等。</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">实现原理：并行处理集群是将大任务划分为小任务，分别进行处理的机制。一般这样的集群用来科学研究与大数据运算等方面的工作。现在比较火的Hadoop就是使用的并行处理集群。</p></blockquote><h3 id="articleHeader3" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">高可用和负载均衡有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">HA和LB确实不是一个概念。解决方案的侧重点完全不同。HA偏重于备用资源，切机时会有业务的断开的，保证了数据的安全，但造成资源的浪费。LB侧重于资源的充分应用，没有主备的概念，只有资源的最大限度的加权平均应用，基本不会业务的中断。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">从目的上来说：HA的目的是不中断服务，LB的目的是为了提高接入能力，虽然经常放一起用，但确实是两个不同的领域。从功能上来说：HA在一条路不通的时候提供另一条路可走;LB是春运时的多个窗口。通俗来说HA其实就是春运一共有八个窗口售票，但是大家就都集中到一号窗口，一号窗口累趴下了后，大家一起去二号，二号不行去三号，这样就造成了闲置资源的一种浪费，但是LB就相当于八个窗口同时开放，均衡负载，不会使一个窗口(服务器)的压力过大。LB通常采用在负载比较重的网络服务中。一些比较大型的网站和邮件服务，并发量比较大的情况。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">HA和LB是两个概念的问题，一般来说没有谁优谁劣的标准，只有在特定的环境下，谁更适合的问题。 表面看LB一般都包含了高可用性，比HA功能更强，性能更好，但这只是概念上的“先进”,实际中很多场合HA是优选。 至于什么是“好用”,还是那句话，不好说，要看具体环境、应用和价格，没有绝对的好。</p><h3 id="articleHeader4" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">向上拓展和向外拓展（单机和多机）</h3><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">向上拓展：升级单台服务器的硬件。<br style="box-sizing: border-box;"/>缺点是在一定的范围之内它的性能是上升的趋势,但是超出范围之后就是下降的趋势。因为随着它的cpu的个数增加我们需要给我们的cpu仲裁，而且随着cpu个数的增加资源竞争性越大。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">向外拓展：增加新的服务器。 优点是增减服务器很方便，而且没有向上扩展随着增加性能下降。</p></blockquote><h3 id="articleHeader5" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">集群管理工具</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">Docker的Swarm, Fleet, 谷歌的Kubernetes, apache的Mesos<br style="box-sizing: border-box;"/><a href="http://www.sohu.com/a/74693243_183588" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.sohu.com/a/7469324...</a></p><h2 id="articleHeader6" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">负载均衡</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">所谓负载均衡，简单点来说就是“把大访问量分发给不同的服务器”，也就是分流请求。</p><h3 id="articleHeader7" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">六种实现负载均衡的方法？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">LVS集群中实现的三种IP负载均衡技术</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://blog.csdn.net/mengdonghui123456/article/details/53981976" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/mengdong...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/asd141747/article/details/42641319" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/asd14174...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/asqi1/article/details/41478111" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/asqi1/ar...</a></p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">http重定向协议实现负载均衡（HTTP重定向就是应用层的请求转发。用户的请求其实已经到了HTTP重定向负载均衡服务器，服务器根据算法要求用户重定向，用户收到重定向请求后，再次请求真正的集群）<br style="box-sizing: border-box;"/>优点：简单。<br style="box-sizing: border-box;"/>缺点：性能较差。<br style="box-sizing: border-box;"/>　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">dns域名解析负载均衡（DNS域名解析负载均衡就是在用户请求DNS服务器，获取域名对应的IP地址时，DNS服务器直接给出负载均衡后的服务器IP。）<br style="box-sizing: border-box;"/>优点：交给DNS，不用我们去维护负载均衡服务器。<br style="box-sizing: border-box;"/>缺点：当一个应用服务器挂了，不能及时通知DNS，而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和更强大的管理。<br style="box-sizing: border-box;"/>　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">反向代理负载均衡（在用户的请求到达反向代理服务器时（已经到达网站机房），由反向代理服务器根据算法转发到具体的服务器。常用的apache，nginx都可以充当反向代理服务器。）<br style="box-sizing: border-box;"/>优点：部署简单。<br style="box-sizing: border-box;"/>缺点：代理服务器可能成为性能的瓶颈，特别是一次上传大文件。</p></blockquote><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">　　　　　　</p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">IP负载均衡（LVS-NAT，在请求到达负载均衡器后，负载均衡器通过修改请求的目的IP地址，从而实现请求的转发，做到负载均衡。）<br style="box-sizing: border-box;"/>优点：性能更好。<br style="box-sizing: border-box;"/>缺点：负载均衡器的宽带成为瓶颈。　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">直接路由负载均衡（LVS-DR，数据链路层负载均衡（在请求到达负载均衡器后，负载均衡器通过修改请求的mac地址，从而做到负载均衡，与IP负载均衡不一样的是，当请求访问完服务器之后，直接返回客户。而无需再经过负载均衡器。 ））</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">IP隧道负载均衡（LVS-TUN, ）</p></blockquote><h3 id="articleHeader8" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">LVS集群中的IP负载均衡技术</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://www.linuxvirtualserver.org/zh/lvs3.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxvirtualserver...</a><br style="box-sizing: border-box;"/><a href="http://www.cnblogs.com/qq78292959/archive/2012/05/31/2528524.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/qq7829...</a><br style="box-sizing: border-box;"/><a href="http://www.linuxidc.com/Linux/2015-01/112560.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxidc.com/Linux...</a></p><h3 id="articleHeader9" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">负载均衡和反向代理有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">做了反向代理才能实现负载均衡。负载均衡是做反向代理的目的之一。<br style="box-sizing: border-box;"/><a href="https://www.zhihu.com/question/20553431" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://www.zhihu.com/questio...</a></p><h3 id="articleHeader10" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">nginx负载均衡分发请求的几种方式？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">5种<br style="box-sizing: border-box;"/><a href="http://blog.jobbole.com/109320/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.jobbole.com/109320/</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">默认的轮询<br style="box-sizing: border-box;"/>指定权重<br style="box-sizing: border-box;"/>IP绑定IP_hash（每个请求按访问IP的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题）<br style="box-sizing: border-box;"/>第三方的fair和url_hash两种方法</p><h2 id="articleHeader11" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">主从复制</h2><h3 id="articleHeader12" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">主从复制的作用？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">主从是一种用于数据容错和灾备的高可用解决方案，而不是一种处理高并发压力的解决方案（负载均衡是用来抗并发的）。这是一个客观作用和目的的问题。</p><ol style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">主机负责查询，从机负责增删改。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">可以在从机上执行备份，以避免备份期间影响主机的服务。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">主从复制之后，也可以在从机上查询，以降低主机的访问压力。<br style="box-sizing: border-box;"/>但是，只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，实时性要求高的数据仍需从服务器查询。（因为主从复制有同步延迟，所以不能够保证强数据一致性）</p></li></ol><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://www.cnblogs.com/Aiapple/p/5792939.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/Aiappl...</a></p><h3 id="articleHeader13" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">主从复制和读写分离的区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">主从复制是实现读写分离的技术之一，也是实现读写分离的前提条件。<br style="box-sizing: border-box;"/>做读写分离时最重要的就是确保读库和写库的数据统一，而主从复制是实现数据统一最简单的方法（并不能够保证强数据一致性）。<br style="box-sizing: border-box;"/>读写分离，顾名思义，就是一个表只负责向前台页面展示数据，而后台管理人员对表的增删改查在另一个表中，把两个表分开，就是读写分离。<br style="box-sizing: border-box;"/>主从复制则是一个表数据增删改之后会即时更新到另一个表中，保证两个表的数据一致。</p><h3 id="articleHeader14" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">实现主从复制的方法？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="https://segmentfault.com/a/1190000009922696" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://segmentfault.com/a/11...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/hguisu/article/details/7325124/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/hguisu/a...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/forever_young_/article/details/50904268" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/forever_...</a></p><h3 id="articleHeader15" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">如何减少主从复制的同步延迟？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">深入解析Mysql 主从同步延迟原理及解决方案<a href="http://www.cnblogs.com/cnmenglang/p/6393769.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/cnmeng...</a><br style="box-sizing: border-box;"/>MySQL主从数据库同步延迟问题解决<a href="http://www.linuxidc.com/Linux/2014-05/101450.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxidc.com/Linux...</a></p><h3 id="articleHeader16" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">主从复制侧重点不同的几种变形？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://blog.csdn.net/herry2008/article/details/1916258" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/herry200...</a><br style="box-sizing: border-box;"/><a href="http://www.sinoxs.com/htm/2011815/1189.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.sinoxs.com/htm/201...</a><br style="box-sizing: border-box;"/><a href="http://baike.baidu.com/link?url=43g_HldN2au5ir-Htx2JIe2xN2oN2x3DHgjtX1NHsfxjxKm1dM73qcxsagKKTJEG8CXEQZkNdcdJk41UbceBGcbEeaxRa7vWyqJHP57q_Y2e4vvE9GaE7Ept6piLIqtoqN2tyyWcoUEzNR0hNjgRLK" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://baike.baidu.com/link?u...</a><br style="box-sizing: border-box;"/><a href="https://www.baidu.com/baidu?wd=%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87&tn=monline_4_dg&ie=utf-8" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://www.baidu.com/baidu?w...</a><br style="box-sizing: border-box;"/><a href="http://aaronsa.blog.51cto.com/5157083/1741485/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://aaronsa.blog.51cto.com...</a><br style="box-sizing: border-box;"/>双机热备，双机互备，双机双工</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">双机热备（主从复制）：主机+备机，<br style="box-sizing: border-box;"/>双机互备：主机（备机）+备机（主机），互为主备<br style="box-sizing: border-box;"/>双机双工：主机+主机，两台机器同时运行。</p><h2 id="articleHeader17" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">分布式</h2><h3 id="articleHeader18" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">什么是分布式计算？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://blog.csdn.net/u010926964/article/details/50955139" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/u0109269...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/u010926964/article/details/50985368" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/u0109269...</a></p><h3 id="articleHeader19" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">分布式和集群有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="https://my.oschina.net/u/1246814/blog/267522" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://my.oschina.net/u/1246...</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">广义上的分布式是指===》将不同的服务分布在不同的服务器上，<br style="box-sizing: border-box;"/>而集群指的是===》将几台服务器集中在一起，实现同一业务。<br style="box-sizing: border-box;"/>分布式中的每一个节点，都可以做集群。<br style="box-sizing: border-box;"/>而集群并不一定是分布式的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">举例：就比如新浪网，访问的人多了，他可以做一个群集，前面放一个响应服务器，后面几台服务器完成同一业务，如果有业务访问的时候，响应服务器看哪台服务器的负载不是很重，就将给哪一台去完成。<br style="box-sizing: border-box;"/>而分布式，从窄意上理解，也跟集群差不多，但是它的组织比较松散，不像集群，有一个组织性，一台服务器垮了，其它的服务器可以顶上来。<br style="box-sizing: border-box;"/>分布式的每一个节点，都完成不同的业务，一个节点垮了，哪这个业务就不可访问了。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'like' => '0',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000326s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000889s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 41 LIMIT 1 [ RunTime:0.000385s ]
[ sql ] [ SQL ] UPDATE `think_article`  SET `title`='Linux服务器集群系统各概念辨析',`cate_id`=29,`type`=0,`keyword`='Linux,服务器集群,集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算',`remark`='集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。',`content`='<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">造成菜鸟们困惑的原因，主要是广义和狭义，以及目的和客观作用 两个方面。<br style=\"box-sizing: border-box;\"/>所以，太深的概念不必深究，也没有必要吹毛求疵。纯概念化的东西毫无意义，更重要的是它的使用场景，当然，概念在一定程度上本身就是说明了它的使用场景。所有这些概念都是为了解决生产环境的实际问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">那么，我们实际生产环境中都有什么问题呢？</p><ol style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">当数据库性能遇到问题时，是否能够横向扩展，通过添加服务器的方式达到更高的吞吐量，从而充分利用现有的硬件实现更好的投资回报率。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">是否拥有实时同步的副本，当数据库面临灾难时，可以短时间内通过故障转移的方式保证数据库的可用性。此外，当数据丢失或损坏时，能否通过所谓的实时副本（热备）实现数据的零损失。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据库的横向扩展是否对应用程序透明，如果数据库的横向扩展需要应用程序端进行大量修改，则所带来的后果不仅仅是高昂的开发成本，同时也会带来很多潜在和非潜在的风险。</p></li></ol><h2 id=\"articleHeader0\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">集群和冗余的区别？</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">这两个概念并不是对立关系， 多台服务器做集群（不是主从），本身就有冗余和负载均衡的效果。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">狭义上来说，集群就是把多台服务器虚拟成一台服务器，而冗余的每台服务器都是独立的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">**集群的侧重点在于协同，多台服务器协同分担工作，提升效率。<br style=\"box-sizing: border-box;\"/>冗余的侧重点在于防止单点故障，一主多备的架构，也就是“主从复制”。所以<strong style=\"box-sizing: border-box;\">数据冗余=高可用集群=主从</strong>。**</p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">主从一定程度上起到了负载均衡的作用。但其实主要目的还是为了保证数据冗余和高可用性。<br style=\"box-sizing: border-box;\"/>主从只提供一种成本较低的数据备份方案加上不完美的灾备和负载均衡。由于复制存在时间差，不能同步读，所以只是不完善的负载均衡和有损灾备。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">主从显然达不到集群的严格度，不论是HA 还AA（多活并行集群），主从都达不到数据一致性的集群要求，<br style=\"box-sizing: border-box;\"/>主从很难严格界定是那种模式,可以归类为：有一定冗余度的非一致性异步副本（不可靠不同步），对于没有严格一致性要求的系统，可以定制为分担负载、查询过时报表的一种措施。</p></blockquote><h2 id=\"articleHeader1\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">集群</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">还是上面提到的，所谓集群，简单来说就是“多台服务器协同分担工作”，重点在“协同”上。所以，任务调度是集群的核心技术，因为集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。</p><h3 id=\"articleHeader2\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">所谓的负载均衡，高可用，高性能又是什么呢？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">集群有负载均衡集群，高可用集群，高性能集群，分别侧重于抗并发，避免单点故障和大数据下的并行处理。</strong>三者也有不同的实现方法，但同时这三者又是相辅相成的。</p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">Load Balance负载均衡着重在于提供服务并发处理能力的集群。是为了消除性能瓶颈，当然也可以起到备份工作。<strong style=\"box-sizing: border-box;\">把负载压力根据某种算法合理分配到集群中的每一台计算机上，以减轻主服务器的压力，降低对主服务器的硬件和软件要求。</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">实现原理：一个负载均衡器加上一个集群实现的。负载均衡集群中有一个分发器或者叫调度器，我们将其称之为Director，它处在多台服务器的上面，分发器根据内部锁定义的规则或调度方式从下面的服务器群中选择一个以此来响应客户端发送的请求。分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p></blockquote><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">High Available高可用以提升服务在线的能力的集群。<br style=\"box-sizing: border-box;\"/>高可用集群主要是为了避免单点故障存在的,备机平时不参与工作。高可用集群是服务的可用性比较高，当我们某台服务器死机后不会造成我们的服务不可用。其工作模式则是将一个具有故障的服务转交给一个正常工作的服务器，从而达到服务不会中断。一般来说我们集群中工作在前端（分发器）的服务器都会对我们的后端服务器做一个健康检查，如果发现我们服务器当机就不会对其在做转发。<br style=\"box-sizing: border-box;\"/>衡量标准：可用性=在线时间/(在线时间+故障处理时间)<br style=\"box-sizing: border-box;\"/>高可用性群集，是保证业务连续性的有效解决方案，一般有两个或两个以上的节点，且分为活动节点及备用节点。通常把正在执行业务的称为活动节点，而作为活动节点的一个备份的则称为备用节点。当活动节点出现问题，导致正在运行的业务（任务）不能正常运行时，备用节点此时就会侦测到，并立即接续活动节点来执行业务。从而实现业务的不中断或短暂中断。<br style=\"box-sizing: border-box;\"/>实现原理：<strong style=\"box-sizing: border-box;\">利用集群管理软件，当主机故障时，备机能够自动接管主机的工作，并及时切换过去，以实现对用户的不间断服务。</strong></p></blockquote><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">High Performance高性能着重用于处理一个海量任务。高性能的集群是当某一个任务量非常大的时候，我们做一个集群共同来完成这一个任务，所以又被称为“并行处理集群”。<strong style=\"box-sizing: border-box;\">充分利用集群中的每一台计算机的资源，实现复杂运算的并行处理，通常用于科学计算领域，比如基因分 析，化学分析等。</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">实现原理：并行处理集群是将大任务划分为小任务，分别进行处理的机制。一般这样的集群用来科学研究与大数据运算等方面的工作。现在比较火的Hadoop就是使用的并行处理集群。</p></blockquote><h3 id=\"articleHeader3\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">高可用和负载均衡有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">HA和LB确实不是一个概念。解决方案的侧重点完全不同。HA偏重于备用资源，切机时会有业务的断开的，保证了数据的安全，但造成资源的浪费。LB侧重于资源的充分应用，没有主备的概念，只有资源的最大限度的加权平均应用，基本不会业务的中断。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">从目的上来说：HA的目的是不中断服务，LB的目的是为了提高接入能力，虽然经常放一起用，但确实是两个不同的领域。从功能上来说：HA在一条路不通的时候提供另一条路可走;LB是春运时的多个窗口。通俗来说HA其实就是春运一共有八个窗口售票，但是大家就都集中到一号窗口，一号窗口累趴下了后，大家一起去二号，二号不行去三号，这样就造成了闲置资源的一种浪费，但是LB就相当于八个窗口同时开放，均衡负载，不会使一个窗口(服务器)的压力过大。LB通常采用在负载比较重的网络服务中。一些比较大型的网站和邮件服务，并发量比较大的情况。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">HA和LB是两个概念的问题，一般来说没有谁优谁劣的标准，只有在特定的环境下，谁更适合的问题。 表面看LB一般都包含了高可用性，比HA功能更强，性能更好，但这只是概念上的“先进”,实际中很多场合HA是优选。 至于什么是“好用”,还是那句话，不好说，要看具体环境、应用和价格，没有绝对的好。</p><h3 id=\"articleHeader4\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">向上拓展和向外拓展（单机和多机）</h3><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">向上拓展：升级单台服务器的硬件。<br style=\"box-sizing: border-box;\"/>缺点是在一定的范围之内它的性能是上升的趋势,但是超出范围之后就是下降的趋势。因为随着它的cpu的个数增加我们需要给我们的cpu仲裁，而且随着cpu个数的增加资源竞争性越大。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">向外拓展：增加新的服务器。 优点是增减服务器很方便，而且没有向上扩展随着增加性能下降。</p></blockquote><h3 id=\"articleHeader5\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">集群管理工具</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">Docker的Swarm, Fleet, 谷歌的Kubernetes, apache的Mesos<br style=\"box-sizing: border-box;\"/><a href=\"http://www.sohu.com/a/74693243_183588\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.sohu.com/a/7469324...</a></p><h2 id=\"articleHeader6\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">负载均衡</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">所谓负载均衡，简单点来说就是“把大访问量分发给不同的服务器”，也就是分流请求。</p><h3 id=\"articleHeader7\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">六种实现负载均衡的方法？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">LVS集群中实现的三种IP负载均衡技术</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://blog.csdn.net/mengdonghui123456/article/details/53981976\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/mengdong...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/asd141747/article/details/42641319\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/asd14174...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/asqi1/article/details/41478111\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/asqi1/ar...</a></p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">http重定向协议实现负载均衡（HTTP重定向就是应用层的请求转发。用户的请求其实已经到了HTTP重定向负载均衡服务器，服务器根据算法要求用户重定向，用户收到重定向请求后，再次请求真正的集群）<br style=\"box-sizing: border-box;\"/>优点：简单。<br style=\"box-sizing: border-box;\"/>缺点：性能较差。<br style=\"box-sizing: border-box;\"/>　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;\">dns域名解析负载均衡（DNS域名解析负载均衡就是在用户请求DNS服务器，获取域名对应的IP地址时，DNS服务器直接给出负载均衡后的服务器IP。）<br style=\"box-sizing: border-box;\"/>优点：交给DNS，不用我们去维护负载均衡服务器。<br style=\"box-sizing: border-box;\"/>缺点：当一个应用服务器挂了，不能及时通知DNS，而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和更强大的管理。<br style=\"box-sizing: border-box;\"/>　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">反向代理负载均衡（在用户的请求到达反向代理服务器时（已经到达网站机房），由反向代理服务器根据算法转发到具体的服务器。常用的apache，nginx都可以充当反向代理服务器。）<br style=\"box-sizing: border-box;\"/>优点：部署简单。<br style=\"box-sizing: border-box;\"/>缺点：代理服务器可能成为性能的瓶颈，特别是一次上传大文件。</p></blockquote><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">　　　　　　</p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">IP负载均衡（LVS-NAT，在请求到达负载均衡器后，负载均衡器通过修改请求的目的IP地址，从而实现请求的转发，做到负载均衡。）<br style=\"box-sizing: border-box;\"/>优点：性能更好。<br style=\"box-sizing: border-box;\"/>缺点：负载均衡器的宽带成为瓶颈。　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;\">直接路由负载均衡（LVS-DR，数据链路层负载均衡（在请求到达负载均衡器后，负载均衡器通过修改请求的mac地址，从而做到负载均衡，与IP负载均衡不一样的是，当请求访问完服务器之后，直接返回客户。而无需再经过负载均衡器。 ））</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">IP隧道负载均衡（LVS-TUN, ）</p></blockquote><h3 id=\"articleHeader8\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">LVS集群中的IP负载均衡技术</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://www.linuxvirtualserver.org/zh/lvs3.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxvirtualserver...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.cnblogs.com/qq78292959/archive/2012/05/31/2528524.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/qq7829...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.linuxidc.com/Linux/2015-01/112560.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxidc.com/Linux...</a></p><h3 id=\"articleHeader9\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">负载均衡和反向代理有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">做了反向代理才能实现负载均衡。负载均衡是做反向代理的目的之一。<br style=\"box-sizing: border-box;\"/><a href=\"https://www.zhihu.com/question/20553431\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://www.zhihu.com/questio...</a></p><h3 id=\"articleHeader10\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">nginx负载均衡分发请求的几种方式？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">5种<br style=\"box-sizing: border-box;\"/><a href=\"http://blog.jobbole.com/109320/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.jobbole.com/109320/</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">默认的轮询<br style=\"box-sizing: border-box;\"/>指定权重<br style=\"box-sizing: border-box;\"/>IP绑定IP_hash（每个请求按访问IP的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题）<br style=\"box-sizing: border-box;\"/>第三方的fair和url_hash两种方法</p><h2 id=\"articleHeader11\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">主从复制</h2><h3 id=\"articleHeader12\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从复制的作用？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从是一种用于数据容错和灾备的高可用解决方案，而不是一种处理高并发压力的解决方案（负载均衡是用来抗并发的）。这是一个客观作用和目的的问题。</p><ol style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">主机负责查询，从机负责增删改。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">可以在从机上执行备份，以避免备份期间影响主机的服务。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">主从复制之后，也可以在从机上查询，以降低主机的访问压力。<br style=\"box-sizing: border-box;\"/>但是，只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，实时性要求高的数据仍需从服务器查询。（因为主从复制有同步延迟，所以不能够保证强数据一致性）</p></li></ol><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://www.cnblogs.com/Aiapple/p/5792939.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/Aiappl...</a></p><h3 id=\"articleHeader13\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从复制和读写分离的区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从复制是实现读写分离的技术之一，也是实现读写分离的前提条件。<br style=\"box-sizing: border-box;\"/>做读写分离时最重要的就是确保读库和写库的数据统一，而主从复制是实现数据统一最简单的方法（并不能够保证强数据一致性）。<br style=\"box-sizing: border-box;\"/>读写分离，顾名思义，就是一个表只负责向前台页面展示数据，而后台管理人员对表的增删改查在另一个表中，把两个表分开，就是读写分离。<br style=\"box-sizing: border-box;\"/>主从复制则是一个表数据增删改之后会即时更新到另一个表中，保证两个表的数据一致。</p><h3 id=\"articleHeader14\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">实现主从复制的方法？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"https://segmentfault.com/a/1190000009922696\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://segmentfault.com/a/11...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/hguisu/article/details/7325124/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/hguisu/a...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/forever_young_/article/details/50904268\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/forever_...</a></p><h3 id=\"articleHeader15\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">如何减少主从复制的同步延迟？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">深入解析Mysql 主从同步延迟原理及解决方案<a href=\"http://www.cnblogs.com/cnmenglang/p/6393769.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/cnmeng...</a><br style=\"box-sizing: border-box;\"/>MySQL主从数据库同步延迟问题解决<a href=\"http://www.linuxidc.com/Linux/2014-05/101450.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxidc.com/Linux...</a></p><h3 id=\"articleHeader16\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从复制侧重点不同的几种变形？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://blog.csdn.net/herry2008/article/details/1916258\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/herry200...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.sinoxs.com/htm/2011815/1189.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.sinoxs.com/htm/201...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://baike.baidu.com/link?url=43g_HldN2au5ir-Htx2JIe2xN2oN2x3DHgjtX1NHsfxjxKm1dM73qcxsagKKTJEG8CXEQZkNdcdJk41UbceBGcbEeaxRa7vWyqJHP57q_Y2e4vvE9GaE7Ept6piLIqtoqN2tyyWcoUEzNR0hNjgRLK\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://baike.baidu.com/link?u...</a><br style=\"box-sizing: border-box;\"/><a href=\"https://www.baidu.com/baidu?wd=%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87&tn=monline_4_dg&ie=utf-8\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://www.baidu.com/baidu?w...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://aaronsa.blog.51cto.com/5157083/1741485/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://aaronsa.blog.51cto.com...</a><br style=\"box-sizing: border-box;\"/>双机热备，双机互备，双机双工</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">双机热备（主从复制）：主机+备机，<br style=\"box-sizing: border-box;\"/>双机互备：主机（备机）+备机（主机），互为主备<br style=\"box-sizing: border-box;\"/>双机双工：主机+主机，两台机器同时运行。</p><h2 id=\"articleHeader17\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">分布式</h2><h3 id=\"articleHeader18\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">什么是分布式计算？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://blog.csdn.net/u010926964/article/details/50955139\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/u0109269...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/u010926964/article/details/50985368\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/u0109269...</a></p><h3 id=\"articleHeader19\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">分布式和集群有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"https://my.oschina.net/u/1246814/blog/267522\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://my.oschina.net/u/1246...</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">广义上的分布式是指===》将不同的服务分布在不同的服务器上，<br style=\"box-sizing: border-box;\"/>而集群指的是===》将几台服务器集中在一起，实现同一业务。<br style=\"box-sizing: border-box;\"/>分布式中的每一个节点，都可以做集群。<br style=\"box-sizing: border-box;\"/>而集群并不一定是分布式的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">举例：就比如新浪网，访问的人多了，他可以做一个群集，前面放一个响应服务器，后面几台服务器完成同一业务，如果有业务访问的时候，响应服务器看哪台服务器的负载不是很重，就将给哪一台去完成。<br style=\"box-sizing: border-box;\"/>而分布式，从窄意上理解，也跟集群差不多，但是它的组织比较松散，不像集群，有一个组织性，一台服务器垮了，其它的服务器可以顶上来。<br style=\"box-sizing: border-box;\"/>分布式的每一个节点，都完成不同的业务，一个节点垮了，哪这个业务就不可访问了。</p><p><br/></p>',`is_tui`=1,`status`=1,`views`=1,`like`=0,`auth`='韩会强',`ip`='123.233.116.122',`update_time`=1502174301  WHERE  `id` = 41 [ RunTime:0.004968s ]

---------------------------------------------------------------
[ 2017-08-08T14:38:23+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.026707s][吞吐率：37.44req/s] [内存消耗：3,767.44kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/41/html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000299s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000861s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000170s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000848s ]

---------------------------------------------------------------
[ 2017-08-08T14:38:23+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.030030s][吞吐率：33.30req/s] [内存消耗：3,698.59kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000275s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000806s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000156s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000813s ]

---------------------------------------------------------------
[ 2017-08-08T14:38:33+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/edit_article/id/41/html
[ log ] hhqblog.com/admin/article/edit_article/id/41/html [运行时间：0.024764s][吞吐率：40.38req/s] [内存消耗：3,079.86kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '41',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/edit_article.html [ array (
  0 => 'article',
  1 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000292s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000810s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 41 LIMIT 1 [ RunTime:0.000362s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000526s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000160s ]

---------------------------------------------------------------
[ 2017-08-08T14:41:53+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/edit_article.html
[ log ] hhqblog.com/admin/article/edit_article.html [运行时间：0.033856s][吞吐率：29.54req/s] [内存消耗：3,682.47kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '79790',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/41/html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'id' => '41',
  'title' => 'Linux服务器集群系统各概念辨析',
  'cate_id' => '29',
  'type' => '2',
  'keyword' => 'Linux,服务器集群,集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算',
  'remark' => '集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。',
  'file' => '',
  'content' => '<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">造成菜鸟们困惑的原因，主要是广义和狭义，以及目的和客观作用 两个方面。<br style="box-sizing: border-box;"/>所以，太深的概念不必深究，也没有必要吹毛求疵。纯概念化的东西毫无意义，更重要的是它的使用场景，当然，概念在一定程度上本身就是说明了它的使用场景。所有这些概念都是为了解决生产环境的实际问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">那么，我们实际生产环境中都有什么问题呢？</p><ol style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">当数据库性能遇到问题时，是否能够横向扩展，通过添加服务器的方式达到更高的吞吐量，从而充分利用现有的硬件实现更好的投资回报率。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">是否拥有实时同步的副本，当数据库面临灾难时，可以短时间内通过故障转移的方式保证数据库的可用性。此外，当数据丢失或损坏时，能否通过所谓的实时副本（热备）实现数据的零损失。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">数据库的横向扩展是否对应用程序透明，如果数据库的横向扩展需要应用程序端进行大量修改，则所带来的后果不仅仅是高昂的开发成本，同时也会带来很多潜在和非潜在的风险。</p></li></ol><h2 id="articleHeader0" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">集群和冗余的区别？</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">这两个概念并不是对立关系， 多台服务器做集群（不是主从），本身就有冗余和负载均衡的效果。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">狭义上来说，集群就是把多台服务器虚拟成一台服务器，而冗余的每台服务器都是独立的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">**集群的侧重点在于协同，多台服务器协同分担工作，提升效率。<br style="box-sizing: border-box;"/>冗余的侧重点在于防止单点故障，一主多备的架构，也就是“主从复制”。所以<strong style="box-sizing: border-box;">数据冗余=高可用集群=主从</strong>。**</p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">主从一定程度上起到了负载均衡的作用。但其实主要目的还是为了保证数据冗余和高可用性。<br style="box-sizing: border-box;"/>主从只提供一种成本较低的数据备份方案加上不完美的灾备和负载均衡。由于复制存在时间差，不能同步读，所以只是不完善的负载均衡和有损灾备。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">主从显然达不到集群的严格度，不论是HA 还AA（多活并行集群），主从都达不到数据一致性的集群要求，<br style="box-sizing: border-box;"/>主从很难严格界定是那种模式,可以归类为：有一定冗余度的非一致性异步副本（不可靠不同步），对于没有严格一致性要求的系统，可以定制为分担负载、查询过时报表的一种措施。</p></blockquote><h2 id="articleHeader1" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">集群</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">还是上面提到的，所谓集群，简单来说就是“多台服务器协同分担工作”，重点在“协同”上。所以，任务调度是集群的核心技术，因为集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。</p><h3 id="articleHeader2" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">所谓的负载均衡，高可用，高性能又是什么呢？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">集群有负载均衡集群，高可用集群，高性能集群，分别侧重于抗并发，避免单点故障和大数据下的并行处理。</strong>三者也有不同的实现方法，但同时这三者又是相辅相成的。</p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">Load Balance负载均衡着重在于提供服务并发处理能力的集群。是为了消除性能瓶颈，当然也可以起到备份工作。<strong style="box-sizing: border-box;">把负载压力根据某种算法合理分配到集群中的每一台计算机上，以减轻主服务器的压力，降低对主服务器的硬件和软件要求。</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">实现原理：一个负载均衡器加上一个集群实现的。负载均衡集群中有一个分发器或者叫调度器，我们将其称之为Director，它处在多台服务器的上面，分发器根据内部锁定义的规则或调度方式从下面的服务器群中选择一个以此来响应客户端发送的请求。分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p></blockquote><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">High Available高可用以提升服务在线的能力的集群。<br style="box-sizing: border-box;"/>高可用集群主要是为了避免单点故障存在的,备机平时不参与工作。高可用集群是服务的可用性比较高，当我们某台服务器死机后不会造成我们的服务不可用。其工作模式则是将一个具有故障的服务转交给一个正常工作的服务器，从而达到服务不会中断。一般来说我们集群中工作在前端（分发器）的服务器都会对我们的后端服务器做一个健康检查，如果发现我们服务器当机就不会对其在做转发。<br style="box-sizing: border-box;"/>衡量标准：可用性=在线时间/(在线时间+故障处理时间)<br style="box-sizing: border-box;"/>高可用性群集，是保证业务连续性的有效解决方案，一般有两个或两个以上的节点，且分为活动节点及备用节点。通常把正在执行业务的称为活动节点，而作为活动节点的一个备份的则称为备用节点。当活动节点出现问题，导致正在运行的业务（任务）不能正常运行时，备用节点此时就会侦测到，并立即接续活动节点来执行业务。从而实现业务的不中断或短暂中断。<br style="box-sizing: border-box;"/>实现原理：<strong style="box-sizing: border-box;">利用集群管理软件，当主机故障时，备机能够自动接管主机的工作，并及时切换过去，以实现对用户的不间断服务。</strong></p></blockquote><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">High Performance高性能着重用于处理一个海量任务。高性能的集群是当某一个任务量非常大的时候，我们做一个集群共同来完成这一个任务，所以又被称为“并行处理集群”。<strong style="box-sizing: border-box;">充分利用集群中的每一台计算机的资源，实现复杂运算的并行处理，通常用于科学计算领域，比如基因分 析，化学分析等。</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">实现原理：并行处理集群是将大任务划分为小任务，分别进行处理的机制。一般这样的集群用来科学研究与大数据运算等方面的工作。现在比较火的Hadoop就是使用的并行处理集群。</p></blockquote><h3 id="articleHeader3" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">高可用和负载均衡有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">HA和LB确实不是一个概念。解决方案的侧重点完全不同。HA偏重于备用资源，切机时会有业务的断开的，保证了数据的安全，但造成资源的浪费。LB侧重于资源的充分应用，没有主备的概念，只有资源的最大限度的加权平均应用，基本不会业务的中断。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">从目的上来说：HA的目的是不中断服务，LB的目的是为了提高接入能力，虽然经常放一起用，但确实是两个不同的领域。从功能上来说：HA在一条路不通的时候提供另一条路可走;LB是春运时的多个窗口。通俗来说HA其实就是春运一共有八个窗口售票，但是大家就都集中到一号窗口，一号窗口累趴下了后，大家一起去二号，二号不行去三号，这样就造成了闲置资源的一种浪费，但是LB就相当于八个窗口同时开放，均衡负载，不会使一个窗口(服务器)的压力过大。LB通常采用在负载比较重的网络服务中。一些比较大型的网站和邮件服务，并发量比较大的情况。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">HA和LB是两个概念的问题，一般来说没有谁优谁劣的标准，只有在特定的环境下，谁更适合的问题。 表面看LB一般都包含了高可用性，比HA功能更强，性能更好，但这只是概念上的“先进”,实际中很多场合HA是优选。 至于什么是“好用”,还是那句话，不好说，要看具体环境、应用和价格，没有绝对的好。</p><h3 id="articleHeader4" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">向上拓展和向外拓展（单机和多机）</h3><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">向上拓展：升级单台服务器的硬件。<br style="box-sizing: border-box;"/>缺点是在一定的范围之内它的性能是上升的趋势,但是超出范围之后就是下降的趋势。因为随着它的cpu的个数增加我们需要给我们的cpu仲裁，而且随着cpu个数的增加资源竞争性越大。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">向外拓展：增加新的服务器。 优点是增减服务器很方便，而且没有向上扩展随着增加性能下降。</p></blockquote><h3 id="articleHeader5" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">集群管理工具</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">Docker的Swarm, Fleet, 谷歌的Kubernetes, apache的Mesos<br style="box-sizing: border-box;"/><a href="http://www.sohu.com/a/74693243_183588" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.sohu.com/a/7469324...</a></p><h2 id="articleHeader6" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">负载均衡</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">所谓负载均衡，简单点来说就是“把大访问量分发给不同的服务器”，也就是分流请求。</p><h3 id="articleHeader7" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">六种实现负载均衡的方法？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">LVS集群中实现的三种IP负载均衡技术</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://blog.csdn.net/mengdonghui123456/article/details/53981976" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/mengdong...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/asd141747/article/details/42641319" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/asd14174...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/asqi1/article/details/41478111" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/asqi1/ar...</a></p><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">http重定向协议实现负载均衡（HTTP重定向就是应用层的请求转发。用户的请求其实已经到了HTTP重定向负载均衡服务器，服务器根据算法要求用户重定向，用户收到重定向请求后，再次请求真正的集群）<br style="box-sizing: border-box;"/>优点：简单。<br style="box-sizing: border-box;"/>缺点：性能较差。<br style="box-sizing: border-box;"/>　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">dns域名解析负载均衡（DNS域名解析负载均衡就是在用户请求DNS服务器，获取域名对应的IP地址时，DNS服务器直接给出负载均衡后的服务器IP。）<br style="box-sizing: border-box;"/>优点：交给DNS，不用我们去维护负载均衡服务器。<br style="box-sizing: border-box;"/>缺点：当一个应用服务器挂了，不能及时通知DNS，而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和更强大的管理。<br style="box-sizing: border-box;"/>　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">反向代理负载均衡（在用户的请求到达反向代理服务器时（已经到达网站机房），由反向代理服务器根据算法转发到具体的服务器。常用的apache，nginx都可以充当反向代理服务器。）<br style="box-sizing: border-box;"/>优点：部署简单。<br style="box-sizing: border-box;"/>缺点：代理服务器可能成为性能的瓶颈，特别是一次上传大文件。</p></blockquote><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">　　　　　　</p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><blockquote style="box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" white-space:=""><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;">IP负载均衡（LVS-NAT，在请求到达负载均衡器后，负载均衡器通过修改请求的目的IP地址，从而实现请求的转发，做到负载均衡。）<br style="box-sizing: border-box;"/>优点：性能更好。<br style="box-sizing: border-box;"/>缺点：负载均衡器的宽带成为瓶颈。　　　　　　</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;">直接路由负载均衡（LVS-DR，数据链路层负载均衡（在请求到达负载均衡器后，负载均衡器通过修改请求的mac地址，从而做到负载均衡，与IP负载均衡不一样的是，当请求访问完服务器之后，直接返回客户。而无需再经过负载均衡器。 ））</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;">IP隧道负载均衡（LVS-TUN, ）</p></blockquote><h3 id="articleHeader8" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">LVS集群中的IP负载均衡技术</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://www.linuxvirtualserver.org/zh/lvs3.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxvirtualserver...</a><br style="box-sizing: border-box;"/><a href="http://www.cnblogs.com/qq78292959/archive/2012/05/31/2528524.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/qq7829...</a><br style="box-sizing: border-box;"/><a href="http://www.linuxidc.com/Linux/2015-01/112560.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxidc.com/Linux...</a></p><h3 id="articleHeader9" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">负载均衡和反向代理有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">做了反向代理才能实现负载均衡。负载均衡是做反向代理的目的之一。<br style="box-sizing: border-box;"/><a href="https://www.zhihu.com/question/20553431" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://www.zhihu.com/questio...</a></p><h3 id="articleHeader10" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">nginx负载均衡分发请求的几种方式？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">5种<br style="box-sizing: border-box;"/><a href="http://blog.jobbole.com/109320/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.jobbole.com/109320/</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">默认的轮询<br style="box-sizing: border-box;"/>指定权重<br style="box-sizing: border-box;"/>IP绑定IP_hash（每个请求按访问IP的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题）<br style="box-sizing: border-box;"/>第三方的fair和url_hash两种方法</p><h2 id="articleHeader11" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">主从复制</h2><h3 id="articleHeader12" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">主从复制的作用？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">主从是一种用于数据容错和灾备的高可用解决方案，而不是一种处理高并发压力的解决方案（负载均衡是用来抗并发的）。这是一个客观作用和目的的问题。</p><ol style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="" class=" list-paddingleft-2"><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">主机负责查询，从机负责增删改。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">可以在从机上执行备份，以避免备份期间影响主机的服务。</p></li><li><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">主从复制之后，也可以在从机上查询，以降低主机的访问压力。<br style="box-sizing: border-box;"/>但是，只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，实时性要求高的数据仍需从服务器查询。（因为主从复制有同步延迟，所以不能够保证强数据一致性）</p></li></ol><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://www.cnblogs.com/Aiapple/p/5792939.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/Aiappl...</a></p><h3 id="articleHeader13" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">主从复制和读写分离的区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">主从复制是实现读写分离的技术之一，也是实现读写分离的前提条件。<br style="box-sizing: border-box;"/>做读写分离时最重要的就是确保读库和写库的数据统一，而主从复制是实现数据统一最简单的方法（并不能够保证强数据一致性）。<br style="box-sizing: border-box;"/>读写分离，顾名思义，就是一个表只负责向前台页面展示数据，而后台管理人员对表的增删改查在另一个表中，把两个表分开，就是读写分离。<br style="box-sizing: border-box;"/>主从复制则是一个表数据增删改之后会即时更新到另一个表中，保证两个表的数据一致。</p><h3 id="articleHeader14" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">实现主从复制的方法？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="https://segmentfault.com/a/1190000009922696" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://segmentfault.com/a/11...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/hguisu/article/details/7325124/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/hguisu/a...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/forever_young_/article/details/50904268" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/forever_...</a></p><h3 id="articleHeader15" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">如何减少主从复制的同步延迟？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">深入解析Mysql 主从同步延迟原理及解决方案<a href="http://www.cnblogs.com/cnmenglang/p/6393769.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/cnmeng...</a><br style="box-sizing: border-box;"/>MySQL主从数据库同步延迟问题解决<a href="http://www.linuxidc.com/Linux/2014-05/101450.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.linuxidc.com/Linux...</a></p><h3 id="articleHeader16" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">主从复制侧重点不同的几种变形？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://blog.csdn.net/herry2008/article/details/1916258" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/herry200...</a><br style="box-sizing: border-box;"/><a href="http://www.sinoxs.com/htm/2011815/1189.htm" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.sinoxs.com/htm/201...</a><br style="box-sizing: border-box;"/><a href="http://baike.baidu.com/link?url=43g_HldN2au5ir-Htx2JIe2xN2oN2x3DHgjtX1NHsfxjxKm1dM73qcxsagKKTJEG8CXEQZkNdcdJk41UbceBGcbEeaxRa7vWyqJHP57q_Y2e4vvE9GaE7Ept6piLIqtoqN2tyyWcoUEzNR0hNjgRLK" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://baike.baidu.com/link?u...</a><br style="box-sizing: border-box;"/><a href="https://www.baidu.com/baidu?wd=%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87&tn=monline_4_dg&ie=utf-8" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://www.baidu.com/baidu?w...</a><br style="box-sizing: border-box;"/><a href="http://aaronsa.blog.51cto.com/5157083/1741485/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://aaronsa.blog.51cto.com...</a><br style="box-sizing: border-box;"/>双机热备，双机互备，双机双工</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">双机热备（主从复制）：主机+备机，<br style="box-sizing: border-box;"/>双机互备：主机（备机）+备机（主机），互为主备<br style="box-sizing: border-box;"/>双机双工：主机+主机，两台机器同时运行。</p><h2 id="articleHeader17" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">分布式</h2><h3 id="articleHeader18" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">什么是分布式计算？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="http://blog.csdn.net/u010926964/article/details/50955139" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/u0109269...</a><br style="box-sizing: border-box;"/><a href="http://blog.csdn.net/u010926964/article/details/50985368" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://blog.csdn.net/u0109269...</a></p><h3 id="articleHeader19" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" white-space:="" background-color:="">分布式和集群有什么区别？</h3><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a href="https://my.oschina.net/u/1246814/blog/267522" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">https://my.oschina.net/u/1246...</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">广义上的分布式是指===》将不同的服务分布在不同的服务器上，<br style="box-sizing: border-box;"/>而集群指的是===》将几台服务器集中在一起，实现同一业务。<br style="box-sizing: border-box;"/>分布式中的每一个节点，都可以做集群。<br style="box-sizing: border-box;"/>而集群并不一定是分布式的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">举例：就比如新浪网，访问的人多了，他可以做一个群集，前面放一个响应服务器，后面几台服务器完成同一业务，如果有业务访问的时候，响应服务器看哪台服务器的负载不是很重，就将给哪一台去完成。<br style="box-sizing: border-box;"/>而分布式，从窄意上理解，也跟集群差不多，但是它的组织比较松散，不像集群，有一个组织性，一台服务器垮了，其它的服务器可以顶上来。<br style="box-sizing: border-box;"/>分布式的每一个节点，都完成不同的业务，一个节点垮了，哪这个业务就不可访问了。</p><p><span style="color: rgb(255, 0, 0);">本文转载：https://segmentfault.com/a/1190000009923581</span></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'like' => '0',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000378s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000850s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 41 LIMIT 1 [ RunTime:0.000403s ]
[ sql ] [ SQL ] UPDATE `think_article`  SET `title`='Linux服务器集群系统各概念辨析',`cate_id`=29,`type`=2,`keyword`='Linux,服务器集群,集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算',`remark`='集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。',`content`='<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">集群，冗余，负载均衡集群，负载均衡，主从复制，读写分离，分布式，分布式计算，分布式计算平台，并行计算......刚刚踏入服务器架构的菜鸟们往往会被这些概念弄的不知所云，一脸懵逼。那么今天就来谈谈这些概念所代表的意义以及它们的使用场景。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">造成菜鸟们困惑的原因，主要是广义和狭义，以及目的和客观作用 两个方面。<br style=\"box-sizing: border-box;\"/>所以，太深的概念不必深究，也没有必要吹毛求疵。纯概念化的东西毫无意义，更重要的是它的使用场景，当然，概念在一定程度上本身就是说明了它的使用场景。所有这些概念都是为了解决生产环境的实际问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">那么，我们实际生产环境中都有什么问题呢？</p><ol style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">当数据库性能遇到问题时，是否能够横向扩展，通过添加服务器的方式达到更高的吞吐量，从而充分利用现有的硬件实现更好的投资回报率。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">是否拥有实时同步的副本，当数据库面临灾难时，可以短时间内通过故障转移的方式保证数据库的可用性。此外，当数据丢失或损坏时，能否通过所谓的实时副本（热备）实现数据的零损失。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">数据库的横向扩展是否对应用程序透明，如果数据库的横向扩展需要应用程序端进行大量修改，则所带来的后果不仅仅是高昂的开发成本，同时也会带来很多潜在和非潜在的风险。</p></li></ol><h2 id=\"articleHeader0\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">集群和冗余的区别？</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">这两个概念并不是对立关系， 多台服务器做集群（不是主从），本身就有冗余和负载均衡的效果。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">狭义上来说，集群就是把多台服务器虚拟成一台服务器，而冗余的每台服务器都是独立的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">**集群的侧重点在于协同，多台服务器协同分担工作，提升效率。<br style=\"box-sizing: border-box;\"/>冗余的侧重点在于防止单点故障，一主多备的架构，也就是“主从复制”。所以<strong style=\"box-sizing: border-box;\">数据冗余=高可用集群=主从</strong>。**</p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">主从一定程度上起到了负载均衡的作用。但其实主要目的还是为了保证数据冗余和高可用性。<br style=\"box-sizing: border-box;\"/>主从只提供一种成本较低的数据备份方案加上不完美的灾备和负载均衡。由于复制存在时间差，不能同步读，所以只是不完善的负载均衡和有损灾备。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">主从显然达不到集群的严格度，不论是HA 还AA（多活并行集群），主从都达不到数据一致性的集群要求，<br style=\"box-sizing: border-box;\"/>主从很难严格界定是那种模式,可以归类为：有一定冗余度的非一致性异步副本（不可靠不同步），对于没有严格一致性要求的系统，可以定制为分担负载、查询过时报表的一种措施。</p></blockquote><h2 id=\"articleHeader1\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">集群</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">还是上面提到的，所谓集群，简单来说就是“多台服务器协同分担工作”，重点在“协同”上。所以，任务调度是集群的核心技术，因为集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。</p><h3 id=\"articleHeader2\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">所谓的负载均衡，高可用，高性能又是什么呢？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">集群有负载均衡集群，高可用集群，高性能集群，分别侧重于抗并发，避免单点故障和大数据下的并行处理。</strong>三者也有不同的实现方法，但同时这三者又是相辅相成的。</p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">Load Balance负载均衡着重在于提供服务并发处理能力的集群。是为了消除性能瓶颈，当然也可以起到备份工作。<strong style=\"box-sizing: border-box;\">把负载压力根据某种算法合理分配到集群中的每一台计算机上，以减轻主服务器的压力，降低对主服务器的硬件和软件要求。</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">实现原理：一个负载均衡器加上一个集群实现的。负载均衡集群中有一个分发器或者叫调度器，我们将其称之为Director，它处在多台服务器的上面，分发器根据内部锁定义的规则或调度方式从下面的服务器群中选择一个以此来响应客户端发送的请求。分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p></blockquote><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">High Available高可用以提升服务在线的能力的集群。<br style=\"box-sizing: border-box;\"/>高可用集群主要是为了避免单点故障存在的,备机平时不参与工作。高可用集群是服务的可用性比较高，当我们某台服务器死机后不会造成我们的服务不可用。其工作模式则是将一个具有故障的服务转交给一个正常工作的服务器，从而达到服务不会中断。一般来说我们集群中工作在前端（分发器）的服务器都会对我们的后端服务器做一个健康检查，如果发现我们服务器当机就不会对其在做转发。<br style=\"box-sizing: border-box;\"/>衡量标准：可用性=在线时间/(在线时间+故障处理时间)<br style=\"box-sizing: border-box;\"/>高可用性群集，是保证业务连续性的有效解决方案，一般有两个或两个以上的节点，且分为活动节点及备用节点。通常把正在执行业务的称为活动节点，而作为活动节点的一个备份的则称为备用节点。当活动节点出现问题，导致正在运行的业务（任务）不能正常运行时，备用节点此时就会侦测到，并立即接续活动节点来执行业务。从而实现业务的不中断或短暂中断。<br style=\"box-sizing: border-box;\"/>实现原理：<strong style=\"box-sizing: border-box;\">利用集群管理软件，当主机故障时，备机能够自动接管主机的工作，并及时切换过去，以实现对用户的不间断服务。</strong></p></blockquote><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">High Performance高性能着重用于处理一个海量任务。高性能的集群是当某一个任务量非常大的时候，我们做一个集群共同来完成这一个任务，所以又被称为“并行处理集群”。<strong style=\"box-sizing: border-box;\">充分利用集群中的每一台计算机的资源，实现复杂运算的并行处理，通常用于科学计算领域，比如基因分 析，化学分析等。</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">实现原理：并行处理集群是将大任务划分为小任务，分别进行处理的机制。一般这样的集群用来科学研究与大数据运算等方面的工作。现在比较火的Hadoop就是使用的并行处理集群。</p></blockquote><h3 id=\"articleHeader3\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">高可用和负载均衡有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">HA和LB确实不是一个概念。解决方案的侧重点完全不同。HA偏重于备用资源，切机时会有业务的断开的，保证了数据的安全，但造成资源的浪费。LB侧重于资源的充分应用，没有主备的概念，只有资源的最大限度的加权平均应用，基本不会业务的中断。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">从目的上来说：HA的目的是不中断服务，LB的目的是为了提高接入能力，虽然经常放一起用，但确实是两个不同的领域。从功能上来说：HA在一条路不通的时候提供另一条路可走;LB是春运时的多个窗口。通俗来说HA其实就是春运一共有八个窗口售票，但是大家就都集中到一号窗口，一号窗口累趴下了后，大家一起去二号，二号不行去三号，这样就造成了闲置资源的一种浪费，但是LB就相当于八个窗口同时开放，均衡负载，不会使一个窗口(服务器)的压力过大。LB通常采用在负载比较重的网络服务中。一些比较大型的网站和邮件服务，并发量比较大的情况。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">HA和LB是两个概念的问题，一般来说没有谁优谁劣的标准，只有在特定的环境下，谁更适合的问题。 表面看LB一般都包含了高可用性，比HA功能更强，性能更好，但这只是概念上的“先进”,实际中很多场合HA是优选。 至于什么是“好用”,还是那句话，不好说，要看具体环境、应用和价格，没有绝对的好。</p><h3 id=\"articleHeader4\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">向上拓展和向外拓展（单机和多机）</h3><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">向上拓展：升级单台服务器的硬件。<br style=\"box-sizing: border-box;\"/>缺点是在一定的范围之内它的性能是上升的趋势,但是超出范围之后就是下降的趋势。因为随着它的cpu的个数增加我们需要给我们的cpu仲裁，而且随着cpu个数的增加资源竞争性越大。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">向外拓展：增加新的服务器。 优点是增减服务器很方便，而且没有向上扩展随着增加性能下降。</p></blockquote><h3 id=\"articleHeader5\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">集群管理工具</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">Docker的Swarm, Fleet, 谷歌的Kubernetes, apache的Mesos<br style=\"box-sizing: border-box;\"/><a href=\"http://www.sohu.com/a/74693243_183588\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.sohu.com/a/7469324...</a></p><h2 id=\"articleHeader6\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">负载均衡</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">所谓负载均衡，简单点来说就是“把大访问量分发给不同的服务器”，也就是分流请求。</p><h3 id=\"articleHeader7\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">六种实现负载均衡的方法？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">LVS集群中实现的三种IP负载均衡技术</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://blog.csdn.net/mengdonghui123456/article/details/53981976\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/mengdong...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/asd141747/article/details/42641319\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/asd14174...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/asqi1/article/details/41478111\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/asqi1/ar...</a></p><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">http重定向协议实现负载均衡（HTTP重定向就是应用层的请求转发。用户的请求其实已经到了HTTP重定向负载均衡服务器，服务器根据算法要求用户重定向，用户收到重定向请求后，再次请求真正的集群）<br style=\"box-sizing: border-box;\"/>优点：简单。<br style=\"box-sizing: border-box;\"/>缺点：性能较差。<br style=\"box-sizing: border-box;\"/>　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;\">dns域名解析负载均衡（DNS域名解析负载均衡就是在用户请求DNS服务器，获取域名对应的IP地址时，DNS服务器直接给出负载均衡后的服务器IP。）<br style=\"box-sizing: border-box;\"/>优点：交给DNS，不用我们去维护负载均衡服务器。<br style=\"box-sizing: border-box;\"/>缺点：当一个应用服务器挂了，不能及时通知DNS，而且DNS负载均衡的控制权在域名服务商那里，网站无法做更多的改善和更强大的管理。<br style=\"box-sizing: border-box;\"/>　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">反向代理负载均衡（在用户的请求到达反向代理服务器时（已经到达网站机房），由反向代理服务器根据算法转发到具体的服务器。常用的apache，nginx都可以充当反向代理服务器。）<br style=\"box-sizing: border-box;\"/>优点：部署简单。<br style=\"box-sizing: border-box;\"/>缺点：代理服务器可能成为性能的瓶颈，特别是一次上传大文件。</p></blockquote><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">　　　　　　</p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><blockquote style=\"box-sizing: border-box; padding: 10px 20px; margin: 1.5em 0px; font-size: 14px; border-left: 2px solid rgb(0, 154, 97); background: rgb(246, 246, 246); color: rgb(85, 85, 85); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" white-space:=\"\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.5em;\">IP负载均衡（LVS-NAT，在请求到达负载均衡器后，负载均衡器通过修改请求的目的IP地址，从而实现请求的转发，做到负载均衡。）<br style=\"box-sizing: border-box;\"/>优点：性能更好。<br style=\"box-sizing: border-box;\"/>缺点：负载均衡器的宽带成为瓶颈。　　　　　　</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em;\">直接路由负载均衡（LVS-DR，数据链路层负载均衡（在请求到达负载均衡器后，负载均衡器通过修改请求的mac地址，从而做到负载均衡，与IP负载均衡不一样的是，当请求访问完服务器之后，直接返回客户。而无需再经过负载均衡器。 ））</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px;\">IP隧道负载均衡（LVS-TUN, ）</p></blockquote><h3 id=\"articleHeader8\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">LVS集群中的IP负载均衡技术</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://www.linuxvirtualserver.org/zh/lvs3.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxvirtualserver...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.cnblogs.com/qq78292959/archive/2012/05/31/2528524.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/qq7829...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.linuxidc.com/Linux/2015-01/112560.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxidc.com/Linux...</a></p><h3 id=\"articleHeader9\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">负载均衡和反向代理有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">做了反向代理才能实现负载均衡。负载均衡是做反向代理的目的之一。<br style=\"box-sizing: border-box;\"/><a href=\"https://www.zhihu.com/question/20553431\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://www.zhihu.com/questio...</a></p><h3 id=\"articleHeader10\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">nginx负载均衡分发请求的几种方式？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">5种<br style=\"box-sizing: border-box;\"/><a href=\"http://blog.jobbole.com/109320/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.jobbole.com/109320/</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">默认的轮询<br style=\"box-sizing: border-box;\"/>指定权重<br style=\"box-sizing: border-box;\"/>IP绑定IP_hash（每个请求按访问IP的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题）<br style=\"box-sizing: border-box;\"/>第三方的fair和url_hash两种方法</p><h2 id=\"articleHeader11\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">主从复制</h2><h3 id=\"articleHeader12\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从复制的作用？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从是一种用于数据容错和灾备的高可用解决方案，而不是一种处理高并发压力的解决方案（负载均衡是用来抗并发的）。这是一个客观作用和目的的问题。</p><ol style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; margin-left: 3em; padding-left: 0px; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">主机负责查询，从机负责增删改。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">可以在从机上执行备份，以避免备份期间影响主机的服务。</p></li><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;\">主从复制之后，也可以在从机上查询，以降低主机的访问压力。<br style=\"box-sizing: border-box;\"/>但是，只有更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，实时性要求高的数据仍需从服务器查询。（因为主从复制有同步延迟，所以不能够保证强数据一致性）</p></li></ol><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://www.cnblogs.com/Aiapple/p/5792939.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/Aiappl...</a></p><h3 id=\"articleHeader13\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从复制和读写分离的区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从复制是实现读写分离的技术之一，也是实现读写分离的前提条件。<br style=\"box-sizing: border-box;\"/>做读写分离时最重要的就是确保读库和写库的数据统一，而主从复制是实现数据统一最简单的方法（并不能够保证强数据一致性）。<br style=\"box-sizing: border-box;\"/>读写分离，顾名思义，就是一个表只负责向前台页面展示数据，而后台管理人员对表的增删改查在另一个表中，把两个表分开，就是读写分离。<br style=\"box-sizing: border-box;\"/>主从复制则是一个表数据增删改之后会即时更新到另一个表中，保证两个表的数据一致。</p><h3 id=\"articleHeader14\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">实现主从复制的方法？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"https://segmentfault.com/a/1190000009922696\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://segmentfault.com/a/11...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/hguisu/article/details/7325124/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/hguisu/a...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/forever_young_/article/details/50904268\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/forever_...</a></p><h3 id=\"articleHeader15\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">如何减少主从复制的同步延迟？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">深入解析Mysql 主从同步延迟原理及解决方案<a href=\"http://www.cnblogs.com/cnmenglang/p/6393769.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/cnmeng...</a><br style=\"box-sizing: border-box;\"/>MySQL主从数据库同步延迟问题解决<a href=\"http://www.linuxidc.com/Linux/2014-05/101450.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.linuxidc.com/Linux...</a></p><h3 id=\"articleHeader16\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">主从复制侧重点不同的几种变形？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://blog.csdn.net/herry2008/article/details/1916258\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/herry200...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://www.sinoxs.com/htm/2011815/1189.htm\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.sinoxs.com/htm/201...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://baike.baidu.com/link?url=43g_HldN2au5ir-Htx2JIe2xN2oN2x3DHgjtX1NHsfxjxKm1dM73qcxsagKKTJEG8CXEQZkNdcdJk41UbceBGcbEeaxRa7vWyqJHP57q_Y2e4vvE9GaE7Ept6piLIqtoqN2tyyWcoUEzNR0hNjgRLK\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://baike.baidu.com/link?u...</a><br style=\"box-sizing: border-box;\"/><a href=\"https://www.baidu.com/baidu?wd=%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87&tn=monline_4_dg&ie=utf-8\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://www.baidu.com/baidu?w...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://aaronsa.blog.51cto.com/5157083/1741485/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://aaronsa.blog.51cto.com...</a><br style=\"box-sizing: border-box;\"/>双机热备，双机互备，双机双工</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">双机热备（主从复制）：主机+备机，<br style=\"box-sizing: border-box;\"/>双机互备：主机（备机）+备机（主机），互为主备<br style=\"box-sizing: border-box;\"/>双机双工：主机+主机，两台机器同时运行。</p><h2 id=\"articleHeader17\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">分布式</h2><h3 id=\"articleHeader18\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">什么是分布式计算？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://blog.csdn.net/u010926964/article/details/50955139\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/u0109269...</a><br style=\"box-sizing: border-box;\"/><a href=\"http://blog.csdn.net/u010926964/article/details/50985368\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://blog.csdn.net/u0109269...</a></p><h3 id=\"articleHeader19\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">分布式和集群有什么区别？</h3><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"https://my.oschina.net/u/1246814/blog/267522\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">https://my.oschina.net/u/1246...</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">广义上的分布式是指===》将不同的服务分布在不同的服务器上，<br style=\"box-sizing: border-box;\"/>而集群指的是===》将几台服务器集中在一起，实现同一业务。<br style=\"box-sizing: border-box;\"/>分布式中的每一个节点，都可以做集群。<br style=\"box-sizing: border-box;\"/>而集群并不一定是分布式的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">举例：就比如新浪网，访问的人多了，他可以做一个群集，前面放一个响应服务器，后面几台服务器完成同一业务，如果有业务访问的时候，响应服务器看哪台服务器的负载不是很重，就将给哪一台去完成。<br style=\"box-sizing: border-box;\"/>而分布式，从窄意上理解，也跟集群差不多，但是它的组织比较松散，不像集群，有一个组织性，一台服务器垮了，其它的服务器可以顶上来。<br style=\"box-sizing: border-box;\"/>分布式的每一个节点，都完成不同的业务，一个节点垮了，哪这个业务就不可访问了。</p><p><span style=\"color: rgb(255, 0, 0);\">本文转载：https://segmentfault.com/a/1190000009923581</span></p>',`is_tui`=1,`status`=1,`views`=1,`like`=0,`auth`='韩会强',`ip`='123.233.116.122',`update_time`=1502174513  WHERE  `id` = 41 [ RunTime:0.004518s ]

---------------------------------------------------------------
[ 2017-08-08T14:41:54+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.027519s][吞吐率：36.34req/s] [内存消耗：3,767.49kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/41/html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000308s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000830s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000187s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000846s ]

---------------------------------------------------------------
[ 2017-08-08T14:41:55+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.031781s][吞吐率：31.47req/s] [内存消耗：3,698.72kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000310s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000887s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000163s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000876s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:03+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/edit_article/id/42/html
[ log ] hhqblog.com/admin/article/edit_article/id/42/html [运行时间：0.025835s][吞吐率：38.71req/s] [内存消耗：3,075.08kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '42',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/edit_article.html [ array (
  0 => 'article',
  1 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000308s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000844s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 42 LIMIT 1 [ RunTime:0.000417s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000589s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000169s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:13+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/edit_article.html
[ log ] hhqblog.com/admin/article/edit_article.html [运行时间：0.030420s][吞吐率：32.87req/s] [内存消耗：3,599.00kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '45743',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/42/html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'id' => '42',
  'title' => '一个分布式服务器集群架构方案',
  'cate_id' => '29',
  'type' => '0',
  'keyword' => '分布式服务器集群',
  'remark' => '一个分布式服务器集群架构方案',
  'file' => '',
  'content' => '<h1 id="articleHeader0" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">0x01.大型网站演化</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">集群主要分为：高可用集群(High Availability Cluster)，负载均衡集群(Load Balance Cluster，nginx即可实现)，科学计算集群(High Performance Computing Cluster)。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">分布式是指将不同的业务分布在不同的地方；而集群指的是将几台服务器集中在一起，实现同一业务。分布式中的每一个节点，都可以做集群。 而集群并不一定就是分布式的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">之前在网上看到一篇关于大型网站演化的博客。<a rel="nofollow" href="http://www.cnblogs.com/leefreeman/p/3993449.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;"></a><a rel="nofollow" href="http://www.cnblogs.com/leefreeman/p/3993449.html" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">http://www.cnblogs.com/leefreeman/p/3993449.html</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">每个大型网站都会有不同的架构模式，而架构内容也就是在处理均衡负载，缓存，数据库，文件系统等，只是在不同的环境下，不同的条件下，架构的模型不一样，目的旨在提高网站的性能。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">最初的架构只有应用程序，数据库，文件服务。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-1.jpg&amp;objectId=1190000002418709&amp;token=b0c31c6be938e0f9f001f8c99864f764" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-1.jpg&objectId=1190000002418709&token=b0c31c6be938e0f9f001f8c99864f764" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">到后来，分布式服务、集群架设。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-10.jpg&amp;objectId=1190000002418709&amp;token=52cdb401b9ebdc64708779f2415b9fa7" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-10.jpg&objectId=1190000002418709&token=52cdb401b9ebdc64708779f2415b9fa7" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><h1 id="articleHeader1" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">0x02.关于均衡负载方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">在上一篇，<a rel="nofollow" href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">《Nginx反向代理实现均衡负载》</a>讨论过过的nginx现实均衡负载方案，这里选择另一种HAProxy+Keepalived双机高可用均衡负载方案。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">HAProxy是免费、极速且可靠的用于为TCP和基于HTTP应用程序提供高可用、负载均衡和代理服务的解决方案，尤其适用于高负载且需要持久连接或7层处理机制的web站点。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">不论是Haproxy还是Keepalived甚至是上游服务器均提高生产力并增强可用性,也就是如下架构中Haproxy,Keepalived,Httpd服务器任意宕机一台服务还是可以正常运行的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">HAProxy的优点：</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">1、HAProxy是支持虚拟主机的，可以工作在4、7层(支持多网段)；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">2、能够补充Nginx的一些缺点比如Session的保持，Cookie的引导等工作；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">3、支持url检测后端的服务器；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">4、本身仅仅就只是一款负载均衡软件；单纯从效率上来讲HAProxy更会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">5、HAProxy可以对Mysql读进行负载均衡，对后端的MySQL节点进行检测和负载均衡；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-keepalive-haproxy.jpg&amp;objectId=1190000002418709&amp;token=f7a1c5cd0092ca2c2882d3b4e2bde773" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-keepalive-haproxy.jpg&objectId=1190000002418709&token=f7a1c5cd0092ca2c2882d3b4e2bde773" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><h1 id="articleHeader2" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">0x03.关于Redis缓存方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">缓存分为服务器缓存和应用程序缓存。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">关于应用程序内缓存，已经在<a rel="nofollow" href="https://github.com/grasses/Jue-MVC" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">Jue后台框架</a>里面做了模块处理了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">关于服务器缓存，主要缓存服务器文件，减少服务器和php交互，减少均衡负载服务器和应用程序服务器交互。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">缓存里面有一种典型的memcached，现在用的多的是redis轻量级缓存方案。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">关于memcached与redis，看这篇&nbsp;<a rel="nofollow" href="http://www.bigdatalittlegeek.com/blog/2014/3/25/memcached-vs-redis" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">《Memcached vs Redis?》</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">Redis主要将数据存储在各种格式：列表，数组，集合和排序集，一次能接受多个命令，阻塞读写，等待直到另一个进程将数据写入高速缓存。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-redis-cache.jpg&amp;objectId=1190000002418709&amp;token=e42e3ab7a22ac3a9697f9321b90b47e8" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-redis-cache.jpg&objectId=1190000002418709&token=e42e3ab7a22ac3a9697f9321b90b47e8" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">一篇关于Reids缓存方案。<a rel="nofollow" href="http://www.infoq.com/cn/news/2014/11/open-source-redis-cache" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">《高可用、开源的Redis缓存集群方案》</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><h1 id="articleHeader3" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">0x04.关于搜索引擎Sphinx方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">(第一期不做，后期需求时候考虑)</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">Sphinx是俄罗斯人开发的，号称是很吊啦，千万级数据检索，每秒10MB/s，搭过环境。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">Sphinx和MySQL是基于数据库的全文引擎，创建索引是B+树和hash key-value的方式。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">原理类似于用底层C检索MySQL，然后弄出一个sphinx.conf配置文件，索引与搜索均以这个文件为依据进行，要进行全文检索，首先就要配置好sphinx.conf，告诉sphinx哪些字段需要进行索引，哪些字段需要在where,orderby,groupby中用到。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a rel="nofollow" href="http://sphinxsearch.com/wiki/doku.php?id=sphinx_chinese_tutorial" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">Sphinx中文</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><h1 id="articleHeader4" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">0x05.关于NoSQL快速存储方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">NoSQL在这里的使用价值是处理一些琐事，比如用户个人网站的一些css值，height,width,color等等的小而繁多的数据，采用NoSQL旨在提升数据库速度，减少对MySQL的SELECT请求。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">关于NoSQL的方案很多了，选一个简单的MongDB好了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><h1 id="articleHeader5" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">0x06.关于分布式MySQL方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">(做分布式MySQL还没尝试过，初期也不清楚mysql所需要的压力，所以第一期不打算做分布式MySQL)</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><a rel="nofollow" href="http://www.infoq.com/cn/news/2014/11/mysql-five-open-source-project" target="_blank" style="box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;">《标准MySQL数据库外的5个开源兼容方案》</a></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><br style="box-sizing: border-box;"/></p><h1 id="articleHeader6" style="box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">0x07.分布式集群方案</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">综合起来，大致就是如下模型，初探分布式架构，很多模块将就形势做调整，时时更新中，待续。。。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-design.png&amp;objectId=1190000002418709&amp;token=47f5bedac40478ce42e5bd7445f8de89" src="https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-design.png&objectId=1190000002418709&token=47f5bedac40478ce42e5bd7445f8de89" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p><span class="img-wrap" style="box-sizing: border-box;"><br/></span></p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'like' => '0',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000325s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000802s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 42 LIMIT 1 [ RunTime:0.000344s ]
[ sql ] [ SQL ] UPDATE `think_article`  SET `title`='一个分布式服务器集群架构方案',`cate_id`=29,`type`=0,`keyword`='分布式服务器集群',`remark`='一个分布式服务器集群架构方案',`content`='<h1 id=\"articleHeader0\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">0x01.大型网站演化</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">集群主要分为：高可用集群(High Availability Cluster)，负载均衡集群(Load Balance Cluster，nginx即可实现)，科学计算集群(High Performance Computing Cluster)。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">分布式是指将不同的业务分布在不同的地方；而集群指的是将几台服务器集中在一起，实现同一业务。分布式中的每一个节点，都可以做集群。 而集群并不一定就是分布式的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">之前在网上看到一篇关于大型网站演化的博客。<a rel=\"nofollow\" href=\"http://www.cnblogs.com/leefreeman/p/3993449.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\"></a><a rel=\"nofollow\" href=\"http://www.cnblogs.com/leefreeman/p/3993449.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">http://www.cnblogs.com/leefreeman/p/3993449.html</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">每个大型网站都会有不同的架构模式，而架构内容也就是在处理均衡负载，缓存，数据库，文件系统等，只是在不同的环境下，不同的条件下，架构的模型不一样，目的旨在提高网站的性能。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">最初的架构只有应用程序，数据库，文件服务。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-1.jpg&amp;objectId=1190000002418709&amp;token=b0c31c6be938e0f9f001f8c99864f764\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-1.jpg&objectId=1190000002418709&token=b0c31c6be938e0f9f001f8c99864f764\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">到后来，分布式服务、集群架设。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-10.jpg&amp;objectId=1190000002418709&amp;token=52cdb401b9ebdc64708779f2415b9fa7\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-10.jpg&objectId=1190000002418709&token=52cdb401b9ebdc64708779f2415b9fa7\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader1\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">0x02.关于均衡负载方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">在上一篇，<a rel=\"nofollow\" href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">《Nginx反向代理实现均衡负载》</a>讨论过过的nginx现实均衡负载方案，这里选择另一种HAProxy+Keepalived双机高可用均衡负载方案。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">HAProxy是免费、极速且可靠的用于为TCP和基于HTTP应用程序提供高可用、负载均衡和代理服务的解决方案，尤其适用于高负载且需要持久连接或7层处理机制的web站点。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">不论是Haproxy还是Keepalived甚至是上游服务器均提高生产力并增强可用性,也就是如下架构中Haproxy,Keepalived,Httpd服务器任意宕机一台服务还是可以正常运行的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">HAProxy的优点：</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">1、HAProxy是支持虚拟主机的，可以工作在4、7层(支持多网段)；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">2、能够补充Nginx的一些缺点比如Session的保持，Cookie的引导等工作；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">3、支持url检测后端的服务器；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">4、本身仅仅就只是一款负载均衡软件；单纯从效率上来讲HAProxy更会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">5、HAProxy可以对Mysql读进行负载均衡，对后端的MySQL节点进行检测和负载均衡；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-keepalive-haproxy.jpg&amp;objectId=1190000002418709&amp;token=f7a1c5cd0092ca2c2882d3b4e2bde773\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-keepalive-haproxy.jpg&objectId=1190000002418709&token=f7a1c5cd0092ca2c2882d3b4e2bde773\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader2\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">0x03.关于Redis缓存方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">缓存分为服务器缓存和应用程序缓存。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">关于应用程序内缓存，已经在<a rel=\"nofollow\" href=\"https://github.com/grasses/Jue-MVC\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">Jue后台框架</a>里面做了模块处理了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">关于服务器缓存，主要缓存服务器文件，减少服务器和php交互，减少均衡负载服务器和应用程序服务器交互。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">缓存里面有一种典型的memcached，现在用的多的是redis轻量级缓存方案。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">关于memcached与redis，看这篇&nbsp;<a rel=\"nofollow\" href=\"http://www.bigdatalittlegeek.com/blog/2014/3/25/memcached-vs-redis\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">《Memcached vs Redis?》</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">Redis主要将数据存储在各种格式：列表，数组，集合和排序集，一次能接受多个命令，阻塞读写，等待直到另一个进程将数据写入高速缓存。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-redis-cache.jpg&amp;objectId=1190000002418709&amp;token=e42e3ab7a22ac3a9697f9321b90b47e8\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-redis-cache.jpg&objectId=1190000002418709&token=e42e3ab7a22ac3a9697f9321b90b47e8\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">一篇关于Reids缓存方案。<a rel=\"nofollow\" href=\"http://www.infoq.com/cn/news/2014/11/open-source-redis-cache\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">《高可用、开源的Redis缓存集群方案》</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader3\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">0x04.关于搜索引擎Sphinx方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">(第一期不做，后期需求时候考虑)</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">Sphinx是俄罗斯人开发的，号称是很吊啦，千万级数据检索，每秒10MB/s，搭过环境。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">Sphinx和MySQL是基于数据库的全文引擎，创建索引是B+树和hash key-value的方式。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">原理类似于用底层C检索MySQL，然后弄出一个sphinx.conf配置文件，索引与搜索均以这个文件为依据进行，要进行全文检索，首先就要配置好sphinx.conf，告诉sphinx哪些字段需要进行索引，哪些字段需要在where,orderby,groupby中用到。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a rel=\"nofollow\" href=\"http://sphinxsearch.com/wiki/doku.php?id=sphinx_chinese_tutorial\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">Sphinx中文</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader4\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">0x05.关于NoSQL快速存储方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">NoSQL在这里的使用价值是处理一些琐事，比如用户个人网站的一些css值，height,width,color等等的小而繁多的数据，采用NoSQL旨在提升数据库速度，减少对MySQL的SELECT请求。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">关于NoSQL的方案很多了，选一个简单的MongDB好了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader5\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">0x06.关于分布式MySQL方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">(做分布式MySQL还没尝试过，初期也不清楚mysql所需要的压力，所以第一期不打算做分布式MySQL)</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a rel=\"nofollow\" href=\"http://www.infoq.com/cn/news/2014/11/mysql-five-open-source-project\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(0, 154, 97); text-decoration-line: none; outline: 0px;\">《标准MySQL数据库外的5个开源兼容方案》</a></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><br style=\"box-sizing: border-box;\"/></p><h1 id=\"articleHeader6\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 1.5em 0px 0px; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">0x07.分布式集群方案</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">综合起来，大致就是如下模型，初探分布式架构，很多模块将就形势做调整，时时更新中，待续。。。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-design.png&amp;objectId=1190000002418709&amp;token=47f5bedac40478ce42e5bd7445f8de89\" src=\"https://segmentfault.com/image?src=http://homeway.me/image/2014-12-10-big-website-framwork-design.png&objectId=1190000002418709&token=47f5bedac40478ce42e5bd7445f8de89\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><br/></span></p><p><br/></p>',`is_tui`=1,`status`=1,`views`=1,`like`=0,`auth`='韩会强',`ip`='123.233.116.122',`update_time`=1502174533  WHERE  `id` = 42 [ RunTime:0.003906s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:14+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.026317s][吞吐率：38.00req/s] [内存消耗：3,759.83kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/42/html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000313s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000865s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000170s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000805s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:15+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.032639s][吞吐率：30.64req/s] [内存消耗：3,690.96kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000321s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000948s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000197s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000909s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:37+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/edit_article/id/43/html
[ log ] hhqblog.com/admin/article/edit_article/id/43/html [运行时间：0.024806s][吞吐率：40.31req/s] [内存消耗：3,050.94kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '43',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/edit_article.html [ array (
  0 => 'article',
  1 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000317s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000867s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 43 LIMIT 1 [ RunTime:0.000338s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000558s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000167s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:48+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/edit_article.html
[ log ] hhqblog.com/admin/article/edit_article.html [运行时间：0.031890s][吞吐率：31.36req/s] [内存消耗：3,548.40kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '39300',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/43/html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'id' => '43',
  'title' => '大型网站系统架构的演化',
  'cate_id' => '29',
  'type' => '0',
  'keyword' => '大型网站系统架构的演化',
  'remark' => '一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。',
  'file' => '',
  'content' => '<p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">前言</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">一、最开始的网站架构</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 最初的架构，应用程序、数据库、文件都部署在一台服务器上，如图：</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/251844417179867.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="image" border="0" alt="image" src="http://images.cnitblog.com/blog/352511/201409/251844423268454.png" width="453" height="347" style="border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">二、应用、数据、文件分离</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着业务的扩展，一台服务器已经不能满足性能需求，故将应用程序、数据库、文件各自部署在独立的服务器上，并且根据服务器的用途配置不同的硬件，达到最佳的性能效果。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/251844429987826.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="image" border="0" alt="image" src="http://images.cnitblog.com/blog/352511/201409/251844436545725.png" width="603" height="375" style="border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">三、利用缓存改善网站性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 在硬件优化性能的同时，同时也通过软件进行性能优化，在大部分的网站系统中，都会利用缓存技术改善系统的性能，使用缓存主要源于热点数据的存在，大部分网站访问都遵循28原则（即80%的访问请求，最终落在20%的数据上），所以我们可以对热点数据进行缓存，减少这些数据的访问路径，提高用户体验。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/302146003164033.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="251844453265971" border="0" alt="251844453265971" src="http://images.cnitblog.com/blog/352511/201409/302146030501236.png" width="548" height="558" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 缓存实现常见的方式是本地缓存、分布式缓存。当然还有CDN、反向代理等，这个后面再讲。本地缓存，顾名思义是将数据缓存在应用服务器本地，可以存在内存中，也可以存在文件，OSCache就是常用的本地缓存组件。本地缓存的特点是速度快，但因为本地空间有限所以缓存数据量也有限。分布式缓存的特点是，可以缓存海量的数据，并且扩展非常容易，在门户类网站中常常被使用，速度按理没有本地缓存快，常用的分布式缓存是Memcached、Redis。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">四、使用集群改善应用服务器性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 应用服务器作为网站的入口，会承担大量的请求，我们往往通过应用服务器集群来分担请求数。应用服务器前面部署负载均衡服务器调度用户请求，根据分发策略将请求分发到多个应用服务器节点。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/302146043948978.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="251844471702801" border="0" alt="251844471702801" src="http://images.cnitblog.com/blog/352511/201409/302146060811294.png" width="721" height="469" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是<span style="line-height: 1.8;">七层负载均衡</span>和HAProxy支持四层、七层负载均衡，可以根据报文内容选择内部服务器，因此LVS分发路径优于Nginx和HAProxy，性能要高些，而Nginx和HAProxy则更具配置性，如可以用来做动静分离（根据请求报文特征，选择静态资源服务器还是应用服务器）。</span></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">五、数据库读写分离和分库分表</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着用户量的增加，数据库成为最大的瓶颈，改善数据库性能常用的手段是进行读写分离以及分表，读写分离顾名思义就是将数据库分为读库和写库，通过主备功能实现数据同步。分库分表则分为水平切分和垂直切分，水平切换则是对一个数据库特大的表进行拆分，例如用户表。垂直切分则是根据业务不同来切换，如用户业务、商品业务相关的表放在不同的数据库中。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/302146076915052.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851219209749" border="0" alt="260851219209749" src="http://images.cnitblog.com/blog/352511/201409/302146095341882.png" width="706" height="439" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">六、使用CDN和反向代理提高网站性能</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp; 假如我们的服务器都部署在成都的机房，对于四川的用户来说访问是较快的，而对于北京的用户访问是较慢的，这是由于四川和北京分别属于电信和联通的不同发达地区，北京用户访问需要通过互联路由器经过较长的路径才能访问到成都的服务器，返回路径也一样，所以数据传输时间比较长。对于这种情况，常常使用CDN解决，CDN将数据内容缓存到运营商的机房，用户访问时先从最近的运营商获取数据，这样大大减少了网络访问的路径。比较专业的CDN运营商有蓝汛、网宿。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp; 而反向代理，则是部署在网站的机房，当用户请求达到时首先访问反向代理服务器，反向代理服务器将缓存的数据返回给用户，如果没有没有缓存数据才会继续走应用服务器获取，也减少了获取数据的成本。反向代理有Squid，Nginx。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/302146110032599.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851254513595" border="0" alt="260851254513595" src="http://images.cnitblog.com/blog/352511/201409/302146127222157.png" width="656" height="547" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">七、使用分布式文件系统</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 用户一天天增加，业务量越来越大，产生的文件越来越多，单台的文件服务器已经不能满足需求。需要分布式的文件系统支撑。常用的分布式文件系统有NFS。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/302146147379271.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851282647353" border="0" alt="260851282647353" src="http://images.cnitblog.com/blog/352511/201409/302146163629801.png" width="686" height="479" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">八、使用NoSql和搜索引擎</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 对于海量数据的查询，我们使用nosql数据库加上搜索引擎可以达到更好的性能。并不是所有的数据都要放在关系型数据中。常用的NOSQL有mongodb和redis，搜索引擎有lucene。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/302146182536347.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851321075527" border="0" alt="260851321075527" src="http://images.cnitblog.com/blog/352511/201409/302146204097504.png" width="692" height="513" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-family: 宋体;"><span style="line-height: 1.8; font-size: x-large;">九、将应用服务器进行业务拆分</span></span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><span style="line-height: 1.8; font-family: 宋体;">&nbsp;&nbsp;&nbsp; 随着业务进一步扩展，应用程序变得非常臃肿，这时我们需要将应用程序进行业务拆分，如百度分为新闻、网页、图片等业务。每个业务应用负责相对独立的业务运作。业务之间通过消息进行通信或者同享数据库来实现。</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/302146219727249.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851352481788" border="0" alt="260851352481788" src="http://images.cnitblog.com/blog/352511/201409/302146241449879.png" width="693" height="513" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:="">&nbsp;</p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-size: x-large;">十、搭建分布式服务</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:="">&nbsp;&nbsp;&nbsp; 这时我们发现各个业务应用都会使用到一些基本的业务服务，例如用户服务、订单服务、支付服务、安全服务，这些服务是支撑各业务应用的基本要素。我们将这些服务抽取出来利用分部式服务框架搭建分布式服务。淘宝的Dubbo是一个不错的选择。</p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:=""><a href="http://images.cnitblog.com/blog/352511/201409/302146262063009.png" style="outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;"><img title="260851397174320" border="0" alt="260851397174320" src="http://images.cnitblog.com/blog/352511/201409/302146285194383.png" width="786" height="622" style="border: 0px; max-width: 900px; display: inline;"/></a></p><p class="catalog" style="line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:=""><span style="line-height: 1.8; font-size: x-large;">小结</span></p><p style="line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, " times="" new="" font-size:="" white-space:="" background-color:="">&nbsp;&nbsp;&nbsp; 大型网站的架构是根据业务需求不断完善的，根据不同的业务特征会做特定的设计和考虑，本文只是讲述一个常规大型网站会涉及的一些技术和手段。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'like' => '0',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000342s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000846s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 43 LIMIT 1 [ RunTime:0.000356s ]
[ sql ] [ SQL ] UPDATE `think_article`  SET `title`='大型网站系统架构的演化',`cate_id`=29,`type`=0,`keyword`='大型网站系统架构的演化',`remark`='一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。',`content`='<p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">前言</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。</span></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">一、最开始的网站架构</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 最初的架构，应用程序、数据库、文件都部署在一台服务器上，如图：</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/251844417179867.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"image\" border=\"0\" alt=\"image\" src=\"http://images.cnitblog.com/blog/352511/201409/251844423268454.png\" width=\"453\" height=\"347\" style=\"border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">二、应用、数据、文件分离</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 随着业务的扩展，一台服务器已经不能满足性能需求，故将应用程序、数据库、文件各自部署在独立的服务器上，并且根据服务器的用途配置不同的硬件，达到最佳的性能效果。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/251844429987826.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"image\" border=\"0\" alt=\"image\" src=\"http://images.cnitblog.com/blog/352511/201409/251844436545725.png\" width=\"603\" height=\"375\" style=\"border: 0px rgb(221, 221, 221); max-width: 900px; background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">三、利用缓存改善网站性能</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 在硬件优化性能的同时，同时也通过软件进行性能优化，在大部分的网站系统中，都会利用缓存技术改善系统的性能，使用缓存主要源于热点数据的存在，大部分网站访问都遵循28原则（即80%的访问请求，最终落在20%的数据上），所以我们可以对热点数据进行缓存，减少这些数据的访问路径，提高用户体验。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146003164033.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"251844453265971\" border=\"0\" alt=\"251844453265971\" src=\"http://images.cnitblog.com/blog/352511/201409/302146030501236.png\" width=\"548\" height=\"558\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 缓存实现常见的方式是本地缓存、分布式缓存。当然还有CDN、反向代理等，这个后面再讲。本地缓存，顾名思义是将数据缓存在应用服务器本地，可以存在内存中，也可以存在文件，OSCache就是常用的本地缓存组件。本地缓存的特点是速度快，但因为本地空间有限所以缓存数据量也有限。分布式缓存的特点是，可以缓存海量的数据，并且扩展非常容易，在门户类网站中常常被使用，速度按理没有本地缓存快，常用的分布式缓存是Memcached、Redis。</span></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">四、使用集群改善应用服务器性能</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 应用服务器作为网站的入口，会承担大量的请求，我们往往通过应用服务器集群来分担请求数。应用服务器前面部署负载均衡服务器调度用户请求，根据分发策略将请求分发到多个应用服务器节点。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146043948978.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"251844471702801\" border=\"0\" alt=\"251844471702801\" src=\"http://images.cnitblog.com/blog/352511/201409/302146060811294.png\" width=\"721\" height=\"469\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是<span style=\"line-height: 1.8;\">七层负载均衡</span>和HAProxy支持四层、七层负载均衡，可以根据报文内容选择内部服务器，因此LVS分发路径优于Nginx和HAProxy，性能要高些，而Nginx和HAProxy则更具配置性，如可以用来做动静分离（根据请求报文特征，选择静态资源服务器还是应用服务器）。</span></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">五、数据库读写分离和分库分表</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 随着用户量的增加，数据库成为最大的瓶颈，改善数据库性能常用的手段是进行读写分离以及分表，读写分离顾名思义就是将数据库分为读库和写库，通过主备功能实现数据同步。分库分表则分为水平切分和垂直切分，水平切换则是对一个数据库特大的表进行拆分，例如用户表。垂直切分则是根据业务不同来切换，如用户业务、商品业务相关的表放在不同的数据库中。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146076915052.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851219209749\" border=\"0\" alt=\"260851219209749\" src=\"http://images.cnitblog.com/blog/352511/201409/302146095341882.png\" width=\"706\" height=\"439\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">六、使用CDN和反向代理提高网站性能</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp; 假如我们的服务器都部署在成都的机房，对于四川的用户来说访问是较快的，而对于北京的用户访问是较慢的，这是由于四川和北京分别属于电信和联通的不同发达地区，北京用户访问需要通过互联路由器经过较长的路径才能访问到成都的服务器，返回路径也一样，所以数据传输时间比较长。对于这种情况，常常使用CDN解决，CDN将数据内容缓存到运营商的机房，用户访问时先从最近的运营商获取数据，这样大大减少了网络访问的路径。比较专业的CDN运营商有蓝汛、网宿。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp; 而反向代理，则是部署在网站的机房，当用户请求达到时首先访问反向代理服务器，反向代理服务器将缓存的数据返回给用户，如果没有没有缓存数据才会继续走应用服务器获取，也减少了获取数据的成本。反向代理有Squid，Nginx。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146110032599.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851254513595\" border=\"0\" alt=\"260851254513595\" src=\"http://images.cnitblog.com/blog/352511/201409/302146127222157.png\" width=\"656\" height=\"547\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">七、使用分布式文件系统</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 用户一天天增加，业务量越来越大，产生的文件越来越多，单台的文件服务器已经不能满足需求。需要分布式的文件系统支撑。常用的分布式文件系统有NFS。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146147379271.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851282647353\" border=\"0\" alt=\"260851282647353\" src=\"http://images.cnitblog.com/blog/352511/201409/302146163629801.png\" width=\"686\" height=\"479\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">八、使用NoSql和搜索引擎</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 对于海量数据的查询，我们使用nosql数据库加上搜索引擎可以达到更好的性能。并不是所有的数据都要放在关系型数据中。常用的NOSQL有mongodb和redis，搜索引擎有lucene。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146182536347.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851321075527\" border=\"0\" alt=\"260851321075527\" src=\"http://images.cnitblog.com/blog/352511/201409/302146204097504.png\" width=\"692\" height=\"513\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\"><span style=\"line-height: 1.8; font-size: x-large;\">九、将应用服务器进行业务拆分</span></span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span style=\"line-height: 1.8; font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 随着业务进一步扩展，应用程序变得非常臃肿，这时我们需要将应用程序进行业务拆分，如百度分为新闻、网页、图片等业务。每个业务应用负责相对独立的业务运作。业务之间通过消息进行通信或者同享数据库来实现。</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146219727249.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851352481788\" border=\"0\" alt=\"260851352481788\" src=\"http://images.cnitblog.com/blog/352511/201409/302146241449879.png\" width=\"693\" height=\"513\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">&nbsp;</p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-size: x-large;\">十、搭建分布式服务</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">&nbsp;&nbsp;&nbsp; 这时我们发现各个业务应用都会使用到一些基本的业务服务，例如用户服务、订单服务、支付服务、安全服务，这些服务是支撑各业务应用的基本要素。我们将这些服务抽取出来利用分部式服务框架搭建分布式服务。淘宝的Dubbo是一个不错的选择。</p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://images.cnitblog.com/blog/352511/201409/302146262063009.png\" style=\"outline: none; text-decoration-line: none; color: rgb(61, 129, 238); border-bottom-width: 1px; border-bottom-style: dashed;\"><img title=\"260851397174320\" border=\"0\" alt=\"260851397174320\" src=\"http://images.cnitblog.com/blog/352511/201409/302146285194383.png\" width=\"786\" height=\"622\" style=\"border: 0px; max-width: 900px; display: inline;\"/></a></p><p class=\"catalog\" style=\"line-height: 1.8; padding: 3px; background-color: rgb(220, 220, 220); width: 1078px; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\"><span style=\"line-height: 1.8; font-size: x-large;\">小结</span></p><p style=\"line-height: 1.8; margin: 10px auto; color: rgb(51, 51, 51); font-family: Georgia, \" times=\"\" new=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">&nbsp;&nbsp;&nbsp; 大型网站的架构是根据业务需求不断完善的，根据不同的业务特征会做特定的设计和考虑，本文只是讲述一个常规大型网站会涉及的一些技术和手段。</p><p><br/></p>',`is_tui`=1,`status`=1,`views`=1,`like`=0,`auth`='韩会强',`ip`='123.233.116.122',`update_time`=1502174567  WHERE  `id` = 43 [ RunTime:0.003804s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:49+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.027502s][吞吐率：36.36req/s] [内存消耗：3,757.92kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/43/html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000317s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000854s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000163s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000830s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:49+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.030091s][吞吐率：33.23req/s] [内存消耗：3,689.10kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000296s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000819s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000164s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000815s ]

---------------------------------------------------------------
[ 2017-08-08T14:42:55+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/edit_article/id/44/html
[ log ] hhqblog.com/admin/article/edit_article/id/44/html [运行时间：0.025212s][吞吐率：39.66req/s] [内存消耗：3,062.95kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '44',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/edit_article.html [ array (
  0 => 'article',
  1 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000307s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000827s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 44 LIMIT 1 [ RunTime:0.000347s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000520s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000176s ]

---------------------------------------------------------------
[ 2017-08-08T14:43:17+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/edit_article.html
[ log ] hhqblog.com/admin/article/edit_article.html [运行时间：0.030245s][吞吐率：33.06req/s] [内存消耗：3,595.01kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '47710',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/44/html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'id' => '44',
  'title' => 'Nginx反向代理实现均衡负载',
  'cate_id' => '29',
  'type' => '0',
  'keyword' => 'Nginx,反向代理,实现,均衡负载',
  'remark' => '为jue.so架设一个服务器集群。
架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案',
  'file' => '',
  'content' => '<h4 id="架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy-Keepalived是目前使用最广泛的三种方案" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案</h4><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x01-关于均衡负载" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x01-关于均衡负载" class="headerlink" title="0x01. 关于均衡负载" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x01. 关于均衡负载</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">其中Keepalived+HAProxy是一个高可用性方案。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">关于3者比较，可以看这篇博客<a href="http://www.rootop.org/pages/2773.html" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://www.rootop.org/pages/2773.html</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">工作在网络的7层之上，可以针对http应用做一些分流的策略。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/><p><br style="font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x02-关于Nginx" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x02-关于Nginx" class="headerlink" title="0x02.关于Nginx" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x02.关于Nginx</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">nginx在启动后，在unix系统中会以daemon的方式在后台运行，后台进程包含一个master进程和多个worker进程。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">而基本的网络事件，则是放在worker进程中来处理了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">关于nginx，主要由3大模块，内核模块，事件模块，http核心模块。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">nginx模块一般被分成三大类：handler、filter和upstream。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/image/2014-12-04-nginx-work.png" title="nginx工作模型" class="fancybox" rel="article0" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;"><img src="/ueditor/php/upload/image/20170808/1502173482462464.png" alt="nginx工作模型" style="margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;"/></a><span class="caption" style="margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;">nginx工作模型</span></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/><p><br style="font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x03-服务器集群环境" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x03-服务器集群环境" class="headerlink" title="0x03.服务器集群环境" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x03.服务器集群环境</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">接下来讲下想要搭的均衡负载环境。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/image/2014-12-04-nginx-load-balance.jpg" title="Nginx服务器集群" class="fancybox" rel="article0" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;"><img src="/ueditor/php/upload/image/20170808/1502173485362157.jpg" alt="Nginx服务器集群" style="margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;"/></a><span class="caption" style="margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;">Nginx服务器集群</span></p><pre style="margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: " source="" code="" font-size:="" vertical-align:="" background-color:="" overflow:="" color:="" line-height:="">系统环境&nbsp;:&nbsp;Linux&nbsp;Centos&nbsp;7&nbsp;aws&nbsp;2.6.32-504.1.3.el6.x86_64&nbsp;Nginx&nbsp;Version:1.6.0均衡负载服务器：&nbsp;172.31.19.122:80(lnmp一键安装)WEB1:&nbsp;172.31.15.59:80WEB2:&nbsp;172.31.15.94:80WEB3:&nbsp;172.31.15.24:80</pre><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/><p><br style="font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x04-负载Nginx配置" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x04-负载Nginx配置" class="headerlink" title="0x04.负载Nginx配置" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x04.负载Nginx配置</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">服务器用lnmp一键安装，自带的conf配置已经配置好一切了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">下面是完整的配置文件。</p><blockquote style="margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: " droid="" font-size:="" vertical-align:="" color:="" white-space:="" background-color:=""><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">/usr/local/nginx/conf/nginx.conf</p></blockquote><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><pre style="margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: " source="" code="" font-size:="" vertical-align:="" background-color:="" overflow:="" color:="" line-height:="">user&nbsp;&nbsp;www&nbsp;www;
worker_processes&nbsp;auto;
error_log&nbsp;&nbsp;/home/wwwlogs/nginx_error.log&nbsp;&nbsp;crit;
pid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/local/nginx/logs/nginx.pid;
worker_rlimit_nofile&nbsp;51200;

events&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;epoll;
&nbsp;&nbsp;&nbsp;&nbsp;worker_connections&nbsp;51200;
&nbsp;&nbsp;&nbsp;&nbsp;multi_accept&nbsp;on;
}

http&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mime.types;
&nbsp;&nbsp;&nbsp;&nbsp;default_type&nbsp;&nbsp;application/octet-stream;#处理接收的数据类型

&nbsp;&nbsp;&nbsp;&nbsp;server_names_hash_bucket_size&nbsp;128;
&nbsp;&nbsp;&nbsp;&nbsp;client_header_buffer_size&nbsp;32k;
&nbsp;&nbsp;&nbsp;&nbsp;large_client_header_buffers&nbsp;4&nbsp;32k;
&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;50m;

&nbsp;&nbsp;&nbsp;&nbsp;sendfile&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;tcp_nopush&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on;

&nbsp;&nbsp;&nbsp;&nbsp;keepalive_timeout&nbsp;60;
&nbsp;&nbsp;&nbsp;&nbsp;tcp_nodelay&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_connect_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_send_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_read_timeout&nbsp;300;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffer_size&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffers&nbsp;4&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_busy_buffers_size&nbsp;128k;
&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_temp_file_write_size&nbsp;256k;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;添加gzip压缩
&nbsp;&nbsp;&nbsp;&nbsp;gzip&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length&nbsp;&nbsp;1k;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;16k;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_http_version&nbsp;1.0;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_comp_level&nbsp;2;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text/plain&nbsp;application/x-javascript&nbsp;text/css&nbsp;application/xml;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_vary&nbsp;on;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expired&nbsp;no-cache&nbsp;no-store&nbsp;private&nbsp;auth;
&nbsp;&nbsp;&nbsp;&nbsp;gzip_disable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MSIE&nbsp;[1-6]\\.&quot;;

&nbsp;&nbsp;&nbsp;&nbsp;server_tokens&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过upstream处理均衡负载
&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;static.homeway&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.24:80;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;homeway&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;ip&nbsp;hash主要是对ip处理下，让下次访问时候，还是访问当前服务器，这样就不会导致session丢失
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip_hash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;weight权重，配置访问概率
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.59:80&nbsp;weight=10;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.94:80&nbsp;weight=5;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;80&nbsp;default;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;172.31.19.122;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm&nbsp;index.php;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#error_page&nbsp;&nbsp;&nbsp;404&nbsp;&nbsp;&nbsp;/404.html;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(js|css)?$&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12h;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;静态文件可以用CDN处理，本例子指向WEB3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(gif|jpg|jpeg|png|bmp|swf)$&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://static.homeway;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过均衡负载服务器指向WEB1、WEB2&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://homeway;&nbsp;&nbsp;#使用后端的web服务器&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_redirect&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;Host&nbsp;$host;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;10m;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_body_buffer_size&nbsp;128k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_connect_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_send_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_read_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffer_size&nbsp;4k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffers&nbsp;4&nbsp;32k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_busy_buffers_size&nbsp;64k;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_temp_file_write_size&nbsp;64k;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_log&nbsp;&nbsp;/home/wwwlogs/access.log&nbsp;&nbsp;access;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;vhost/*.conf;
}</pre><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">核心指令”ip_hash”只能在upstream {}中使用。这条指令用于通知nginx使用ip hash负载均衡算法。如果没加这条指令，nginx会使用默认的round robin负载均衡模块，那么，你每次访问的服务器可能会不同，导致session丢失，一直要重新登录。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">关于upstream的源码分析，可以去看 tengine的介绍&nbsp;<a href="http://tengine.taobao.org/book/chapter_05.html" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://tengine.taobao.org/book/chapter_05.html</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">重启服务器下。</p><blockquote style="margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: " droid="" font-size:="" vertical-align:="" color:="" white-space:="" background-color:=""><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">/root/lnmp restart</p></blockquote><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">搞定了，确定WEB1，WEB2,WEB3可以正常访问就行了。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">这样，假设，我在WEB1的web目录下放一个 fuck.php, WEB2不放，那么。当我访问<a href="http://172.31.19.122%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%9C%89%E6%97%B6%E5%80%99404%EF%BC%8C%E6%9C%89%E6%97%B6%E5%80%99%E8%BF%94%E5%9B%9E%E6%AD%A3%E5%B8%B8%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BF%99%E5%B0%B1%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82/" target="_blank" rel="external" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;">http://172.31.19.122时候，就会有时候404，有时候返回正常页面，这就表示成功了。</a></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><hr style="border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/><p><br style="font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" white-space:="" background-color:=""/></p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:=""><br/></p><h1 id="0x05-关于服务性能" style="margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: " droid="" vertical-align:="" line-height:="" white-space:="" background-color:=""><a href="http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x05-关于服务性能" class="headerlink" title="0x05.关于服务性能" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;"></a>0x05.关于服务性能</h1><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">这个在目前不能做，因为无法做多用户并发访问，就算模拟器模拟效果也不能达到多用户并发的强度。</p><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" line-height:="" white-space:="" background-color:="">Nginx的几个优点：</p><ul style="margin: 1.6em 20px; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, " microsoft="" droid="" helvetica="" font-size:="" vertical-align:="" list-style-position:="" list-style-image:="" line-height:="" white-space:="" background-color:="" class=" list-paddingleft-2"><li><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">Nginx工作在网络的7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下LVS并不具备这样的功能，所以Nginx单凭这点可利用的场合就远多于LVS了；但Nginx有用的这些功能使其可调整度要高于LVS，所以经常要去触碰触碰，触碰多了，人为出问题的几率也就会大。</p></li><li><p style="margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;">Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可以考虑用其作为反向代理加速器。</p></li><li><p>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一</p></li></ul><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'like' => '0',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000339s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000847s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 44 LIMIT 1 [ RunTime:0.000353s ]
[ sql ] [ SQL ] UPDATE `think_article`  SET `title`='Nginx反向代理实现均衡负载',`cate_id`=29,`type`=0,`keyword`='Nginx,反向代理,实现,均衡负载',`remark`='为jue.so架设一个服务器集群。\n架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案',`content`='<h4 id=\"架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy-Keepalived是目前使用最广泛的三种方案\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案</h4><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x01-关于均衡负载\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x01-关于均衡负载\" class=\"headerlink\" title=\"0x01. 关于均衡负载\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x01. 关于均衡负载</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">架设服务器均衡负载方式有多种，Nginx、LVS、HAProxy+Keepalived是目前使用最广泛的三种方案。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">其中Keepalived+HAProxy是一个高可用性方案。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">关于3者比较，可以看这篇博客<a href=\"http://www.rootop.org/pages/2773.html\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://www.rootop.org/pages/2773.html</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">工作在网络的7层之上，可以针对http应用做一些分流的策略。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x02-关于Nginx\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x02-关于Nginx\" class=\"headerlink\" title=\"0x02.关于Nginx\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x02.关于Nginx</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">nginx在启动后，在unix系统中会以daemon的方式在后台运行，后台进程包含一个master进程和多个worker进程。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">而基本的网络事件，则是放在worker进程中来处理了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">关于nginx，主要由3大模块，内核模块，事件模块，http核心模块。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">nginx模块一般被分成三大类：handler、filter和upstream。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/image/2014-12-04-nginx-work.png\" title=\"nginx工作模型\" class=\"fancybox\" rel=\"article0\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\"><img src=\"/ueditor/php/upload/image/20170808/1502173482462464.png\" alt=\"nginx工作模型\" style=\"margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;\"/></a><span class=\"caption\" style=\"margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;\">nginx工作模型</span></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x03-服务器集群环境\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x03-服务器集群环境\" class=\"headerlink\" title=\"0x03.服务器集群环境\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x03.服务器集群环境</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">接下来讲下想要搭的均衡负载环境。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/image/2014-12-04-nginx-load-balance.jpg\" title=\"Nginx服务器集群\" class=\"fancybox\" rel=\"article0\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\"><img src=\"/ueditor/php/upload/image/20170808/1502173485362157.jpg\" alt=\"Nginx服务器集群\" style=\"margin: auto; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; max-width: 100%; height: auto; display: block;\"/></a><span class=\"caption\" style=\"margin: 0.5em 0px 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 0.9em; vertical-align: baseline; color: rgb(153, 153, 153); display: block; position: relative; text-align: center;\">Nginx服务器集群</span></p><pre style=\"margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: \" source=\"\" code=\"\" font-size:=\"\" vertical-align:=\"\" background-color:=\"\" overflow:=\"\" color:=\"\" line-height:=\"\">系统环境&nbsp;:&nbsp;Linux&nbsp;Centos&nbsp;7&nbsp;aws&nbsp;2.6.32-504.1.3.el6.x86_64&nbsp;Nginx&nbsp;Version:1.6.0均衡负载服务器：&nbsp;172.31.19.122:80(lnmp一键安装)WEB1:&nbsp;172.31.15.59:80WEB2:&nbsp;172.31.15.94:80WEB3:&nbsp;172.31.15.24:80</pre><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x04-负载Nginx配置\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x04-负载Nginx配置\" class=\"headerlink\" title=\"0x04.负载Nginx配置\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x04.负载Nginx配置</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">服务器用lnmp一键安装，自带的conf配置已经配置好一切了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">下面是完整的配置文件。</p><blockquote style=\"margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: \" droid=\"\" font-size:=\"\" vertical-align:=\"\" color:=\"\" white-space:=\"\" background-color:=\"\"><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">/usr/local/nginx/conf/nginx.conf</p></blockquote><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><pre style=\"margin: 0px -20px; padding: 10px 20px; border-width: 1px 0px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: \" source=\"\" code=\"\" font-size:=\"\" vertical-align:=\"\" background-color:=\"\" overflow:=\"\" color:=\"\" line-height:=\"\">user&nbsp;&nbsp;www&nbsp;www;\nworker_processes&nbsp;auto;\nerror_log&nbsp;&nbsp;/home/wwwlogs/nginx_error.log&nbsp;&nbsp;crit;\npid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/local/nginx/logs/nginx.pid;\nworker_rlimit_nofile&nbsp;51200;\n\nevents&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;epoll;\n&nbsp;&nbsp;&nbsp;&nbsp;worker_connections&nbsp;51200;\n&nbsp;&nbsp;&nbsp;&nbsp;multi_accept&nbsp;on;\n}\n\nhttp&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mime.types;\n&nbsp;&nbsp;&nbsp;&nbsp;default_type&nbsp;&nbsp;application/octet-stream;#处理接收的数据类型\n\n&nbsp;&nbsp;&nbsp;&nbsp;server_names_hash_bucket_size&nbsp;128;\n&nbsp;&nbsp;&nbsp;&nbsp;client_header_buffer_size&nbsp;32k;\n&nbsp;&nbsp;&nbsp;&nbsp;large_client_header_buffers&nbsp;4&nbsp;32k;\n&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;50m;\n\n&nbsp;&nbsp;&nbsp;&nbsp;sendfile&nbsp;on;\n&nbsp;&nbsp;&nbsp;&nbsp;tcp_nopush&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on;\n\n&nbsp;&nbsp;&nbsp;&nbsp;keepalive_timeout&nbsp;60;\n&nbsp;&nbsp;&nbsp;&nbsp;tcp_nodelay&nbsp;on;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_connect_timeout&nbsp;300;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_send_timeout&nbsp;300;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_read_timeout&nbsp;300;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffer_size&nbsp;64k;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_buffers&nbsp;4&nbsp;64k;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_busy_buffers_size&nbsp;128k;\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_temp_file_write_size&nbsp;256k;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;添加gzip压缩\n&nbsp;&nbsp;&nbsp;&nbsp;gzip&nbsp;on;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length&nbsp;&nbsp;1k;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;16k;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_http_version&nbsp;1.0;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_comp_level&nbsp;2;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text/plain&nbsp;application/x-javascript&nbsp;text/css&nbsp;application/xml;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_vary&nbsp;on;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expired&nbsp;no-cache&nbsp;no-store&nbsp;private&nbsp;auth;\n&nbsp;&nbsp;&nbsp;&nbsp;gzip_disable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MSIE&nbsp;[1-6]\\.&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;server_tokens&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过upstream处理均衡负载\n&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;static.homeway&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.24:80;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;upstream&nbsp;homeway&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;ip&nbsp;hash主要是对ip处理下，让下次访问时候，还是访问当前服务器，这样就不会导致session丢失\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip_hash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;weight权重，配置访问概率\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.59:80&nbsp;weight=10;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;172.31.15.94:80&nbsp;weight=5;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;server&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen&nbsp;80&nbsp;default;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name&nbsp;172.31.19.122;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;index.html&nbsp;index.htm&nbsp;index.php;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#error_page&nbsp;&nbsp;&nbsp;404&nbsp;&nbsp;&nbsp;/404.html;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(js|css)?$&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12h;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;静态文件可以用CDN处理，本例子指向WEB3\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;~&nbsp;.*\\.(gif|jpg|jpeg|png|bmp|swf)$&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://static.homeway;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;通过均衡负载服务器指向WEB1、WEB2&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;/&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://homeway;&nbsp;&nbsp;#使用后端的web服务器&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_redirect&nbsp;off;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;Host&nbsp;$host;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_max_body_size&nbsp;10m;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_body_buffer_size&nbsp;128k;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_connect_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_send_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_read_timeout&nbsp;90;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffer_size&nbsp;4k;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_buffers&nbsp;4&nbsp;32k;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_busy_buffers_size&nbsp;64k;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_temp_file_write_size&nbsp;64k;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_log&nbsp;&nbsp;/home/wwwlogs/access.log&nbsp;&nbsp;access;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;vhost/*.conf;\n}</pre><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">核心指令”ip_hash”只能在upstream {}中使用。这条指令用于通知nginx使用ip hash负载均衡算法。如果没加这条指令，nginx会使用默认的round robin负载均衡模块，那么，你每次访问的服务器可能会不同，导致session丢失，一直要重新登录。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">关于upstream的源码分析，可以去看 tengine的介绍&nbsp;<a href=\"http://tengine.taobao.org/book/chapter_05.html\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://tengine.taobao.org/book/chapter_05.html</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">重启服务器下。</p><blockquote style=\"margin: 1.6em 0px; padding: 0px 0.8em; border-width: 0px 0px 0px 4px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-left-style: solid; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: rgb(221, 221, 221); border-image: initial; outline: 0px; font-family: \" droid=\"\" font-size:=\"\" vertical-align:=\"\" color:=\"\" white-space:=\"\" background-color:=\"\"><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">/root/lnmp restart</p></blockquote><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">搞定了，确定WEB1，WEB2,WEB3可以正常访问就行了。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">这样，假设，我在WEB1的web目录下放一个 fuck.php, WEB2不放，那么。当我访问<a href=\"http://172.31.19.122%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%9C%89%E6%97%B6%E5%80%99404%EF%BC%8C%E6%9C%89%E6%97%B6%E5%80%99%E8%BF%94%E5%9B%9E%E6%AD%A3%E5%B8%B8%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BF%99%E5%B0%B1%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82/\" target=\"_blank\" rel=\"external\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; color: rgb(227, 45, 64); text-decoration-line: none;\">http://172.31.19.122时候，就会有时候404，有时候返回正常页面，这就表示成功了。</a></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><hr style=\"border-style: dashed; border-color: rgb(221, 221, 221); border-image: initial; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><p><br style=\"font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/></p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><br/></p><h1 id=\"0x05-关于服务性能\" style=\"margin: 1.1em 0px; padding: 0px; border: 0px; outline: 0px; font-family: \" droid=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\"><a href=\"http://homeway.me/2014/12/05/nginx-reverse-proxy-to-load-balance/#0x05-关于服务性能\" class=\"headerlink\" title=\"0x05.关于服务性能\" style=\"margin: 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 28px; vertical-align: baseline; color: rgb(0, 0, 0); text-decoration-line: none;\"></a>0x05.关于服务性能</h1><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">这个在目前不能做，因为无法做多用户并发访问，就算模拟器模拟效果也不能达到多用户并发的强度。</p><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\">Nginx的几个优点：</p><ul style=\"margin: 1.6em 20px; padding: 0px; border: 0px; outline: 0px; font-family: å¾®è½¯é›…é»‘, \" microsoft=\"\" droid=\"\" helvetica=\"\" font-size:=\"\" vertical-align:=\"\" list-style-position:=\"\" list-style-image:=\"\" line-height:=\"\" white-space:=\"\" background-color:=\"\" class=\" list-paddingleft-2\"><li><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">Nginx工作在网络的7层，所以它可以针对http应用本身来做分流策略，比如针对域名、目录结构等，相比之下LVS并不具备这样的功能，所以Nginx单凭这点可利用的场合就远多于LVS了；但Nginx有用的这些功能使其可调整度要高于LVS，所以经常要去触碰触碰，触碰多了，人为出问题的几率也就会大。</p></li><li><p style=\"margin-top: 1.6em; margin-bottom: 1.6em; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; vertical-align: baseline; line-height: 1.6em;\">Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可以考虑用其作为反向代理加速器。</p></li><li><p>Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一</p></li></ul><p><br/></p>',`is_tui`=1,`status`=1,`views`=1,`like`=0,`auth`='韩会强',`ip`='123.233.116.122',`update_time`=1502174597  WHERE  `id` = 44 [ RunTime:0.003801s ]

---------------------------------------------------------------
[ 2017-08-08T14:43:19+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.026566s][吞吐率：37.64req/s] [内存消耗：3,757.92kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/44/html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000305s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000810s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000155s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000831s ]

---------------------------------------------------------------
[ 2017-08-08T14:43:19+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.042033s][吞吐率：23.79req/s] [内存消耗：3,689.10kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000311s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000802s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000155s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000786s ]

---------------------------------------------------------------
[ 2017-08-08T14:43:26+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/edit_article/id/45/html
[ log ] hhqblog.com/admin/article/edit_article/id/45/html [运行时间：0.025778s][吞吐率：38.79req/s] [内存消耗：3,146.78kb] [文件加载：51]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '45',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/edit_article.html [ array (
  0 => 'article',
  1 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000304s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000837s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 45 LIMIT 1 [ RunTime:0.000443s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article_cate` [ RunTime:0.000535s ]
[ sql ] [ SQL ] SELECT `id`,`name` FROM `think_article_cate` [ RunTime:0.000161s ]

---------------------------------------------------------------
[ 2017-08-08T14:43:34+08:00 ] 172.17.180.47 123.233.116.122 POST /admin/article/edit_article.html
[ log ] hhqblog.com/admin/article/edit_article.html [运行时间：0.034380s][吞吐率：29.09req/s] [内存消耗：4,012.11kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'edit_article',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'content-length' => '205826',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'origin' => 'http://hhqblog.com',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/45/html',
  'x-lantern-version' => '3.7.4',
  'x-requested-with' => 'XMLHttpRequest',
)
[ info ] [ PARAM ] array (
  'id' => '45',
  'title' => '浅析分布式系统',
  'cate_id' => '29',
  'type' => '0',
  'keyword' => '分布式系统',
  'remark' => '我们常常会听说，某个互联网应用的服务器端系统多么牛逼，比如QQ、微信、淘宝。那么，一个互联网应用的服务器端系统，到底牛逼在什么地方？为什么海量的用户访问，会让一个服务器端系统变得更复杂？本文就是想从最基本的地方开始，探寻服务器端系统技术的基础概念。',
  'file' => '',
  'content' => '<h1 id="articleHeader0" style="box-sizing: border-box; font-size: 2.25em; margin: 0px; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">WeTest导读</h1><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">我们常常会听说，某个互联网应用的服务器端系统多么牛逼，比如QQ、微信、淘宝。那么，一个互联网应用的服务器端系统，到底牛逼在什么地方？为什么海量的用户访问，会让一个服务器端系统变得更复杂？本文就是想从最基本的地方开始，探寻服务器端系统技术的基础概念。</p><hr style="box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""/><h2 id="articleHeader1" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">承载量是分布式系统存在的原因</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">当一个互联网业务获得大众欢迎的时候，最显著碰到的技术问题，就是服务器非常繁忙。当每天有1000万个用户访问你的网站时，无论你使用什么样的服务器硬件，都不可能只用一台机器就承载的了。因此，在互联网程序员解决服务器端问题的时候，必须要考虑如何使用多台服务器，为同一种互联网应用提供服务，这就是所谓“分布式系统”的来源。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">然而，大量用户访问同一个互联网业务，所造成的问题并不简单。从表面上看，要能满足很多用户来自互联网的请求，最基本的需求就是所谓性能需求：用户反应网页打开很慢，或者网游中的动作很卡等等。而这些对于“服务速度”的要求，实际上包含的部分却是以下几个：高吞吐、高并发、低延迟和负载均衡。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">高吞吐，意味着你的系统，可以同时承载大量的用户使用。这里关注的整个系统能同时服务的用户数。这个吞吐量肯定是不可能用单台服务器解决的，因此需要多台服务器协作，才能达到所需要的吞吐量。而在多台服务器的协作中，如何才能有效的利用这些服务器，不致于其中某一部分服务器成为瓶颈，从而影响整个系统的处理能力，这就是一个分布式系统，在架构上需要仔细权衡的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">高并发是高吞吐的一个延伸需求。当我们在承载海量用户的时候，我们当然希望每个服务器都能尽其所能的工作，而不要出现无谓的消耗和等待的情况。然而，软件系统并不是简单的设计，就能对同时处理多个任务，做到“尽量多”的处理。很多时候，我们的程序会因为要选择处理哪个任务，而导致额外的消耗。这也是分布式系统解决的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">低延迟对于人数稀少的服务来说不算什么问题。然而，如果我们需要在大量用户访问的时候，也能很快的返回计算结果，这就要困难的多。因为除了大量用户访问可能造成请求在排队外，还有可能因为排队的长度太长，导致内存耗尽、带宽占满等空间性的问题。如果因为排队失败而采取重试的策略，则整个延迟会变的更高。所以分布式系统会采用很多请求分拣和分发的做法，尽快的让更多的服务器来出来用户的请求。但是，由于一个数量庞大的分布式系统，必然需要把用户的请求经过多次的分发，整个延迟可能会因为这些分发和转交的操作，变得更高，所以分布式系统除了分发请求外，还要尽量想办法减少分发的层次数，以便让请求能尽快的得到处理。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKkz?w=554&amp;h=421" src="https://segmentfault.com/img/bVNKkz?w=554&h=421" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">由于互联网业务的用户来自全世界，因此在物理空间上可能来自各种不同延迟的网络和线路，在时间上也可能来自不同的时区，所以要有效的应对这种用户来源的复杂性，就需要把多个服务器部署在不同的空间来提供服务。同时，我们也需要让同时发生的请求，有效的让多个不同服务器承载。所谓的负载均衡，就是分布式系统与生俱来需要完成的功课。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">由于分布式系统，几乎是解决互联网业务承载量问题，的最基本方法，所以作为一个服务器端程序员，掌握分布式系统技术就变得异常重要了。然而，分布式系统的问题，并非是学会用几个框架和使用几个库，就能轻易解决的，因为当一个程序在一个电脑上运行，变成了又无数个电脑上同时协同运行，在开发、运维上都会带来很大的差别。</p><h2 id="articleHeader2" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">分布式系统提高承载量的基本手段</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">分层模型（路由、代理）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">使用多态服务器来协同完成计算任务，最简单的思路就是，让每个服务器都能完成全部的请求，然后把请求随机的发给任何一个服务器处理。最早期的互联网应用中，DNS轮询就是这样的做法：当用户输入一个域名试图访问某个网站，这个域名会被解释成多个IP地址中的一个，随后这个网站的访问请求，就被发往对应IP的服务器了，这样多个服务器（多个IP地址）就能一起解决处理大量的用户请求。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">然而，单纯的请求随机转发，并不能解决一切问题。比如我们很多互联网业务，都是需要用户登录的。在登录某一个服务器后，用户会发起多个请求，如果我们把这些请求随机的转发到不同的服务器上，那么用户登录的状态就会丢失，造成一些请求处理失败。简单的依靠一层服务转发是不够的，所以我们会增加一批服务器，这些服务器会根据用户的Cookie，或者用户的登录凭据，来再次转发给后面具体处理业务的服务器。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">除了登录的需求外，我们还发现，很多数据是需要数据库来处理的，而我们的这些数据往往都只能集中到一个数据库中，否则在查询的时候就会丢失其他服务器上存放的数据结果。所以往往我们还会把数据库单独出来成为一批专用的服务器。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">至此，我们就会发现，一个典型的三层结构出现了：接入、逻辑、存储。然而，这种三层结果，并不就能包医百病。例如，当我们需要让用户在线互动（网游就是典型） ，那么分割在不同逻辑服务器上的在线状态数据，是无法知道对方的，这样我们就需要专门做一个类似互动服务器的专门系统，让用户登录的时候，也同时记录一份数据到它那里，表明某个用户登录在某个服务器上，而所有的互动操作，要先经过这个互动服务器，才能正确的把消息转发到目标用户的服务器上。&nbsp;<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKkN?w=554&amp;h=346" src="https://segmentfault.com/img/bVNKkN?w=554&h=346" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">又例如，当我们在使用网上论坛（BBS）系统的时候，我们发的文章，不可能只写入一个数据库里，因为太多人的阅读请求会拖死这个数据库。我们常常会按论坛板块来写入不同的数据库，又或者是同时写入多个数据库。这样把文章数据分别存放到不同的服务器上，才能应对大量的操作请求。然而，用户在读取文章的时候，就需要有一个专门的程序，去查找具体文章在哪一个服务器上，这时候我们就要架设一个专门的代理层，把所有的文章请求先转交给它，由它按照我们预设的存储计划，去找对应的数据库获取数据。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">根据上面的例子来看，分布式系统虽然具有三层典型的结构，但是实际上往往不止有三层，而是根据业务需求，会设计成多个层次的。为了把请求转交给正确的进程处理，我们而设计很多专门用于转发请求的进程和服务器。这些进程我们常常以Proxy或者Router来命名，一个多层结构常常会具备各种各样的Proxy进程。这些代理进程，很多时候都是通过TCP来连接前后两端。然而，TCP虽然简单，但是却会有故障后不容易恢复的问题。而且TCP的网络编程，也是有点复杂的。——所以，人们设计出更好进程间通讯机制：消息队列。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKkQ?w=553&amp;h=365" src="https://segmentfault.com/img/bVNKkQ?w=553&h=365" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">尽管通过各种Proxy或者Router进程能组建出强大的分布式系统，但是其管理的复杂性也是非常高的。所以人们在分层模式的基础上，想出了更多的方法，来让这种分层模式的程序变得更简单高效的方法。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">并发模型（多线程、异步）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">当我们在编写服务器端程序是，我们会明确的知道，大部分的程序，都是会处理同时到达的多个请求的。因此我们不能好像HelloWorld那么简单的，从一个简单的输入计算出输出来。因为我们会同时获得很多个输入，需要返回很多个输出。在这些处理的过程中，往往我们还会碰到需要“等待”或“阻塞”的情况，比如我们的程序要等待数据库处理结果，等待向另外一个进程请求结果等等……如果我们把请求一个挨着一个的处理，那么这些空闲的等待时间将白白浪费，造成用户的响应延时增加，以及整体系统的吞吐量极度下降。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">所以在如何同时处理多个请求的问题上，业界有2个典型的方案。一种是多线程，一种是异步。在早期的系统中，多线程或多进程是最常用的技术。这种技术的代码编写起来比较简单，因为每个线程中的代码都肯定是按先后顺序执行的。但是由于同时运行着多个线程，所以你无法保障多个线程之间的代码的先后顺序。这对于需要处理同一个数据的逻辑来说，是一个非常严重的问题，最简单的例子就是显示某个新闻的阅读量。两个++操作同时运行，有可能结果只加了1，而不是2。所以多线程下，我们常常要加很多数据的锁，而这些锁又反过来可能导致线程的死锁。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">因此异步回调模型在随后比多线程更加流行，除了多线程的死锁问题外，异步还能解决多线程下，线程反复切换导致不必要的开销的问题：每个线程都需要一个独立的栈空间，在多线程并行运行的时候，这些栈的数据可能需要来回的拷贝，这额外消耗了CPU。同时由于每个线程都需要占用栈空间，所以在大量线程存在的时候，内存的消耗也是巨大的。而异步回调模型则能很好的解决这些问题，不过异步回调更像是“手工版”的并行处理，需要开发者自己去实现如何“并行”的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">异步回调基于非阻塞的I/O操作（网络和文件），这样我们就不用在调用读写函数的时候“卡”在那一句函数调用，而是立刻返回“有无数据”的结果。而Linux的epoll技术，则利用底层内核的机制，让我们可以快速的“查找”到有数据可以读写的连接文件。由于每个操作都是非阻塞的，所以我们的程序可以只用一个进程，就处理大量并发的请求。因为只有一个进程，所以所有的数据处理，其顺序都是固定的，不可能出现多线程中，两个函数的语句交错执行的情况，因此也不需要各种“锁”。从这个角度看，异步非阻塞的技术，是大大简化了开发的过程。由于只有一个线程，也不需要有线程切换之类的开销，所以异步非阻塞成为很多对吞吐量、并发有较高要求的系统首选。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKkX?w=554&amp;h=364" src="https://segmentfault.com/img/bVNKkX?w=554&h=364" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">int epoll_create(int size)；//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">缓冲技术</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">在互联网服务中，大部分的用户交互，都是需要立刻返回结果的，所以对于延迟有一定的要求。而类似网络游戏之类服务，延迟更是要求缩短到几十毫秒以内。所以为了降低延迟，缓冲是互联网服务中最常见的技术之一。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">早期的WEB系统中，如果每个HTTP请求的处理，都去数据库（MySQL）读写一次，那么数据库很快就会因为连接数占满而停止响应。因为一般的数据库，支持的连接数都只有几百，而WEB的应用的并发请求，轻松能到几千。这也是很多设计不良的网站人一多就卡死的最直接原因。为了尽量减少对数据库的连接和访问，人们设计了很多缓冲系统——把从数据库中查询的结果存放到更快的设施上，如果没有相关联的修改，就直接从这里读。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">最典型的WEB应用缓冲系统是Memcache。由于PHP本身的线程结构，是不带状态的。早期PHP本身甚至连操作“堆”内存的方法都没有，所以那些持久的状态，就一定要存放到另外一个进程里。而Memcache就是一个简单可靠的存放临时状态的开源软件。很多PHP应用现在的处理逻辑，都是先从数据库读取数据，然后写入Memcache；当下次请求来的时候，先尝试从Memcache里面读取数据，这样就有可能大大减少对数据库的访问。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKk6?w=333&amp;h=375" src="https://segmentfault.com/img/bVNKk6?w=333&h=375" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">然而Memcache本身是一个独立的服务器进程，这个进程自身并不带特别的集群功能。也就是说这些Memcache进程，并不能直接组建成一个统一的集群。如果一个Memcache不够用，我们就要手工用代码去分配，哪些数据应该去哪个Memcache进程。——这对于真正的大型分布式网站来说，管理一个这样的缓冲系统，是一个很繁琐的工作。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">因此人们开始考虑设计一些更高效的缓冲系统：从性能上来说，Memcache的每笔请求，都要经过网络传输，才能去拉取内存中的数据。这无疑是有一点浪费的，因为请求者本身的内存，也是可以存放数据的。——这就是促成了很多利用请求方内存的缓冲算法和技术，其中最简单的就是使用LRU算法，把数据放在一个哈希表结构的堆内存中。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">而Memcache的不具备集群功能，也是一个用户的痛点。于是很多人开始设计，如何让数据缓存分不到不同的机器上。最简单的思路是所谓读写分离，也就是缓存每次写，都写到多个缓冲进程上记录，而读则可以随机读任何一个进程。在业务数据有明显的读写不平衡差距上，效果是非常好的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">然而，并不是所有的业务都能简单的用读写分离来解决问题，比如一些在线互动的互联网业务，比如社区、游戏。这些业务的数据读写频率并没很大的差异，而且也要求很高的延迟。因此人们又再想办法，把本地内存和远端进程的内存缓存结合起来使用，让数据具备两级缓存。同时，一个数据不在同时的复制存在所有的缓存进程上，而是按一定规律分布在多个进程上。——这种分布规律使用的算法，最流行的就是所谓“一致性哈希”。这种算法的好处是，当某一个进程失效挂掉，不需要把整个集群中所有的缓存数据，都重新修改一次位置。你可以想象一下，如果我们的数据缓存分布，是用简单的以数据的ID对进程数取模，那么一旦进程数变化，每个数据存放的进程位置都可能变化，这对于服务器的故障容忍是不利的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">Orcale公司旗下有一款叫Coherence的产品，是在缓存系统上设计比较好的。这个产品是一个商业产品，支持利用本地内存缓存和远程进程缓存协作。集群进程是完全自管理的，还支持在数据缓存所在进程，进行用户定义的计算（处理器功能），这就不仅仅是缓存了，还是一个分布式的计算系统。&nbsp;<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlc?w=553&amp;h=283" src="https://segmentfault.com/img/bVNKlc?w=553&h=283" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">存储技术（NoSQL）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">相信CAP理论大家已经耳熟能详，然而在互联发展的早期，大家都还在使用MySQL的时候，如何让数据库存放更多的数据，承载更多的连接，很多团队都是绞尽脑汁。甚至于有很多业务，主要的数据存储方式是文件，数据库反而变成是辅助的设施了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlh?w=554&amp;h=477" src="https://segmentfault.com/img/bVNKlh?w=554&h=477" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">然而，当NoSQL兴起，大家突然发现，其实很多互联网业务，其数据格式是如此的简单，很多时候根部不需要关系型数据库那种复杂的表格。对于索引的要求往往也只是根据主索引搜索。而更复杂的全文搜索，本身数据库也做不到。所以现在相当多的高并发的互联网业务，首选NoSQL来做存储设施。最早的NoSQL数据库有MangoDB等，现在最流行的似乎就是Redis了。甚至有些团队，把Redis也当成缓冲系统的一部分，实际上也是认可Redis的性能优势。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">NoSQL除了更快、承载量更大以外，更重要的特点是，这种数据存储方式，只能按照一条索引来检索和写入。这样的需求约束，带来了分布上的好处，我们可以按这条主索引，来定义数据存放的进程（服务器）。这样一个数据库的数据，就能很方便的存放在不同的服务器上。在分布式系统的必然趋势下，数据存储层终于也找到了分布的方法。</p><h2 id="articleHeader3" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">分布式系统在可管理性上造成的问题</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">分布式系统并不是简单的把一堆服务器一起运行起来就能满足需求的。对比单机或少量服务器的集群，有一些特别需要解决的问题等待着我们。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">硬件故障率</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">所谓分布式系统，肯定就不是只有一台服务器。假设一台服务器的平均故障时间是1%，那么当你有100台服务器的时候，那就几乎总有一台是在故障的。虽然这个比方不一定很准确，但是，当你的系统所涉及的硬件越来越多，硬件的故障也会从偶然事件变成一个必然事件。一般我们在写功能代码的时候，是不会考虑到硬件故障的时候应该怎么办的。而如果在编写分布式系统的时候，就一定需要面对这个问题了。否则，很可能只有一台服务器出故障，整个数百台服务器的集群都工作不正常了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlo?w=554&amp;h=185" src="https://segmentfault.com/img/bVNKlo?w=554&h=185" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">除了服务器自己的内存、硬盘等故障，服务器之间的网络线路故障更加常见。而且这种故障还有可能是偶发的，或者是会自动恢复的。面对这种问题，如果只是简单的把“出现故障”的机器剔除出去，那还是不够的。因为网络可能过一会儿就又恢复了，而你的集群可能因为这一下的临时故障，丢失了过半的处理能力。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">如何让分布式系统，在各种可能随时出现故障的情况下，尽量的自动维护和维持对外服务，成为了编写程序就要考虑的问题。由于要考虑到这种故障的情况，所以我们在设计架构的时候，也要有意识的预设一些冗余、自我维护的功能。这些都不是产品上的业务需求，完全就是技术上的功能需求。能否在这方面提出对的需求，然后正确的实现，是服务器端程序员最重要的职责之一。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">资源利用率优化</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">在分布式系统的集群，包含了很多个服务器，当这样一个集群的硬件承载能力到达极限的时候，最自然的想法就是增加更多的硬件。然而，一个软件系统不是那么容易就可以通过“增加”硬件来提高承载性能的。因为软件在多个服务器上的工作，是需要有复杂细致的协调工作。在对一个集群扩容的时候，我们往往会要停掉整个集群的服务，然后修改各种配置，最后才能重新启动一个加入了新的服务器的集群。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlA?w=554&amp;h=352" src="https://segmentfault.com/img/bVNKlA?w=554&h=352" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">由于在每个服务器的内存里，都可能会有一些用户使用的数据，所以如果冒然在运行的时候，就试图修改集群中提供服务的配置，很可能会造成内存数据的丢失和错误。因此，运行时扩容在对无状态的服务上，是比较容易的，比如增加一些Web服务器。但如果是在有状态的服务上，比如网络游戏，几乎是不可能进行简单的运行时扩容的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">分布式集群除了扩容，还有缩容的需求。当用户人数下降，服务器硬件资源出现空闲的时候，我们往往需要这些空闲的资源能利用起来，放到另外一些新的服务集群里去。缩容和集群中有故障需要容灾有一定类似之处，区别是缩容的时间点和目标是可预期的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">由于分布式集群中的扩容、缩容，以及希望尽量能在线操作，这导致了非常复杂的技术问题需要处理，比如集群中互相关联的配置如何正确高效的修改、如何对有状态的进程进行操作、如何在扩容缩容的过程中保证集群中节点之间通信的正常。作为服务器端程序员，会需要花费大量的经历，来对多个进程的集群状态变化，造成的一系列问题进行专门的开发。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">软件服务内容更新</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">现在都流行用敏捷开发模式中的“迭代”，来表示一个服务不断的更新程序，满足新的需求，修正BUG。如果我们仅仅管理一台服务器，那么更新这一台服务器上的程序，是非常简单的：只要把软件包拷贝过去，然后修改下配置就好。但是如果你要对成百上千的服务器去做同样的操作，就不可能每台服务器登录上去处理。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">服务器端的程序批量安装部署工具，是每个分布式系统开发者都需要的。然而，我们的安装工作除了拷贝二进制文件和配置文件外，还会有很多其他的操作。比如打开防火墙、建立共享内存文件、修改数据库表结构、改写一些数据文件等等……甚至有一些还要在服务器上安装新的软件。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKlK?w=499&amp;h=314" src="https://segmentfault.com/img/bVNKlK?w=499&h=314" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">如果我们在开发服务器端程序的时候，就考虑到软件更新、版本升级的问题，那么我们对于配置文件、命令行参数、系统变量的使用，就会预先做一定的规划，这能让安装部署的工具运行更快，可靠性更高。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">除了安装部署的过程，还有一个重要的问题，就是不同版本间数据的问题。我们在升级版本的时候，旧版本程序生成的一些持久化数据，一般都是旧的数据格式的；而我们升级版本中如果涉及修改了数据格式，比如数据表结果，那么这些旧格式的数据，都要转换改写成新版本的数据格式才行。这导致了我们在设计数据结构的时候，就要考虑清楚这些表格的结构，是用最简单直接的表达方式，来让将来的修改更简单；还是一早就预计到修改的范围，专门预设一些字段，或者使用其他形式存放数据。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">除了持久化数据以外，如果存在客户端程序（如受击APP），这些客户端程序的升级往往不能和服务器同步，如果升级的内容包含了通信协议的修改，这就造成了我们必须为不同的版本部署不同的服务器端系统的问题。为了避免同时维护多套服务器，我们在软件开发的时候，往往倾向于所谓“版本兼容”的协议定义方式。而怎样设计的协议才能有很好的兼容性，又是服务器端程序需要仔细考虑的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">数据统计和决策</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">一般来说，分布式系统的日志数据，都是被集中到一起，然后统一进行统计的。然而，当集群的规模到一定程度的时候，这些日志的数据量会变得非常恐怖。很多时候，统计一天的日志量，要消耗计算机运行一天以上的时间。所以，日志统计这项工作，也变成一门非常专业的活动。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">经典的分布式统计模型，有Google的Map Reduce模型。这种模型既有灵活性，也能利用大量服务器进行统计工作。但是缺点是易用性往往不够好，因为这些数据的统计和我们常见的SQL数据表统计有非常大的差异，所以我们最后还是常常把数据丢到MySQL里面去做更细层面的统计。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKl3?w=554&amp;h=335" src="https://segmentfault.com/img/bVNKl3?w=554&h=335" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">由于分布式系统日志数量的庞大，以及日志复杂程度的提高。我们变得必须要掌握类似Map Reduce技术，才能真正的对分布式系统进行数据统计。而且我们还需要想办法提高统计工作的工作效率。</p><h2 id="articleHeader4" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">解决分布式系统可管理性的基本手段</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">目录服务（ZooKeeper）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">分布式系统是一个由很多进程组成的整体，这个整体中每个成员部分，都会具备一些状态，比如自己的负责模块，自己的负载情况，对某些数据的掌握等等。而这些和其他进程相关的数据，在故障恢复、扩容缩容的时候变得非常重要。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">简单的分布式系统，可以通过静态的配置文件，来记录这些数据：进程之间的连接对应关系，他们的IP地址和端口，等等。然而一个自动化程度高的分布式系统，必然要求这些状态数据都是动态保存的。这样才能让程序自己去做容灾和负载均衡的工作。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">一些程序员会专门自己编写一个DIR服务（目录服务），来记录集群中进程的运行状态。集群中进程会和这个DIR服务产生自动关联，这样在容灾、扩容、负载均衡的时候，就可以自动根据这些DIR服务里的数据，来调整请求的发送目地，从而达到绕开故障机器、或连接到新的服务器的操作。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVCxVV?w=529&amp;h=319" src="https://segmentfault.com/img/bVCxVV?w=529&h=319" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">然而，如果我们只是用一个进程来充当这个工作。那么这个进程就成为了这个集群的“单点”——意思就是，如果这个进程故障了，那么整个集群可能都无法运行的。所以存放集群状态的目录服务，也需要是分布式的。幸好我们有ZooKeeper这个优秀的开源软件，它正是一个分布式的目录服务区。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">ZooKeeper可以简单启动奇数个进程，来形成一个小的目录服务集群。这个集群会提供给所有其他进程，进行读写其巨大的“配置树”的能力。这些数据不仅仅会存放在一个ZooKeeper进程中，而是会根据一套非常安全的算法，让多个进程来承载。这让ZooKeeper成为一个优秀的分布式数据保存系统。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">由于ZooKeeper的数据存储结构，是一个类似文件目录的树状系统，所以我们常常会利用它的功能，把每个进程都绑定到其中一个“分枝”上，然后通过检查这些“分支”，来进行服务器请求的转发，就能简单的解决请求路由（由谁去做）的问题。另外还可以在这些“分支”上标记进程的负载的状态，这样负载均衡也很容易做了。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">目录服务是分布式系统中最关键的组件之一。而ZooKeeper是一个很好的开源软件，正好是用来完成这个任务。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">消息队列服务（ActiveMQ、ZeroMQ、Jgroups）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">两个进程间如果要跨机器通讯，我们几乎都会用TCP/UDP这些协议。但是直接使用网络API去编写跨进程通讯，是一件非常麻烦的事情。除了要编写大量的底层socket代码外，我们还要处理诸如：如何找到要交互数据的进程，如何保障数据包的完整性不至于丢失，如果通讯的对方进程挂掉了，或者进程需要重启应该怎样等等这一系列问题。这些问题包含了容灾扩容、负载均衡等一系列的需求。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">为了解决分布式系统进程间通讯的问题，人们总结出了一个有效的模型，就是“消息队列”模型。消息队列模型，就是把进程间的交互，抽象成对一个个消息的处理，而对于这些消息，我们都有一些“队列”，也就是管道，来对消息进行暂存。每个进程都可以访问一个或者多个队列，从里面读取消息（消费）或写入消息（生产）。由于有一个缓存的管道，我们可以放心的对进程状态进行变化。当进程起来的时候，它会自动去消费消息就可以了。而消息本身的路由，也是由存放的队列决定的，这样就把复杂的路由问题，变成了如何管理静态的队列的问题。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">一般的消息队列服务，都是提供简单的“投递”和“收取”两个接口，但是消息队列本身的管理方式却比较复杂，一般来说有两种。一部分的消息队列服务，提倡点对点的队列管理方式：每对通信节点之间，都有一个单独的消息队列。这种做法的好处是不同来源的消息，可以互不影响，不会因为某个队列的消息过多，挤占了其他队列的消息缓存空间。而且处理消息的程序也可以自己来定义处理的优先级——先收取、多处理某个队列，而少处理另外一些队列。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">但是这种点对点的消息队列，会随着集群的增长而增加大量的队列，这对于内存占用和运维管理都是一个复杂的事情。因此更高级的消息队列服务，开始可以让不同的队列共享内存空间，而消息队列的地址信息、建立和删除，都采用自动化的手段。——这些自动化往往需要依赖上文所述的“目录服务”，来登记队列的ID对应的物理IP和端口等信息。比如很多开发者使用ZooKeeper来充当消息队列服务的中央节点；而类似Jgropus这类软件，则自己维护一个集群状态来存放各节点今昔。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKmq?w=554&amp;h=300" src="https://segmentfault.com/img/bVNKmq?w=554&h=300" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">另外一种消息队列，则类似一个公共的邮箱。一个消息队列服务就是一个进程，任何使用者都可以投递或收取这个进程中的消息。这样对于消息队列的使用更简便，运维管理也比较方便。不过这种用法下，任何一个消息从发出到处理，最少进过两次进程间通信，其延迟是相对比较高的。并且由于没有预定的投递、收取约束，所以也比较容易出BUG。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">不管使用那种消息队列服务，在一个分布式服务器端系统中，进程间通讯都是必须要解决的问题，所以作为服务器端程序员，在编写分布式系统代码的时候，使用的最多的就是基于消息队列驱动的代码，这也直接导致了EJB3.0把“消息驱动的Bean”加入到规范之中。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">事务系统</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">在分布式的系统中，事务是最难解决的技术问题之一。由于一个处理可能分布在不同的处理进程上，任何一个进程都可能出现故障，而这个故障问题则需要导致一次回滚。这种回滚大部分又涉及多个其他的进程。这是一个扩散性的多进程通讯问题。要在分布式系统上解决事务问题，必须具备两个核心工具：一个是稳定的状态存储系统；另外一个是方便可靠的广播系统。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKmy?w=554&amp;h=236" src="https://segmentfault.com/img/bVNKmy?w=554&h=236" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">事务中任何一步的状态，都必须在整个集群中可见，并且还要有容灾的能力。这个需求，一般还是由集群的“目录服务”来承担。如果我们的目录服务足够健壮，那么我们可以把每步事务的处理状态，都同步写到目录服务上去。ZooKeeper再次在这个地方能发挥重要的作用。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">如果事务发生了中断，需要回滚，那么这个过程会涉及到多个已经执行过的步骤。也许这个回滚只需要在入口处回滚即可（加入那里有保存回滚所需的数据），也可能需要在各个处理节点上回滚。如果是后者，那么就需要集群中出现异常的节点，向其他所有相关的节点广播一个“回滚！事务ID是XXXX”这样的消息。这个广播的底层一般会由消息队列服务来承载，而类似Jgroups这样的软件，直接提供了广播服务。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">虽然现在我们在讨论事务系统，但实际上分布式系统经常所需的“分布式锁”功能，也是这个系统可以同时完成的。所谓的“分布式锁”，也就是一种能让各个节点先检查后执行的限制条件。如果我们有高效而单子操作的目录服务，那么这个锁状态实际上就是一种“单步事务”的状态记录，而回滚操作则默认是“暂停操作，稍后再试”。这种“锁”的方式，比事务的处理更简单，因此可靠性更高，所以现在越来越多的开发人员，愿意使用这种“锁”服务，而不是去实现一个“事务系统”。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKmI?w=356&amp;h=345" src="https://segmentfault.com/img/bVNKmI?w=356&h=345" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">自动部署工具（Docker）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">由于分布式系统最大的需求，是在运行时（有可能需要中断服务）来进行服务容量的变更：扩容或者缩容。而在分布式系统中某些节点故障的时候，也需要新的节点来恢复工作。这些如果还是像老式的服务器管理方式，通过填表、申报、进机房、装服务器、部署软件……这一套做法，那效率肯定是不行。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">在分布式系统的环境下，我们一般都是采用“池”的方式来管理服务。我们预先会申请一批机器，然后在某些机器上运行服务软件，另外一些则作为备份。显然我们这一批服务器不可能只为某一个业务服务，而是会提供多个不同的业务承载。那些备份的服务器，则会成为多个业务的通用备份“池”。随着业务需求的变化，一些服务器可能“退出”A服务而“加入”B服务。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">这种频繁的服务变化，依赖高度自动的软件部署工具。我们的运维人员，应该掌握这开发人员提供的部署工具，而不是厚厚的手册，来进行这类运维操作。一些比较有经验的开发团队，会统一所有的业务底层框架，以期大部分的部署、配置工具，都能用一套通用的系统来进行管理。而开源界，也有类似的尝试，最广为人知的莫过于RPM安装包格式，然而RPM的打包方式还是太复杂，不太符合服务器端程序的部署需求。所以后来又出现了Chef为代表的，可编程的通用部署系统。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKmR?w=500&amp;h=415" src="https://segmentfault.com/img/bVNKmR?w=500&h=415" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">然而，当NoSQL兴起，大家突然发现，其实很多互联网业务，其数据格式是如此的简单，很多时候根部不需要关系型数据库那种复杂的表格。对于索引的要求往往也只是根据主索引搜索。而更复杂的全文搜索，本身数据库也做不到。所以现在相当多的高并发的互联网业务，首选NoSQL来做存储设施。最早的NoSQL数据库有MangoDB等，现在最流行的似乎就是Redis了。甚至有些团队，把Redis也当成缓冲系统的一部分，实际上也是认可Redis的性能优势。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">NoSQL除了更快、承载量更大以外，更重要的特点是，这种数据存储方式，只能按照一条索引来检索和写入。这样的需求约束，带来了分布上的好处，我们可以按这条主索引，来定义数据存放的进程（服务器）。这样一个数据库的数据，就能很方便的存放在不同的服务器上。在分布式系统的必然趋势下，数据存储层终于也找到了分布的方法。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKne?w=554&amp;h=312" src="https://segmentfault.com/img/bVNKne?w=554&h=312" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">为了管理大量的分布式服务器端进程，我们确实需要花很多功夫，其优化其部署管理的工作。统一服务器端进程的运行规范，是实现自动化部署管理的基本条件。我们可以根据“操作系统”作为规范，采用Docker技术；也可以根据“Web应用”作为规范，采用某些PaaS平台技术；或者自己定义一些更具体的规范，自己开发完整的分布式计算平台。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">日志服务（log4j）</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">服务器端的日志，一直是一个既重要又容易被忽视的问题。很多团队在刚开始的时候，仅仅把日志视为开发调试、排除BUG的辅助工具。但是很快会发现，在服务运营起来之后，日志几乎是服务器端系统，在运行时可以用来了解程序情况的唯一有效手段。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">尽管我们有各种profile工具，但是这些工具大部分都不适合在正式运营的服务上开启，因为会严重降低其运行性能。所以我们更多的时候需要根据日志来分析。尽管日志从本质上，就是一行行的文本信息，但是由于其具有很大的灵活性，所以会很受开发和运维人员的重视。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">日志本身从概念上，是一个很模糊的东西。你可以随便打开一个文件，然后写入一些信息。但是现代的服务器系统，一般都会对日志做一些标准化的需求规范：日志必须是一行一行的，这样比较方便日后的统计分析；每行日志文本，都应该有一些统一的头部，比如日期时间就是基本的需求；日志的输出应该是分等级的，比如fatal/error/warning/info/debug/trace等等，程序可以在运行时调整输出的等级，以便可以节省日志打印的消耗；日志的头部一般还需要一些类似用户ID或者IP地址之类的头信息，用于快速查找定位过滤某一批日志记录，或者有一些其他的用于过滤缩小日志查看范围的字段，这叫做染色功能；日志文件还需要有“回滚”功能，也就是保持固定大小的多个文件，避免长期运行后，把硬盘写满。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">由于有上述的各种需求，所以开源界提供了很多游戏的日志组件库，比如大名鼎鼎的log4j，以及成员众多的log4X家族库，这些都是应用广泛而饱受好评的工具。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">不过对比日志的打印功能，日志的搜集和统计功能却往往比较容易被忽视。作为分布式系统的程序员，肯定是希望能从一个集中节点，能搜集统计到整个集群日志情况。而有一些日志的统计结果，甚至希望能在很短时间内反复获取，用来监控整个集群的健康情况。要做到这一点，就必须有一个分布式的文件系统，用来存放源源不断到达的日志（这些日志往往通过UDP协议发送过来）。而在这个文件系统上，则需要有一个类似Map Reduce架构的统计系统，这样才能对海量的日志信息，进行快速的统计以及报警。有一些开发者会直接使用Hadoop系统，有一些则用Kafka来作为日志存储系统，上面再搭建自己的统计程序。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">日志服务是分布式运维的仪表盘、潜望镜。如果没有一个可靠的日志服务，整个系统的运行状况可能会是失控的。所以无论你的分布式系统节点是多还是少，必须花费重要的精力和专门的开发时间，去建立一个对日志进行自动化统计分析的系统。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKog?w=554&amp;h=301" src="https://segmentfault.com/img/bVNKog?w=554&h=301" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><h2 id="articleHeader5" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">分布式系统在开发效率上造成的问题和解决思路</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">根据上文所述，分布式系统在业务需求的功能以为，还需要增加额外很多非功能的需求。这些非功能需求，往往都是为了一个多进程系统能稳定可靠运行而去设计和实现的。这些“额外”的工作，一般都会让你的代码更加复杂，如果没有很好的工具，就会让你的开发效率严重下降。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">微服务框架：EJB、WebService</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">当我们在讨论服务器端软件分布的时候，服务进程之间的通信就难免了。然而服务进程间的通讯，并不是简单的收发消息就能完成的。这里还涉及了消息的路由、编码解码、服务状态的读写等等。如果整个流程都由自己开发，那就太累人了。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKoI?w=298&amp;h=267" src="https://segmentfault.com/img/bVNKoI?w=298&h=267" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">所以业界很早就推出了各种分布式的服务器端开发框架，最著名的就是“EJB”——企业JavaBean。但凡冠以“企业”的技术，往往都是分布式下所需的部分，而EJB这种技术，也是一种分布式对象调用的技术。我们如果需要让多个进程合作完成任务，则需要把任务分解到多个“类”上，然后这些“类”的对象就会在各个进程容器中存活，从而协作提供服务。这个过程很“面向对象”。每个对象都是一个“微服务”，可以提供某些分布式的功能。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">而另外一些系统，则走向学习互联网的基本模型：HTTP。所以就有了各种的WebService框架，从开源的到商业软件，都有各自的WebService实现。这种模型，把复杂的路由、编解码等操作，简化成常见的一次HTTP操作，是一种非常有效的抽象。开发人员开发和部署多个WebService到Web服务器上，就完成了分布式系统的搭建。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKoS?w=435&amp;h=164" src="https://segmentfault.com/img/bVNKoS?w=435&h=164" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">不管我们是学习EJB还是WebService，实际上我们都需要简化分布式调用的复杂程度。而分布式调用的复杂之处，就是因为需要把容灾、扩容、负载均衡等功能，融合到跨进程调用里。所以使用一套通用的代码，来为所有的跨进程通讯（调用），统一的实现容灾、扩容、负载均衡、过载保护、状态缓存命中等等非功能性需求，能大大简化整个分布式系统的复杂性。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">一般我们的微服务框架，都会在路由阶段，对整个集群所有节点的状态进行观察，如哪些地址上运行了哪些服务的进程，这些服务进程的负载状况如何，是否可用，然后对于有状态的服务，还会使用类似一致性哈希的算法，去尽量试图提高缓存的命中率。当集群中的节点状态发生变化的时候，微服务框架下的所有节点，都能尽快的获得这个变化的情况，从新根据当前状态，重新规划以后的服务路由方向，从而实现自动化的路由选择，避开那些负载过高或者失效的节点。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">有一些微服务框架，还提供了类似IDL转换成“骨架”、“桩”代码的工具，这样在编写远程调用程序的时候，完全无需编写那些复杂的网络相关的代码，所有的传输层、编码层代码都自动的编写好了。这方面EJB、Facebook的Thrift，Google gRPC都具备这种能力。在具备代码生成能力的框架下，我们编写一个分布式下可用的功能模块（可能是一个函数或者是一个类），就好像编写一个本地的函数那样简单。这绝对是分布式系统下非常重要的效率提升。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKoX?w=406&amp;h=367" src="https://segmentfault.com/img/bVNKoX?w=406&h=367" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">异步编程工具：协程、Futrue、Lamda</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">在分布式系统中编程，你不可避免的会碰到大量的“回调”型API。因为分布式系统涉及非常多的网络通信。任何一个业务命令，都可能被分解到多个进程，通过多次网络通信来组合完成。由于异步非阻塞的编程模型大行其道，所以我们的代码也往往动不动就要碰到“回调函数”。然而，回调这种异步编程模型，是一种非常不利于代码阅读的编程方法。因为你无法从头到尾的阅读代码，去了解一个业务任务，是怎样被逐步的完成的。属于一个业务任务的代码，由于多次的非阻塞回调，从而被分割成很多个回调函数，在代码的各处被串接起来。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">更有甚者，我们有时候会选择使用“观察者模式”，我们会在一个地方注册大量的“事件-响应函数”，然后在所有需要回调的地方，都发出一个事件。——这样的代码，比单纯的注册回调函数更难理解。因为事件对应的响应函数，通常在发出事件处是无法找到的。这些函数永远都会放在另外的一些文件里，而且有时候这些函数还会在运行时改变。而事件名字本身，也往往是匪夷所思难以理解的，因为当你的程序需要成千上百的事件的时候，起一个容易理解名符其实的名字，几乎是不可能的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">为了解决回调函数这种对于代码可读性的破坏作用，人们发明了很多不同的改进方法。其中最著名的是“协程”。我们以前常常习惯于用多线程来解决问题，所以非常熟悉以同步的方式去写代码。协程正是延续了我们的这一习惯，但不同于多线程的是，协程并不会“同时”运行，它只是在需要阻塞的地方，用Yield()切换出去执行其他协程，然后当阻塞结束后，用Resume()回到刚刚切换的位置继续往下执行。这相当于我们可以把回调函数的内容，接到Yield()调用的后面。这种编写代码的方法，非常类似于同步的写法，让代码变得非常易读。但是唯一的缺点是，Resume()的代码还是需要在所谓“主线程”中运行。用户必须自己从阻塞恢复的时候，去调用Resume()。协程另外一个缺点，是需要做栈保存，在切换到其他协程之后，栈上的临时变量，也都需要额外占用空间，这限制了协程代码的写法，让开发者不能用太大的临时变量。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKo8?w=452&amp;h=212" src="https://segmentfault.com/img/bVNKo8?w=452&h=212" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">而另外一种改善回调函数的写法，往往叫做Future/Promise模型。这种写法的基本思路，就是“一次性把所有回调写到一起”。这是一个非常实用的编程模型，它没有让你去彻底干掉回调，而是让你可以把回调从分散各处，集中到一个地方。在同一段代码中，你可以清晰的看到各个异步的步骤是如何串接、或者并行执行的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKpe?w=533&amp;h=223" src="https://segmentfault.com/img/bVNKpe?w=533&h=223" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">最后说一下lamda模型，这种写法流行于js语言的广泛应用。由于在其他语言中，定一个回调函数是非常费事的：Java语言要设计一个接口然后做一个实现，简直是五星级的费事程度；C/C++支持函数指针，算是比较简单，但是也很容易导致代码看不懂；脚本语言相对好一些，也要定义个函数。而直接在调用回调的地方，写回调函数的内容，是最方便开发，也比较利于阅读的。更重要的，lamda一般意味着闭包，也就是说，这种回调函数的调用栈，是被分别保存的，很多需要在异步操作中，需要建立一个类似“会话池”的状态保存变量，在这里都是不需要的，而是可以自然生效的。这一点和协程有异曲同工之妙。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKpl?w=279&amp;h=361" src="https://segmentfault.com/img/bVNKpl?w=279&h=361" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">不管使用哪一种异步编程方式，其编码的复杂度，都是一定比同步调用的代码高的。所以我们在编写分布式服务器代码的时候，一定要仔细规划代码结构，避免出现随意添加功能代码，导致代码的可读性被破坏的情况。不可读的代码，就是不可维护的代码，而大量异步回调的服务器端代码，是更容易出现这种情况的。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><strong style="box-sizing: border-box;">云服务模型：IaaS/PaaS/SaaS</strong></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">在复杂的分布式系统开发和使用过程中，如何对大量服务器和进程的运维，一直是一个贯穿其中的问题。不管是使用微服务框架、还是统一的部署工具、日志监控服务，都是因为大量的服务器，要集中的管理，是非常不容易的。这里背后的原因，主要是大量的硬件和网络，把逻辑上的计算能力，切割成很多小块。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">随着计算机运算能力的提升，出现的虚拟化技术，却能把被分割的计算单元，更智能的统一起来。其中最常见的就是IaaS技术：当我们可以用一个服务器硬件，运行多个虚拟的服务器操作系统的时候，我们需要维护的硬件数量就会成倍的下降。而PaaS技术的流行，让我们可以为某一种特定的编程模型，统一的进行系统运行环境的部署维护。而不需要再一台台服务器的去装操作系统、配置运行容器、上传运行代码和数据。在没有统一的PaaS之前，安装大量的MySQL数据库，曾经是消耗大量时间和精力的工作。</p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">当我们的业务模型，成熟到可以抽象为一些固定的软件时，我们的分布式系统就会变得更加易用。我们的计算能力不再是代码和库，而是一个个通过网络提供服务的云——SaaS，这样使用者根本来维护、部署的工作都不需要，只要申请一个接口，填上预期的容量额度，就能直接使用了。这不仅节省了大量开发对应功能的事件，还等于把大量的运维工作，都交出去给SaaS的维护者——而他们做这样的维护会更加专业。<br style="box-sizing: border-box;"/><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKpw?w=300&amp;h=254" src="https://segmentfault.com/img/bVNKpw?w=300&h=254" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">在运维模型的进化上，从IaaS到PaaS到SaaS，其应用范围也许是越来越窄，但使用的便利性却成倍的提高。这也证明了，软件劳动的工作，也是可以通过分工，向更专业化、更细分的方向去提高效率。</p><h2 id="articleHeader6" style="box-sizing: border-box; font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-weight:="" line-height:="" color:="" margin:="" 1.5em="" 0px="" font-size:="" border-bottom:="" 1px="" solid="" padding-bottom:="" white-space:="" background-color:="">总结分布式系统问题的解决路径</h2><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:=""><span class="img-wrap" style="box-sizing: border-box;"><img data-src="/img/bVNKpK?w=650&amp;h=768" src="https://segmentfault.com/img/bVNKpK?w=650&h=768" style="box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;"/></span></p><p style="box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, " helvetica="" pingfang="" hiragino="" sans="" wenquanyi="" micro="" microsoft="" font-size:="" white-space:="" background-color:="">针对服务器承载能力的问题，腾讯WeTest运用了沉淀十多年的内部实践经验总结，通过基于真实业务场景和用户行为进行压力测试，帮助游戏开发者发现服务器端的性能瓶颈，进行针对性的性能调优，降低服务器采购和维护成本，提高用户留存和转化率。</p><p><br/></p>',
  'is_tui' => '1',
  'status' => '1',
  'views' => '1',
  'like' => '0',
  'auth' => '韩会强',
)
[ info ] [ RUN ] app\admin\controller\Article->edit_article[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000337s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000868s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `id` = 45 LIMIT 1 [ RunTime:0.000464s ]
[ sql ] [ SQL ] UPDATE `think_article`  SET `title`='浅析分布式系统',`cate_id`=29,`type`=0,`keyword`='分布式系统',`remark`='我们常常会听说，某个互联网应用的服务器端系统多么牛逼，比如QQ、微信、淘宝。那么，一个互联网应用的服务器端系统，到底牛逼在什么地方？为什么海量的用户访问，会让一个服务器端系统变得更复杂？本文就是想从最基本的地方开始，探寻服务器端系统技术的基础概念。',`content`='<h1 id=\"articleHeader0\" style=\"box-sizing: border-box; font-size: 2.25em; margin: 0px; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">WeTest导读</h1><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">我们常常会听说，某个互联网应用的服务器端系统多么牛逼，比如QQ、微信、淘宝。那么，一个互联网应用的服务器端系统，到底牛逼在什么地方？为什么海量的用户访问，会让一个服务器端系统变得更复杂？本文就是想从最基本的地方开始，探寻服务器端系统技术的基础概念。</p><hr style=\"box-sizing: content-box; height: 0px; margin: 1.5em auto; border-width: 2px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: dotted; border-top-color: rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"/><h2 id=\"articleHeader1\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">承载量是分布式系统存在的原因</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">当一个互联网业务获得大众欢迎的时候，最显著碰到的技术问题，就是服务器非常繁忙。当每天有1000万个用户访问你的网站时，无论你使用什么样的服务器硬件，都不可能只用一台机器就承载的了。因此，在互联网程序员解决服务器端问题的时候，必须要考虑如何使用多台服务器，为同一种互联网应用提供服务，这就是所谓“分布式系统”的来源。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">然而，大量用户访问同一个互联网业务，所造成的问题并不简单。从表面上看，要能满足很多用户来自互联网的请求，最基本的需求就是所谓性能需求：用户反应网页打开很慢，或者网游中的动作很卡等等。而这些对于“服务速度”的要求，实际上包含的部分却是以下几个：高吞吐、高并发、低延迟和负载均衡。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">高吞吐，意味着你的系统，可以同时承载大量的用户使用。这里关注的整个系统能同时服务的用户数。这个吞吐量肯定是不可能用单台服务器解决的，因此需要多台服务器协作，才能达到所需要的吞吐量。而在多台服务器的协作中，如何才能有效的利用这些服务器，不致于其中某一部分服务器成为瓶颈，从而影响整个系统的处理能力，这就是一个分布式系统，在架构上需要仔细权衡的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">高并发是高吞吐的一个延伸需求。当我们在承载海量用户的时候，我们当然希望每个服务器都能尽其所能的工作，而不要出现无谓的消耗和等待的情况。然而，软件系统并不是简单的设计，就能对同时处理多个任务，做到“尽量多”的处理。很多时候，我们的程序会因为要选择处理哪个任务，而导致额外的消耗。这也是分布式系统解决的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">低延迟对于人数稀少的服务来说不算什么问题。然而，如果我们需要在大量用户访问的时候，也能很快的返回计算结果，这就要困难的多。因为除了大量用户访问可能造成请求在排队外，还有可能因为排队的长度太长，导致内存耗尽、带宽占满等空间性的问题。如果因为排队失败而采取重试的策略，则整个延迟会变的更高。所以分布式系统会采用很多请求分拣和分发的做法，尽快的让更多的服务器来出来用户的请求。但是，由于一个数量庞大的分布式系统，必然需要把用户的请求经过多次的分发，整个延迟可能会因为这些分发和转交的操作，变得更高，所以分布式系统除了分发请求外，还要尽量想办法减少分发的层次数，以便让请求能尽快的得到处理。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKkz?w=554&amp;h=421\" src=\"https://segmentfault.com/img/bVNKkz?w=554&h=421\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">由于互联网业务的用户来自全世界，因此在物理空间上可能来自各种不同延迟的网络和线路，在时间上也可能来自不同的时区，所以要有效的应对这种用户来源的复杂性，就需要把多个服务器部署在不同的空间来提供服务。同时，我们也需要让同时发生的请求，有效的让多个不同服务器承载。所谓的负载均衡，就是分布式系统与生俱来需要完成的功课。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">由于分布式系统，几乎是解决互联网业务承载量问题，的最基本方法，所以作为一个服务器端程序员，掌握分布式系统技术就变得异常重要了。然而，分布式系统的问题，并非是学会用几个框架和使用几个库，就能轻易解决的，因为当一个程序在一个电脑上运行，变成了又无数个电脑上同时协同运行，在开发、运维上都会带来很大的差别。</p><h2 id=\"articleHeader2\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">分布式系统提高承载量的基本手段</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">分层模型（路由、代理）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">使用多态服务器来协同完成计算任务，最简单的思路就是，让每个服务器都能完成全部的请求，然后把请求随机的发给任何一个服务器处理。最早期的互联网应用中，DNS轮询就是这样的做法：当用户输入一个域名试图访问某个网站，这个域名会被解释成多个IP地址中的一个，随后这个网站的访问请求，就被发往对应IP的服务器了，这样多个服务器（多个IP地址）就能一起解决处理大量的用户请求。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">然而，单纯的请求随机转发，并不能解决一切问题。比如我们很多互联网业务，都是需要用户登录的。在登录某一个服务器后，用户会发起多个请求，如果我们把这些请求随机的转发到不同的服务器上，那么用户登录的状态就会丢失，造成一些请求处理失败。简单的依靠一层服务转发是不够的，所以我们会增加一批服务器，这些服务器会根据用户的Cookie，或者用户的登录凭据，来再次转发给后面具体处理业务的服务器。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">除了登录的需求外，我们还发现，很多数据是需要数据库来处理的，而我们的这些数据往往都只能集中到一个数据库中，否则在查询的时候就会丢失其他服务器上存放的数据结果。所以往往我们还会把数据库单独出来成为一批专用的服务器。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">至此，我们就会发现，一个典型的三层结构出现了：接入、逻辑、存储。然而，这种三层结果，并不就能包医百病。例如，当我们需要让用户在线互动（网游就是典型） ，那么分割在不同逻辑服务器上的在线状态数据，是无法知道对方的，这样我们就需要专门做一个类似互动服务器的专门系统，让用户登录的时候，也同时记录一份数据到它那里，表明某个用户登录在某个服务器上，而所有的互动操作，要先经过这个互动服务器，才能正确的把消息转发到目标用户的服务器上。&nbsp;<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKkN?w=554&amp;h=346\" src=\"https://segmentfault.com/img/bVNKkN?w=554&h=346\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">又例如，当我们在使用网上论坛（BBS）系统的时候，我们发的文章，不可能只写入一个数据库里，因为太多人的阅读请求会拖死这个数据库。我们常常会按论坛板块来写入不同的数据库，又或者是同时写入多个数据库。这样把文章数据分别存放到不同的服务器上，才能应对大量的操作请求。然而，用户在读取文章的时候，就需要有一个专门的程序，去查找具体文章在哪一个服务器上，这时候我们就要架设一个专门的代理层，把所有的文章请求先转交给它，由它按照我们预设的存储计划，去找对应的数据库获取数据。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">根据上面的例子来看，分布式系统虽然具有三层典型的结构，但是实际上往往不止有三层，而是根据业务需求，会设计成多个层次的。为了把请求转交给正确的进程处理，我们而设计很多专门用于转发请求的进程和服务器。这些进程我们常常以Proxy或者Router来命名，一个多层结构常常会具备各种各样的Proxy进程。这些代理进程，很多时候都是通过TCP来连接前后两端。然而，TCP虽然简单，但是却会有故障后不容易恢复的问题。而且TCP的网络编程，也是有点复杂的。——所以，人们设计出更好进程间通讯机制：消息队列。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKkQ?w=553&amp;h=365\" src=\"https://segmentfault.com/img/bVNKkQ?w=553&h=365\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">尽管通过各种Proxy或者Router进程能组建出强大的分布式系统，但是其管理的复杂性也是非常高的。所以人们在分层模式的基础上，想出了更多的方法，来让这种分层模式的程序变得更简单高效的方法。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">并发模型（多线程、异步）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">当我们在编写服务器端程序是，我们会明确的知道，大部分的程序，都是会处理同时到达的多个请求的。因此我们不能好像HelloWorld那么简单的，从一个简单的输入计算出输出来。因为我们会同时获得很多个输入，需要返回很多个输出。在这些处理的过程中，往往我们还会碰到需要“等待”或“阻塞”的情况，比如我们的程序要等待数据库处理结果，等待向另外一个进程请求结果等等……如果我们把请求一个挨着一个的处理，那么这些空闲的等待时间将白白浪费，造成用户的响应延时增加，以及整体系统的吞吐量极度下降。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">所以在如何同时处理多个请求的问题上，业界有2个典型的方案。一种是多线程，一种是异步。在早期的系统中，多线程或多进程是最常用的技术。这种技术的代码编写起来比较简单，因为每个线程中的代码都肯定是按先后顺序执行的。但是由于同时运行着多个线程，所以你无法保障多个线程之间的代码的先后顺序。这对于需要处理同一个数据的逻辑来说，是一个非常严重的问题，最简单的例子就是显示某个新闻的阅读量。两个++操作同时运行，有可能结果只加了1，而不是2。所以多线程下，我们常常要加很多数据的锁，而这些锁又反过来可能导致线程的死锁。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">因此异步回调模型在随后比多线程更加流行，除了多线程的死锁问题外，异步还能解决多线程下，线程反复切换导致不必要的开销的问题：每个线程都需要一个独立的栈空间，在多线程并行运行的时候，这些栈的数据可能需要来回的拷贝，这额外消耗了CPU。同时由于每个线程都需要占用栈空间，所以在大量线程存在的时候，内存的消耗也是巨大的。而异步回调模型则能很好的解决这些问题，不过异步回调更像是“手工版”的并行处理，需要开发者自己去实现如何“并行”的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">异步回调基于非阻塞的I/O操作（网络和文件），这样我们就不用在调用读写函数的时候“卡”在那一句函数调用，而是立刻返回“有无数据”的结果。而Linux的epoll技术，则利用底层内核的机制，让我们可以快速的“查找”到有数据可以读写的连接文件。由于每个操作都是非阻塞的，所以我们的程序可以只用一个进程，就处理大量并发的请求。因为只有一个进程，所以所有的数据处理，其顺序都是固定的，不可能出现多线程中，两个函数的语句交错执行的情况，因此也不需要各种“锁”。从这个角度看，异步非阻塞的技术，是大大简化了开发的过程。由于只有一个线程，也不需要有线程切换之类的开销，所以异步非阻塞成为很多对吞吐量、并发有较高要求的系统首选。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKkX?w=554&amp;h=364\" src=\"https://segmentfault.com/img/bVNKkX?w=554&h=364\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">int epoll_create(int size)；//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">缓冲技术</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">在互联网服务中，大部分的用户交互，都是需要立刻返回结果的，所以对于延迟有一定的要求。而类似网络游戏之类服务，延迟更是要求缩短到几十毫秒以内。所以为了降低延迟，缓冲是互联网服务中最常见的技术之一。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">早期的WEB系统中，如果每个HTTP请求的处理，都去数据库（MySQL）读写一次，那么数据库很快就会因为连接数占满而停止响应。因为一般的数据库，支持的连接数都只有几百，而WEB的应用的并发请求，轻松能到几千。这也是很多设计不良的网站人一多就卡死的最直接原因。为了尽量减少对数据库的连接和访问，人们设计了很多缓冲系统——把从数据库中查询的结果存放到更快的设施上，如果没有相关联的修改，就直接从这里读。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">最典型的WEB应用缓冲系统是Memcache。由于PHP本身的线程结构，是不带状态的。早期PHP本身甚至连操作“堆”内存的方法都没有，所以那些持久的状态，就一定要存放到另外一个进程里。而Memcache就是一个简单可靠的存放临时状态的开源软件。很多PHP应用现在的处理逻辑，都是先从数据库读取数据，然后写入Memcache；当下次请求来的时候，先尝试从Memcache里面读取数据，这样就有可能大大减少对数据库的访问。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKk6?w=333&amp;h=375\" src=\"https://segmentfault.com/img/bVNKk6?w=333&h=375\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">然而Memcache本身是一个独立的服务器进程，这个进程自身并不带特别的集群功能。也就是说这些Memcache进程，并不能直接组建成一个统一的集群。如果一个Memcache不够用，我们就要手工用代码去分配，哪些数据应该去哪个Memcache进程。——这对于真正的大型分布式网站来说，管理一个这样的缓冲系统，是一个很繁琐的工作。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">因此人们开始考虑设计一些更高效的缓冲系统：从性能上来说，Memcache的每笔请求，都要经过网络传输，才能去拉取内存中的数据。这无疑是有一点浪费的，因为请求者本身的内存，也是可以存放数据的。——这就是促成了很多利用请求方内存的缓冲算法和技术，其中最简单的就是使用LRU算法，把数据放在一个哈希表结构的堆内存中。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">而Memcache的不具备集群功能，也是一个用户的痛点。于是很多人开始设计，如何让数据缓存分不到不同的机器上。最简单的思路是所谓读写分离，也就是缓存每次写，都写到多个缓冲进程上记录，而读则可以随机读任何一个进程。在业务数据有明显的读写不平衡差距上，效果是非常好的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">然而，并不是所有的业务都能简单的用读写分离来解决问题，比如一些在线互动的互联网业务，比如社区、游戏。这些业务的数据读写频率并没很大的差异，而且也要求很高的延迟。因此人们又再想办法，把本地内存和远端进程的内存缓存结合起来使用，让数据具备两级缓存。同时，一个数据不在同时的复制存在所有的缓存进程上，而是按一定规律分布在多个进程上。——这种分布规律使用的算法，最流行的就是所谓“一致性哈希”。这种算法的好处是，当某一个进程失效挂掉，不需要把整个集群中所有的缓存数据，都重新修改一次位置。你可以想象一下，如果我们的数据缓存分布，是用简单的以数据的ID对进程数取模，那么一旦进程数变化，每个数据存放的进程位置都可能变化，这对于服务器的故障容忍是不利的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">Orcale公司旗下有一款叫Coherence的产品，是在缓存系统上设计比较好的。这个产品是一个商业产品，支持利用本地内存缓存和远程进程缓存协作。集群进程是完全自管理的，还支持在数据缓存所在进程，进行用户定义的计算（处理器功能），这就不仅仅是缓存了，还是一个分布式的计算系统。&nbsp;<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlc?w=553&amp;h=283\" src=\"https://segmentfault.com/img/bVNKlc?w=553&h=283\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">存储技术（NoSQL）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">相信CAP理论大家已经耳熟能详，然而在互联发展的早期，大家都还在使用MySQL的时候，如何让数据库存放更多的数据，承载更多的连接，很多团队都是绞尽脑汁。甚至于有很多业务，主要的数据存储方式是文件，数据库反而变成是辅助的设施了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlh?w=554&amp;h=477\" src=\"https://segmentfault.com/img/bVNKlh?w=554&h=477\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">然而，当NoSQL兴起，大家突然发现，其实很多互联网业务，其数据格式是如此的简单，很多时候根部不需要关系型数据库那种复杂的表格。对于索引的要求往往也只是根据主索引搜索。而更复杂的全文搜索，本身数据库也做不到。所以现在相当多的高并发的互联网业务，首选NoSQL来做存储设施。最早的NoSQL数据库有MangoDB等，现在最流行的似乎就是Redis了。甚至有些团队，把Redis也当成缓冲系统的一部分，实际上也是认可Redis的性能优势。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">NoSQL除了更快、承载量更大以外，更重要的特点是，这种数据存储方式，只能按照一条索引来检索和写入。这样的需求约束，带来了分布上的好处，我们可以按这条主索引，来定义数据存放的进程（服务器）。这样一个数据库的数据，就能很方便的存放在不同的服务器上。在分布式系统的必然趋势下，数据存储层终于也找到了分布的方法。</p><h2 id=\"articleHeader3\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">分布式系统在可管理性上造成的问题</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">分布式系统并不是简单的把一堆服务器一起运行起来就能满足需求的。对比单机或少量服务器的集群，有一些特别需要解决的问题等待着我们。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">硬件故障率</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">所谓分布式系统，肯定就不是只有一台服务器。假设一台服务器的平均故障时间是1%，那么当你有100台服务器的时候，那就几乎总有一台是在故障的。虽然这个比方不一定很准确，但是，当你的系统所涉及的硬件越来越多，硬件的故障也会从偶然事件变成一个必然事件。一般我们在写功能代码的时候，是不会考虑到硬件故障的时候应该怎么办的。而如果在编写分布式系统的时候，就一定需要面对这个问题了。否则，很可能只有一台服务器出故障，整个数百台服务器的集群都工作不正常了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlo?w=554&amp;h=185\" src=\"https://segmentfault.com/img/bVNKlo?w=554&h=185\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">除了服务器自己的内存、硬盘等故障，服务器之间的网络线路故障更加常见。而且这种故障还有可能是偶发的，或者是会自动恢复的。面对这种问题，如果只是简单的把“出现故障”的机器剔除出去，那还是不够的。因为网络可能过一会儿就又恢复了，而你的集群可能因为这一下的临时故障，丢失了过半的处理能力。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">如何让分布式系统，在各种可能随时出现故障的情况下，尽量的自动维护和维持对外服务，成为了编写程序就要考虑的问题。由于要考虑到这种故障的情况，所以我们在设计架构的时候，也要有意识的预设一些冗余、自我维护的功能。这些都不是产品上的业务需求，完全就是技术上的功能需求。能否在这方面提出对的需求，然后正确的实现，是服务器端程序员最重要的职责之一。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">资源利用率优化</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">在分布式系统的集群，包含了很多个服务器，当这样一个集群的硬件承载能力到达极限的时候，最自然的想法就是增加更多的硬件。然而，一个软件系统不是那么容易就可以通过“增加”硬件来提高承载性能的。因为软件在多个服务器上的工作，是需要有复杂细致的协调工作。在对一个集群扩容的时候，我们往往会要停掉整个集群的服务，然后修改各种配置，最后才能重新启动一个加入了新的服务器的集群。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlA?w=554&amp;h=352\" src=\"https://segmentfault.com/img/bVNKlA?w=554&h=352\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">由于在每个服务器的内存里，都可能会有一些用户使用的数据，所以如果冒然在运行的时候，就试图修改集群中提供服务的配置，很可能会造成内存数据的丢失和错误。因此，运行时扩容在对无状态的服务上，是比较容易的，比如增加一些Web服务器。但如果是在有状态的服务上，比如网络游戏，几乎是不可能进行简单的运行时扩容的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">分布式集群除了扩容，还有缩容的需求。当用户人数下降，服务器硬件资源出现空闲的时候，我们往往需要这些空闲的资源能利用起来，放到另外一些新的服务集群里去。缩容和集群中有故障需要容灾有一定类似之处，区别是缩容的时间点和目标是可预期的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">由于分布式集群中的扩容、缩容，以及希望尽量能在线操作，这导致了非常复杂的技术问题需要处理，比如集群中互相关联的配置如何正确高效的修改、如何对有状态的进程进行操作、如何在扩容缩容的过程中保证集群中节点之间通信的正常。作为服务器端程序员，会需要花费大量的经历，来对多个进程的集群状态变化，造成的一系列问题进行专门的开发。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">软件服务内容更新</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">现在都流行用敏捷开发模式中的“迭代”，来表示一个服务不断的更新程序，满足新的需求，修正BUG。如果我们仅仅管理一台服务器，那么更新这一台服务器上的程序，是非常简单的：只要把软件包拷贝过去，然后修改下配置就好。但是如果你要对成百上千的服务器去做同样的操作，就不可能每台服务器登录上去处理。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">服务器端的程序批量安装部署工具，是每个分布式系统开发者都需要的。然而，我们的安装工作除了拷贝二进制文件和配置文件外，还会有很多其他的操作。比如打开防火墙、建立共享内存文件、修改数据库表结构、改写一些数据文件等等……甚至有一些还要在服务器上安装新的软件。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKlK?w=499&amp;h=314\" src=\"https://segmentfault.com/img/bVNKlK?w=499&h=314\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">如果我们在开发服务器端程序的时候，就考虑到软件更新、版本升级的问题，那么我们对于配置文件、命令行参数、系统变量的使用，就会预先做一定的规划，这能让安装部署的工具运行更快，可靠性更高。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">除了安装部署的过程，还有一个重要的问题，就是不同版本间数据的问题。我们在升级版本的时候，旧版本程序生成的一些持久化数据，一般都是旧的数据格式的；而我们升级版本中如果涉及修改了数据格式，比如数据表结果，那么这些旧格式的数据，都要转换改写成新版本的数据格式才行。这导致了我们在设计数据结构的时候，就要考虑清楚这些表格的结构，是用最简单直接的表达方式，来让将来的修改更简单；还是一早就预计到修改的范围，专门预设一些字段，或者使用其他形式存放数据。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">除了持久化数据以外，如果存在客户端程序（如受击APP），这些客户端程序的升级往往不能和服务器同步，如果升级的内容包含了通信协议的修改，这就造成了我们必须为不同的版本部署不同的服务器端系统的问题。为了避免同时维护多套服务器，我们在软件开发的时候，往往倾向于所谓“版本兼容”的协议定义方式。而怎样设计的协议才能有很好的兼容性，又是服务器端程序需要仔细考虑的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">数据统计和决策</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">一般来说，分布式系统的日志数据，都是被集中到一起，然后统一进行统计的。然而，当集群的规模到一定程度的时候，这些日志的数据量会变得非常恐怖。很多时候，统计一天的日志量，要消耗计算机运行一天以上的时间。所以，日志统计这项工作，也变成一门非常专业的活动。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">经典的分布式统计模型，有Google的Map Reduce模型。这种模型既有灵活性，也能利用大量服务器进行统计工作。但是缺点是易用性往往不够好，因为这些数据的统计和我们常见的SQL数据表统计有非常大的差异，所以我们最后还是常常把数据丢到MySQL里面去做更细层面的统计。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKl3?w=554&amp;h=335\" src=\"https://segmentfault.com/img/bVNKl3?w=554&h=335\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">由于分布式系统日志数量的庞大，以及日志复杂程度的提高。我们变得必须要掌握类似Map Reduce技术，才能真正的对分布式系统进行数据统计。而且我们还需要想办法提高统计工作的工作效率。</p><h2 id=\"articleHeader4\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">解决分布式系统可管理性的基本手段</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">目录服务（ZooKeeper）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">分布式系统是一个由很多进程组成的整体，这个整体中每个成员部分，都会具备一些状态，比如自己的负责模块，自己的负载情况，对某些数据的掌握等等。而这些和其他进程相关的数据，在故障恢复、扩容缩容的时候变得非常重要。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">简单的分布式系统，可以通过静态的配置文件，来记录这些数据：进程之间的连接对应关系，他们的IP地址和端口，等等。然而一个自动化程度高的分布式系统，必然要求这些状态数据都是动态保存的。这样才能让程序自己去做容灾和负载均衡的工作。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">一些程序员会专门自己编写一个DIR服务（目录服务），来记录集群中进程的运行状态。集群中进程会和这个DIR服务产生自动关联，这样在容灾、扩容、负载均衡的时候，就可以自动根据这些DIR服务里的数据，来调整请求的发送目地，从而达到绕开故障机器、或连接到新的服务器的操作。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVCxVV?w=529&amp;h=319\" src=\"https://segmentfault.com/img/bVCxVV?w=529&h=319\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">然而，如果我们只是用一个进程来充当这个工作。那么这个进程就成为了这个集群的“单点”——意思就是，如果这个进程故障了，那么整个集群可能都无法运行的。所以存放集群状态的目录服务，也需要是分布式的。幸好我们有ZooKeeper这个优秀的开源软件，它正是一个分布式的目录服务区。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">ZooKeeper可以简单启动奇数个进程，来形成一个小的目录服务集群。这个集群会提供给所有其他进程，进行读写其巨大的“配置树”的能力。这些数据不仅仅会存放在一个ZooKeeper进程中，而是会根据一套非常安全的算法，让多个进程来承载。这让ZooKeeper成为一个优秀的分布式数据保存系统。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">由于ZooKeeper的数据存储结构，是一个类似文件目录的树状系统，所以我们常常会利用它的功能，把每个进程都绑定到其中一个“分枝”上，然后通过检查这些“分支”，来进行服务器请求的转发，就能简单的解决请求路由（由谁去做）的问题。另外还可以在这些“分支”上标记进程的负载的状态，这样负载均衡也很容易做了。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">目录服务是分布式系统中最关键的组件之一。而ZooKeeper是一个很好的开源软件，正好是用来完成这个任务。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">消息队列服务（ActiveMQ、ZeroMQ、Jgroups）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">两个进程间如果要跨机器通讯，我们几乎都会用TCP/UDP这些协议。但是直接使用网络API去编写跨进程通讯，是一件非常麻烦的事情。除了要编写大量的底层socket代码外，我们还要处理诸如：如何找到要交互数据的进程，如何保障数据包的完整性不至于丢失，如果通讯的对方进程挂掉了，或者进程需要重启应该怎样等等这一系列问题。这些问题包含了容灾扩容、负载均衡等一系列的需求。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">为了解决分布式系统进程间通讯的问题，人们总结出了一个有效的模型，就是“消息队列”模型。消息队列模型，就是把进程间的交互，抽象成对一个个消息的处理，而对于这些消息，我们都有一些“队列”，也就是管道，来对消息进行暂存。每个进程都可以访问一个或者多个队列，从里面读取消息（消费）或写入消息（生产）。由于有一个缓存的管道，我们可以放心的对进程状态进行变化。当进程起来的时候，它会自动去消费消息就可以了。而消息本身的路由，也是由存放的队列决定的，这样就把复杂的路由问题，变成了如何管理静态的队列的问题。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">一般的消息队列服务，都是提供简单的“投递”和“收取”两个接口，但是消息队列本身的管理方式却比较复杂，一般来说有两种。一部分的消息队列服务，提倡点对点的队列管理方式：每对通信节点之间，都有一个单独的消息队列。这种做法的好处是不同来源的消息，可以互不影响，不会因为某个队列的消息过多，挤占了其他队列的消息缓存空间。而且处理消息的程序也可以自己来定义处理的优先级——先收取、多处理某个队列，而少处理另外一些队列。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">但是这种点对点的消息队列，会随着集群的增长而增加大量的队列，这对于内存占用和运维管理都是一个复杂的事情。因此更高级的消息队列服务，开始可以让不同的队列共享内存空间，而消息队列的地址信息、建立和删除，都采用自动化的手段。——这些自动化往往需要依赖上文所述的“目录服务”，来登记队列的ID对应的物理IP和端口等信息。比如很多开发者使用ZooKeeper来充当消息队列服务的中央节点；而类似Jgropus这类软件，则自己维护一个集群状态来存放各节点今昔。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKmq?w=554&amp;h=300\" src=\"https://segmentfault.com/img/bVNKmq?w=554&h=300\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">另外一种消息队列，则类似一个公共的邮箱。一个消息队列服务就是一个进程，任何使用者都可以投递或收取这个进程中的消息。这样对于消息队列的使用更简便，运维管理也比较方便。不过这种用法下，任何一个消息从发出到处理，最少进过两次进程间通信，其延迟是相对比较高的。并且由于没有预定的投递、收取约束，所以也比较容易出BUG。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">不管使用那种消息队列服务，在一个分布式服务器端系统中，进程间通讯都是必须要解决的问题，所以作为服务器端程序员，在编写分布式系统代码的时候，使用的最多的就是基于消息队列驱动的代码，这也直接导致了EJB3.0把“消息驱动的Bean”加入到规范之中。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">事务系统</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">在分布式的系统中，事务是最难解决的技术问题之一。由于一个处理可能分布在不同的处理进程上，任何一个进程都可能出现故障，而这个故障问题则需要导致一次回滚。这种回滚大部分又涉及多个其他的进程。这是一个扩散性的多进程通讯问题。要在分布式系统上解决事务问题，必须具备两个核心工具：一个是稳定的状态存储系统；另外一个是方便可靠的广播系统。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKmy?w=554&amp;h=236\" src=\"https://segmentfault.com/img/bVNKmy?w=554&h=236\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">事务中任何一步的状态，都必须在整个集群中可见，并且还要有容灾的能力。这个需求，一般还是由集群的“目录服务”来承担。如果我们的目录服务足够健壮，那么我们可以把每步事务的处理状态，都同步写到目录服务上去。ZooKeeper再次在这个地方能发挥重要的作用。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">如果事务发生了中断，需要回滚，那么这个过程会涉及到多个已经执行过的步骤。也许这个回滚只需要在入口处回滚即可（加入那里有保存回滚所需的数据），也可能需要在各个处理节点上回滚。如果是后者，那么就需要集群中出现异常的节点，向其他所有相关的节点广播一个“回滚！事务ID是XXXX”这样的消息。这个广播的底层一般会由消息队列服务来承载，而类似Jgroups这样的软件，直接提供了广播服务。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">虽然现在我们在讨论事务系统，但实际上分布式系统经常所需的“分布式锁”功能，也是这个系统可以同时完成的。所谓的“分布式锁”，也就是一种能让各个节点先检查后执行的限制条件。如果我们有高效而单子操作的目录服务，那么这个锁状态实际上就是一种“单步事务”的状态记录，而回滚操作则默认是“暂停操作，稍后再试”。这种“锁”的方式，比事务的处理更简单，因此可靠性更高，所以现在越来越多的开发人员，愿意使用这种“锁”服务，而不是去实现一个“事务系统”。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKmI?w=356&amp;h=345\" src=\"https://segmentfault.com/img/bVNKmI?w=356&h=345\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">自动部署工具（Docker）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">由于分布式系统最大的需求，是在运行时（有可能需要中断服务）来进行服务容量的变更：扩容或者缩容。而在分布式系统中某些节点故障的时候，也需要新的节点来恢复工作。这些如果还是像老式的服务器管理方式，通过填表、申报、进机房、装服务器、部署软件……这一套做法，那效率肯定是不行。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">在分布式系统的环境下，我们一般都是采用“池”的方式来管理服务。我们预先会申请一批机器，然后在某些机器上运行服务软件，另外一些则作为备份。显然我们这一批服务器不可能只为某一个业务服务，而是会提供多个不同的业务承载。那些备份的服务器，则会成为多个业务的通用备份“池”。随着业务需求的变化，一些服务器可能“退出”A服务而“加入”B服务。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">这种频繁的服务变化，依赖高度自动的软件部署工具。我们的运维人员，应该掌握这开发人员提供的部署工具，而不是厚厚的手册，来进行这类运维操作。一些比较有经验的开发团队，会统一所有的业务底层框架，以期大部分的部署、配置工具，都能用一套通用的系统来进行管理。而开源界，也有类似的尝试，最广为人知的莫过于RPM安装包格式，然而RPM的打包方式还是太复杂，不太符合服务器端程序的部署需求。所以后来又出现了Chef为代表的，可编程的通用部署系统。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKmR?w=500&amp;h=415\" src=\"https://segmentfault.com/img/bVNKmR?w=500&h=415\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">然而，当NoSQL兴起，大家突然发现，其实很多互联网业务，其数据格式是如此的简单，很多时候根部不需要关系型数据库那种复杂的表格。对于索引的要求往往也只是根据主索引搜索。而更复杂的全文搜索，本身数据库也做不到。所以现在相当多的高并发的互联网业务，首选NoSQL来做存储设施。最早的NoSQL数据库有MangoDB等，现在最流行的似乎就是Redis了。甚至有些团队，把Redis也当成缓冲系统的一部分，实际上也是认可Redis的性能优势。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">NoSQL除了更快、承载量更大以外，更重要的特点是，这种数据存储方式，只能按照一条索引来检索和写入。这样的需求约束，带来了分布上的好处，我们可以按这条主索引，来定义数据存放的进程（服务器）。这样一个数据库的数据，就能很方便的存放在不同的服务器上。在分布式系统的必然趋势下，数据存储层终于也找到了分布的方法。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKne?w=554&amp;h=312\" src=\"https://segmentfault.com/img/bVNKne?w=554&h=312\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">为了管理大量的分布式服务器端进程，我们确实需要花很多功夫，其优化其部署管理的工作。统一服务器端进程的运行规范，是实现自动化部署管理的基本条件。我们可以根据“操作系统”作为规范，采用Docker技术；也可以根据“Web应用”作为规范，采用某些PaaS平台技术；或者自己定义一些更具体的规范，自己开发完整的分布式计算平台。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">日志服务（log4j）</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">服务器端的日志，一直是一个既重要又容易被忽视的问题。很多团队在刚开始的时候，仅仅把日志视为开发调试、排除BUG的辅助工具。但是很快会发现，在服务运营起来之后，日志几乎是服务器端系统，在运行时可以用来了解程序情况的唯一有效手段。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">尽管我们有各种profile工具，但是这些工具大部分都不适合在正式运营的服务上开启，因为会严重降低其运行性能。所以我们更多的时候需要根据日志来分析。尽管日志从本质上，就是一行行的文本信息，但是由于其具有很大的灵活性，所以会很受开发和运维人员的重视。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">日志本身从概念上，是一个很模糊的东西。你可以随便打开一个文件，然后写入一些信息。但是现代的服务器系统，一般都会对日志做一些标准化的需求规范：日志必须是一行一行的，这样比较方便日后的统计分析；每行日志文本，都应该有一些统一的头部，比如日期时间就是基本的需求；日志的输出应该是分等级的，比如fatal/error/warning/info/debug/trace等等，程序可以在运行时调整输出的等级，以便可以节省日志打印的消耗；日志的头部一般还需要一些类似用户ID或者IP地址之类的头信息，用于快速查找定位过滤某一批日志记录，或者有一些其他的用于过滤缩小日志查看范围的字段，这叫做染色功能；日志文件还需要有“回滚”功能，也就是保持固定大小的多个文件，避免长期运行后，把硬盘写满。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">由于有上述的各种需求，所以开源界提供了很多游戏的日志组件库，比如大名鼎鼎的log4j，以及成员众多的log4X家族库，这些都是应用广泛而饱受好评的工具。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">不过对比日志的打印功能，日志的搜集和统计功能却往往比较容易被忽视。作为分布式系统的程序员，肯定是希望能从一个集中节点，能搜集统计到整个集群日志情况。而有一些日志的统计结果，甚至希望能在很短时间内反复获取，用来监控整个集群的健康情况。要做到这一点，就必须有一个分布式的文件系统，用来存放源源不断到达的日志（这些日志往往通过UDP协议发送过来）。而在这个文件系统上，则需要有一个类似Map Reduce架构的统计系统，这样才能对海量的日志信息，进行快速的统计以及报警。有一些开发者会直接使用Hadoop系统，有一些则用Kafka来作为日志存储系统，上面再搭建自己的统计程序。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">日志服务是分布式运维的仪表盘、潜望镜。如果没有一个可靠的日志服务，整个系统的运行状况可能会是失控的。所以无论你的分布式系统节点是多还是少，必须花费重要的精力和专门的开发时间，去建立一个对日志进行自动化统计分析的系统。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKog?w=554&amp;h=301\" src=\"https://segmentfault.com/img/bVNKog?w=554&h=301\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><h2 id=\"articleHeader5\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">分布式系统在开发效率上造成的问题和解决思路</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">根据上文所述，分布式系统在业务需求的功能以为，还需要增加额外很多非功能的需求。这些非功能需求，往往都是为了一个多进程系统能稳定可靠运行而去设计和实现的。这些“额外”的工作，一般都会让你的代码更加复杂，如果没有很好的工具，就会让你的开发效率严重下降。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">微服务框架：EJB、WebService</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">当我们在讨论服务器端软件分布的时候，服务进程之间的通信就难免了。然而服务进程间的通讯，并不是简单的收发消息就能完成的。这里还涉及了消息的路由、编码解码、服务状态的读写等等。如果整个流程都由自己开发，那就太累人了。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKoI?w=298&amp;h=267\" src=\"https://segmentfault.com/img/bVNKoI?w=298&h=267\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">所以业界很早就推出了各种分布式的服务器端开发框架，最著名的就是“EJB”——企业JavaBean。但凡冠以“企业”的技术，往往都是分布式下所需的部分，而EJB这种技术，也是一种分布式对象调用的技术。我们如果需要让多个进程合作完成任务，则需要把任务分解到多个“类”上，然后这些“类”的对象就会在各个进程容器中存活，从而协作提供服务。这个过程很“面向对象”。每个对象都是一个“微服务”，可以提供某些分布式的功能。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">而另外一些系统，则走向学习互联网的基本模型：HTTP。所以就有了各种的WebService框架，从开源的到商业软件，都有各自的WebService实现。这种模型，把复杂的路由、编解码等操作，简化成常见的一次HTTP操作，是一种非常有效的抽象。开发人员开发和部署多个WebService到Web服务器上，就完成了分布式系统的搭建。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKoS?w=435&amp;h=164\" src=\"https://segmentfault.com/img/bVNKoS?w=435&h=164\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">不管我们是学习EJB还是WebService，实际上我们都需要简化分布式调用的复杂程度。而分布式调用的复杂之处，就是因为需要把容灾、扩容、负载均衡等功能，融合到跨进程调用里。所以使用一套通用的代码，来为所有的跨进程通讯（调用），统一的实现容灾、扩容、负载均衡、过载保护、状态缓存命中等等非功能性需求，能大大简化整个分布式系统的复杂性。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">一般我们的微服务框架，都会在路由阶段，对整个集群所有节点的状态进行观察，如哪些地址上运行了哪些服务的进程，这些服务进程的负载状况如何，是否可用，然后对于有状态的服务，还会使用类似一致性哈希的算法，去尽量试图提高缓存的命中率。当集群中的节点状态发生变化的时候，微服务框架下的所有节点，都能尽快的获得这个变化的情况，从新根据当前状态，重新规划以后的服务路由方向，从而实现自动化的路由选择，避开那些负载过高或者失效的节点。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">有一些微服务框架，还提供了类似IDL转换成“骨架”、“桩”代码的工具，这样在编写远程调用程序的时候，完全无需编写那些复杂的网络相关的代码，所有的传输层、编码层代码都自动的编写好了。这方面EJB、Facebook的Thrift，Google gRPC都具备这种能力。在具备代码生成能力的框架下，我们编写一个分布式下可用的功能模块（可能是一个函数或者是一个类），就好像编写一个本地的函数那样简单。这绝对是分布式系统下非常重要的效率提升。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKoX?w=406&amp;h=367\" src=\"https://segmentfault.com/img/bVNKoX?w=406&h=367\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">异步编程工具：协程、Futrue、Lamda</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">在分布式系统中编程，你不可避免的会碰到大量的“回调”型API。因为分布式系统涉及非常多的网络通信。任何一个业务命令，都可能被分解到多个进程，通过多次网络通信来组合完成。由于异步非阻塞的编程模型大行其道，所以我们的代码也往往动不动就要碰到“回调函数”。然而，回调这种异步编程模型，是一种非常不利于代码阅读的编程方法。因为你无法从头到尾的阅读代码，去了解一个业务任务，是怎样被逐步的完成的。属于一个业务任务的代码，由于多次的非阻塞回调，从而被分割成很多个回调函数，在代码的各处被串接起来。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">更有甚者，我们有时候会选择使用“观察者模式”，我们会在一个地方注册大量的“事件-响应函数”，然后在所有需要回调的地方，都发出一个事件。——这样的代码，比单纯的注册回调函数更难理解。因为事件对应的响应函数，通常在发出事件处是无法找到的。这些函数永远都会放在另外的一些文件里，而且有时候这些函数还会在运行时改变。而事件名字本身，也往往是匪夷所思难以理解的，因为当你的程序需要成千上百的事件的时候，起一个容易理解名符其实的名字，几乎是不可能的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">为了解决回调函数这种对于代码可读性的破坏作用，人们发明了很多不同的改进方法。其中最著名的是“协程”。我们以前常常习惯于用多线程来解决问题，所以非常熟悉以同步的方式去写代码。协程正是延续了我们的这一习惯，但不同于多线程的是，协程并不会“同时”运行，它只是在需要阻塞的地方，用Yield()切换出去执行其他协程，然后当阻塞结束后，用Resume()回到刚刚切换的位置继续往下执行。这相当于我们可以把回调函数的内容，接到Yield()调用的后面。这种编写代码的方法，非常类似于同步的写法，让代码变得非常易读。但是唯一的缺点是，Resume()的代码还是需要在所谓“主线程”中运行。用户必须自己从阻塞恢复的时候，去调用Resume()。协程另外一个缺点，是需要做栈保存，在切换到其他协程之后，栈上的临时变量，也都需要额外占用空间，这限制了协程代码的写法，让开发者不能用太大的临时变量。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKo8?w=452&amp;h=212\" src=\"https://segmentfault.com/img/bVNKo8?w=452&h=212\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">而另外一种改善回调函数的写法，往往叫做Future/Promise模型。这种写法的基本思路，就是“一次性把所有回调写到一起”。这是一个非常实用的编程模型，它没有让你去彻底干掉回调，而是让你可以把回调从分散各处，集中到一个地方。在同一段代码中，你可以清晰的看到各个异步的步骤是如何串接、或者并行执行的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKpe?w=533&amp;h=223\" src=\"https://segmentfault.com/img/bVNKpe?w=533&h=223\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">最后说一下lamda模型，这种写法流行于js语言的广泛应用。由于在其他语言中，定一个回调函数是非常费事的：Java语言要设计一个接口然后做一个实现，简直是五星级的费事程度；C/C++支持函数指针，算是比较简单，但是也很容易导致代码看不懂；脚本语言相对好一些，也要定义个函数。而直接在调用回调的地方，写回调函数的内容，是最方便开发，也比较利于阅读的。更重要的，lamda一般意味着闭包，也就是说，这种回调函数的调用栈，是被分别保存的，很多需要在异步操作中，需要建立一个类似“会话池”的状态保存变量，在这里都是不需要的，而是可以自然生效的。这一点和协程有异曲同工之妙。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKpl?w=279&amp;h=361\" src=\"https://segmentfault.com/img/bVNKpl?w=279&h=361\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">不管使用哪一种异步编程方式，其编码的复杂度，都是一定比同步调用的代码高的。所以我们在编写分布式服务器代码的时候，一定要仔细规划代码结构，避免出现随意添加功能代码，导致代码的可读性被破坏的情况。不可读的代码，就是不可维护的代码，而大量异步回调的服务器端代码，是更容易出现这种情况的。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><strong style=\"box-sizing: border-box;\">云服务模型：IaaS/PaaS/SaaS</strong></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">在复杂的分布式系统开发和使用过程中，如何对大量服务器和进程的运维，一直是一个贯穿其中的问题。不管是使用微服务框架、还是统一的部署工具、日志监控服务，都是因为大量的服务器，要集中的管理，是非常不容易的。这里背后的原因，主要是大量的硬件和网络，把逻辑上的计算能力，切割成很多小块。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">随着计算机运算能力的提升，出现的虚拟化技术，却能把被分割的计算单元，更智能的统一起来。其中最常见的就是IaaS技术：当我们可以用一个服务器硬件，运行多个虚拟的服务器操作系统的时候，我们需要维护的硬件数量就会成倍的下降。而PaaS技术的流行，让我们可以为某一种特定的编程模型，统一的进行系统运行环境的部署维护。而不需要再一台台服务器的去装操作系统、配置运行容器、上传运行代码和数据。在没有统一的PaaS之前，安装大量的MySQL数据库，曾经是消耗大量时间和精力的工作。</p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">当我们的业务模型，成熟到可以抽象为一些固定的软件时，我们的分布式系统就会变得更加易用。我们的计算能力不再是代码和库，而是一个个通过网络提供服务的云——SaaS，这样使用者根本来维护、部署的工作都不需要，只要申请一个接口，填上预期的容量额度，就能直接使用了。这不仅节省了大量开发对应功能的事件，还等于把大量的运维工作，都交出去给SaaS的维护者——而他们做这样的维护会更加专业。<br style=\"box-sizing: border-box;\"/><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKpw?w=300&amp;h=254\" src=\"https://segmentfault.com/img/bVNKpw?w=300&h=254\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">在运维模型的进化上，从IaaS到PaaS到SaaS，其应用范围也许是越来越窄，但使用的便利性却成倍的提高。这也证明了，软件劳动的工作，也是可以通过分工，向更专业化、更细分的方向去提高效率。</p><h2 id=\"articleHeader6\" style=\"box-sizing: border-box; font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-weight:=\"\" line-height:=\"\" color:=\"\" margin:=\"\" 1.5em=\"\" 0px=\"\" font-size:=\"\" border-bottom:=\"\" 1px=\"\" solid=\"\" padding-bottom:=\"\" white-space:=\"\" background-color:=\"\">总结分布式系统问题的解决路径</h2><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\"><span class=\"img-wrap\" style=\"box-sizing: border-box;\"><img data-src=\"/img/bVNKpK?w=650&amp;h=768\" src=\"https://segmentfault.com/img/bVNKpK?w=650&h=768\" style=\"box-sizing: border-box; border: 1px solid rgb(221, 221, 221); vertical-align: middle; max-width: 100%; position: static !important; padding: 3px; cursor: pointer; display: inline;\"/></span></p><p style=\"box-sizing: border-box; margin-top: 1.5em; margin-bottom: 1.5em; color: rgb(51, 51, 51); font-family: -apple-system, \" helvetica=\"\" pingfang=\"\" hiragino=\"\" sans=\"\" wenquanyi=\"\" micro=\"\" microsoft=\"\" font-size:=\"\" white-space:=\"\" background-color:=\"\">针对服务器承载能力的问题，腾讯WeTest运用了沉淀十多年的内部实践经验总结，通过基于真实业务场景和用户行为进行压力测试，帮助游戏开发者发现服务器端的性能瓶颈，进行针对性的性能调优，降低服务器采购和维护成本，提高用户留存和转化率。</p><p><br/></p>',`is_tui`=1,`status`=1,`views`=1,`like`=0,`auth`='韩会强',`ip`='123.233.116.122',`update_time`=1502174614  WHERE  `id` = 45 [ RunTime:0.005571s ]

---------------------------------------------------------------
[ 2017-08-08T14:43:36+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html
[ log ] hhqblog.com/admin/article/index.html [运行时间：0.025921s][吞吐率：38.58req/s] [内存消耗：3,741.97kb] [文件加载：53]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/edit_article/id/45/html',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/admin/view/article/index.html [ array (
  0 => 'allpage',
  1 => 'current',
  2 => 'keyword',
  3 => 'count',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000290s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000814s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000167s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000788s ]

---------------------------------------------------------------
[ 2017-08-08T14:43:36+08:00 ] 172.17.180.47 123.233.116.122 GET /admin/article/index.html?page=1&keyword=
[ log ] hhqblog.com/admin/article/index.html?page=1&keyword= [运行时间：0.030816s][吞吐率：32.45req/s] [内存消耗：3,673.20kb] [文件加载：52]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'article',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/admin/article/index.html',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'keyword' => '',
)
[ info ] [ RUN ] app\admin\controller\Article->index[ /yjdata/www/hhqblog/application/admin/controller/Article.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000338s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000853s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` LIMIT 1 [ RunTime:0.000154s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` ORDER BY a.id desc LIMIT 0,10 [ RunTime:0.000761s ]

---------------------------------------------------------------
[ 2017-08-08T14:52:40+08:00 ] 172.17.180.47 157.55.39.136 GET /
[ log ] hhqblog.com/ [运行时间：0.036030s][吞吐率：27.75req/s] [内存消耗：5,964.09kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cache-control' => 'no-cache',
  'connection' => 'Keep-Alive',
  'pragma' => 'no-cache',
  'accept' => '*/*',
  'accept-encoding' => 'gzip, deflate',
  'from' => 'bingbot(at)microsoft.com',
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000320s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000803s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000937s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000447s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000455s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000331s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000369s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000327s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000914s ]

---------------------------------------------------------------
[ 2017-08-08T15:13:47+08:00 ] 172.17.180.47 123.233.116.122 GET /
[ log ] hhqblog.com/ [运行时间：0.033919s][吞吐率：29.48req/s] [内存消耗：6,019.41kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000290s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000825s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000717s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000459s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000349s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000946s ]

---------------------------------------------------------------
[ 2017-08-08T15:13:48+08:00 ] 172.17.180.47 123.233.116.122 GET /index/index/index.html?page=1
[ log ] hhqblog.com/index/index/index.html?page=1 [运行时间：0.052638s][吞吐率：19.00req/s] [内存消耗：5,994.91kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'index',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_id.1.3fef=5dce351e789a92be.1500950707.6.1502172284.1502172284.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000301s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000827s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000666s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000412s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000331s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000984s ]

---------------------------------------------------------------
[ 2017-08-08T15:14:08+08:00 ] 172.17.180.47 123.233.116.122 GET /ar/42
[ log ] www.hhqblog.com/ar/42 [运行时间：0.030760s][吞吐率：32.51req/s] [内存消耗：4,423.58kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_ref.1.c6f5=%5B%22%22%2C%22%22%2C1502087894%2C%22http%3A%2F%2Fsearch.hhqblog.com%2Fcse%2Fsearch%3Fs%3D3985469976436119383%26entry%3D1%26q%3Dphp%22%5D; _pk_id.1.c6f5=8954b2a892899c3c.1500952384.4.1502087900.1502087894.',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://hhqblog.com/',
  'upgrade-insecure-requests' => '1',
  'x-lantern-version' => '3.7.4',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '42',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000314s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000838s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000688s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 42 LIMIT 1 [ RunTime:0.000316s ]

---------------------------------------------------------------
[ 2017-08-08T15:14:23+08:00 ] 172.17.180.47 123.233.116.122 GET /
[ log ] www.hhqblog.com/ [运行时间：0.033837s][吞吐率：29.55req/s] [内存消耗：6,019.81kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_ref.1.c6f5=%5B%22%22%2C%22%22%2C1502176450%2C%22http%3A%2F%2Fhhqblog.com%2F%22%5D; _pk_id.1.c6f5=8954b2a892899c3c.1500952384.5.1502176450.1502176450.; _pk_ses.1.c6f5=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://www.hhqblog.com/ar/42',
  'upgrade-insecure-requests' => '1',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000316s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000846s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000756s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000480s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000352s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.001170s ]

---------------------------------------------------------------
[ 2017-08-08T15:14:23+08:00 ] 172.17.180.47 123.233.116.122 GET /index/index/index.html?page=1
[ log ] www.hhqblog.com/index/index/index.html?page=1 [运行时间：0.067249s][吞吐率：14.87req/s] [内存消耗：5,994.86kb] [文件加载：55]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'index',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.8',
  'cookie' => '_pk_ref.1.c6f5=%5B%22%22%2C%22%22%2C1502176450%2C%22http%3A%2F%2Fhhqblog.com%2F%22%5D; _pk_id.1.c6f5=8954b2a892899c3c.1500952384.5.1502176450.1502176450.; _pk_ses.1.c6f5=*',
  'proxy-connection' => 'keep-alive',
  'referer' => 'http://www.hhqblog.com/',
  'x-requested-with' => 'XMLHttpRequest',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000443s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.001011s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000793s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000469s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000409s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.001160s ]

---------------------------------------------------------------
[ 2017-08-08T16:24:25+08:00 ] 172.17.180.47 54.145.40.87 GET /
[ log ] hhqblog.com/ [运行时间：0.036250s][吞吐率：27.59req/s] [内存消耗：5,963.54kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'hhqblog.com',
  'accept' => '*/*',
  'accept-encoding' => 'gzip',
  'user-agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000304s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000799s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000941s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000438s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000468s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 1 ORDER BY id desc LIMIT 6 [ RunTime:0.000307s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000336s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000316s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.000866s ]

---------------------------------------------------------------
[ 2017-08-08T16:37:47+08:00 ] 172.17.180.47 157.55.39.136 GET /
[ log ] www.hhqblog.com/ [运行时间：0.035726s][吞吐率：27.99req/s] [内存消耗：6,019.18kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cache-control' => 'no-cache',
  'connection' => 'Keep-Alive',
  'pragma' => 'no-cache',
  'accept' => '*/*',
  'accept-encoding' => 'gzip, deflate',
  'from' => 'bingbot(at)microsoft.com',
  'host' => 'www.hhqblog.com',
  'user-agent' => 'Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000317s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000858s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000756s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000439s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000385s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.001054s ]

---------------------------------------------------------------
[ 2017-08-08T17:11:58+08:00 ] 172.17.180.47 220.181.108.170 GET /
[ log ] www.hhqblog.com/ [运行时间：0.033375s][吞吐率：29.96req/s] [内存消耗：6,019.08kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'www.hhqblog.com',
  'connection' => 'close',
  'user-agent' => 'Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)',
  'accept-language' => 'zh-cn,zh-tw',
  'if-none-match' => '"@NULL@"',
  'accept-encoding' => 'gzip',
  'accept' => '*/*',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Index->index[ /yjdata/www/hhqblog/application/index/controller/Index.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/index/index.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'list',
  5 => 'allpage',
  6 => 'top_line',
  7 => 'carousel',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000288s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000834s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000667s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `type` = 2 ORDER BY id desc LIMIT 6 [ RunTime:0.000411s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_article` WHERE  `status` = 1 LIMIT 1 [ RunTime:0.000352s ]
[ sql ] [ SQL ] SELECT `a`.*,`ac`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ac` ON `a`.`cate_id`=`ac`.`id` WHERE  `a`.`status` = 1 ORDER BY id desc LIMIT 0,15 [ RunTime:0.001041s ]

---------------------------------------------------------------
[ 2017-08-08T19:54:32+08:00 ] 172.17.180.47 95.28.172.46 GET /ar/20
[ log ] www.hhqblog.com/ar/20 [运行时间：0.032501s][吞吐率：30.77req/s] [内存消耗：4,381.38kb] [文件加载：56]
[ info ] [ LANG ] /yjdata/www/hhqblog/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'index',
    1 => 'Artical',
    2 => 'detail',
  ),
  'convert' => false,
)
[ info ] [ HEADER ] array (
  'accept' => 'image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, */*',
  'accept-language' => 'ru-RU',
  'referer' => 'http://yandex.ru/clck/jsredir?from=yandex.ru%3Bsearch%3Bweb%3B%3B&text=&etext=1507.bhCV3Fu4SMgcigYPoOCg96MH1NDRZUee83dEdOLK7pJiAmBzKiIX4SG6ugHFus-b.481dd456f10937d089bb64fad7f165518fc7874c&uuid=&state=_BLhILn4SxNIvvL0W45KSic66uCIg23qh8iRG98qeIXmeppkgUc0YGftRg9cP1erjBfVTUcXDXk&data=UlNrNmk5WktYejR0eWJFYk1LdmtxbWxfNklmUEVuSXFMZXM1d0M2cmRKVTI4UzFVS0JHTDJkZ0NaQ1lNMVQ0ZnRncGFibDlaN28tTWhLRHJ4aHRXQ202enotQjN6VEZjeW1VVGVlaDJ4VFU&b64e=2&sign=1ed1d31366423354b5bb1c6d5836c555&keyno=0&cst=AiuY0DBWFJ7IXge4WdYJQYP93Xfrtkba4crwu1opVEE1QiTpfW6AhN9tVF-q2bXb8z2lpX6B6pOLGT1hsb13lZVefArUuhdtJhENgXY8deR2fpuPlSa3OqxI58i9SDBj7fgtXo6nKx8d4n7TPQzoM5UGAdEDUEP9&ref=orjY4mGPRjk5boDnW0uvlrrd71vZw9kp5uQozpMtKCW5ri5MzTNSEsbhKKNNV8J1dsWbvmxcLDQm5t8vyDNE4kLGFck-MCW0-xocCCh_cqdvYLhY_6jVrw&l10n=ru&cts=1502193026470&mc=4.76784904155',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 YaBrowser/17.6.1.749 Yowser/2.5 Safari/537.36',
  'accept-encoding' => 'gzip, deflate',
  'host' => 'www.hhqblog.com',
  'connection' => 'close',
  'content-type' => '',
  'content-length' => '',
)
[ info ] [ PARAM ] array (
  'id' => '20',
)
[ info ] [ CACHE ] INIT File
[ info ] [ DB ] INIT mysql
[ info ] [ RUN ] app\index\controller\Artical->detail[ /yjdata/www/hhqblog/application/index/controller/Artical.php ]
[ info ] [ VIEW ] /yjdata/www/hhqblog/public/../application/index/view/artical/detail.html [ array (
  0 => 'menu',
  1 => 'recommend',
  2 => 'newarticle',
  3 => 'hot',
  4 => 'article',
  5 => 'allpage',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000326s ] mysql:dbname=hhqblog;host=127.0.0.1;port=3306;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_article` [ RunTime:0.000791s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1  AND `is_tui` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000934s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` WHERE  `status` = 1 ORDER BY id desc LIMIT 8 [ RunTime:0.000471s ]
[ sql ] [ SQL ] SELECT * FROM `think_article` ORDER BY views desc LIMIT 8 [ RunTime:0.000480s ]
[ sql ] [ SQL ] SELECT `a`.*,`ca`.`name` FROM `think_article` `a` LEFT JOIN `think_article_cate` `ca` ON `a`.`cate_id`=`ca`.`id` WHERE  `a`.`id` = 20 LIMIT 1 [ RunTime:0.000265s ]

---------------------------------------------------------------
